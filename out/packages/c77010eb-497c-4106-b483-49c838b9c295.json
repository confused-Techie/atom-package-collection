{
    "name": "language-terra",
    "repository": {
        "type": "git",
        "url": "https://github.com/jkuziel/language-terra"
    },
    "downloads": 5036,
    "stargazers_count": 1,
    "releases": {
        "latest": "0.1.0"
    },
    "versions": {
        "0.1.0": {
            "name": "language-terra",
            "version": "0.1.0",
            "author": "Joseph Kuziel <jkuziel@gmail.com>",
            "description": "Add syntax highlighting and snippets to Terra files in Atom",
            "keywords": [],
            "repository": "https://github.com/jkuziel/language-terra",
            "license": "MIT",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/language-terra/versions/0.1.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/jkuziel/language-terra/tarball/refs/tags/v0.1.0",
            "sha": "740f654ec0d517a75552c616bd379caa7221a553"
        }
    },
    "readme": "Terra language support in Atom\n======\n\nAdd syntax highlighting and snippets to Terra files in Atom.\n\nOfficial Terra Website: [terralang.org](http://terralang.org)\n\nDerived work based on the [language-lua](https://atom.io/packages/language-lua) Atom package written by [Jorge Garrido Oval](https://github.com/FireZenk)\n\nContributions are greatly appreciated. Please fork this repository and open a\npull request to add snippets, make grammar tweaks, etc.\n\n\nCommon snippets\n---\n| Trigger       | Name                     | Body                 |\n| ------------- |--------------------------| ---------------------|\n| -[            | multiline comment        | --[[ comment... ]]   |\n| =[            | nested multiline comment | --[=[ comment... ]=] |\n| afun          | anon function            | functionName = function (args) -- body... end |\n| for           | for i=1,10               | for i = 1, 10 do -- body... end |\n| fori          | for i,v in ipairs()      | for i,v in ipairs(table_name) do -- body... end |\n| forp          | for k,v in pairs()       | for k,v in pairs(table_name) do -- body... end |\n| fun           | function                 | function functionName (args) -- body... end |\n| if            | if conditional           | if value then --body... end |\n| ife           | if else conditional      | if value then --body... else --body... end |\n| ifn           | if not conditional       | if not value then --body... end |\n| ifne          | if not else conditional  | if not value then --body... else --body... end |\n| lfun          | local function           | local function functionName (args) -- body... end |\n| loc           | local variable definition shortcut | local x = 1 |\n| local         | local variable definition | local x = 1 |\n| ltab          | local table definition   | local name = {}      |\n| print         | print                    | print(\"logging\")     |\n| rep           | repeat loop shortcut     | repeat -- body... until condition |\n| repeat        | repeat loop              | repeat -- body... until condition |\n| req           | require shortcut         | local name = require \"module\" |\n| require       | require                  | local name = require \"module\" |\n| ret           | return definition shortcut | return value       |\n| return        | return definition        | return value         |\n| tab           | table definition         | name = {}            |\n| whi           | while loop shortcut      | while condition do -- body... end |\n| while         | while loop               | while condition do -- body... end |\n\nTable manipulation snippets\n---\n| Trigger       | Name                     | Body                 |\n| ------------- |--------------------------| ---------------------|\n| tabc          | table.concat             | table.concat(tableName, \" \", start_index, end_index) |\n| tabf          | table.foreach            | table.foreach(tableName, function) |\n| tabi          | table.insert             | table.insert(tableName, data) |\n| tabs          | table.sort               | table.sort(tableName, sortfunction) |\n| tabr          | table.remove             | table.remove(tableName, position) |\n| tabm          | table.maxn               | table.maxn(tableName)\n\nMath function snippets\n---\n| Trigger       | Name                     | Body                 |\n| ------------- |--------------------------| ---------------------|\n| abs           | math.abs                 | math.abs(x)          |\n| acos          | math.acos                | math.acos(x)         |\n| asin          | math.asin                | math.asin(x)         |\n| atan          | math.atan                | math.atan(x)         |\n| atan2         | math.atan2               | math.atan2(y, x)     |\n| ceil          | math.ceil                | math.ceil(x)         |\n| cos           | math.cos                 | math.cos(x)          |\n| cosh          | math.cosh                | math.cosh(x)         |\n| deg           | math.deg                 | math.deg(x)          |\n| exp           | math.exp                 | math.exp(x)          |\n| floor         | math.floor               | math.floor(x)        |\n| fmod          | math.fmod                | math.fmod(x, y)      |\n| frexp         | math.frexp               | math.frexp(x)        |\n| huge          | math.huge                | math.huge            |\n| ldexp         | math.ldexp               | math.ldexp(m, e)     |\n| log           | math.log                 | math.log(x)          |\n| log10         | math.log10               | math.log10(x)        |\n| max           | math.max                 | math.max(x, ...)     |\n| min           | math.min                 | math.min(x, ...)     |\n| pi            | math.pi                  | math.pi              |\n| pow           | math.pow                 | math.pow(x, y)       |\n| rad           | math.rad                 | math.rad(x)          |\n| random        | math.random              | math.random(m, n)    |\n| randomseed    | math.randomseed          | math.randomseed(x)   |\n| sin           | math.sin                 | math.sin(x)          |\n| sinh          | math.sinh                | math.sinh(x)         |\n| sqrt          | math.sqrt                | math.sqrt(x)         |\n| tan           | math.tan                 | math.tan(x)          |\n| tanh          | math.tanh                | math.tanh(x)         |\n",
    "metadata": {
        "name": "language-terra",
        "version": "0.1.0",
        "author": "Joseph Kuziel <jkuziel@gmail.com>",
        "description": "Add syntax highlighting and snippets to Terra files in Atom",
        "keywords": [],
        "repository": "https://github.com/jkuziel/language-terra",
        "license": "MIT",
        "engines": {
            "atom": ">=1.0.0 <2.0.0"
        },
        "dependencies": {}
    },
    "created": 1658349672968,
    "updated": 1658349672968,
    "star_gazers": [],
    "creation_method": "Migrated from Atom.io"
}