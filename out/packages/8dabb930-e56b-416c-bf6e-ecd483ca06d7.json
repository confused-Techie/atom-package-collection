{
    "name": "extract-usages",
    "repository": {
        "type": "git",
        "url": "https://github.com/Jaodi/extract-usages"
    },
    "downloads": 406,
    "stargazers_count": 2,
    "releases": {
        "latest": "0.3.0"
    },
    "versions": {
        "0.3.0": {
            "name": "extract-usages",
            "main": "./lib/extract-usages",
            "version": "0.3.0",
            "description": "View all usages of a variable in the editor window",
            "keywords": [],
            "activationCommands": {
                "atom-workspace": "extract-usages:foldUnrelated"
            },
            "repository": "https://github.com/Jaodi/extract-usages",
            "license": "MIT",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/extract-usages/versions/0.3.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/Jaodi/extract-usages/tarball/refs/tags/v0.3.0",
            "sha": "1abda79c13f98e2801a8c11cd094097b81264b56"
        },
        "0.2.0": {
            "name": "extract-usages",
            "main": "./lib/extract-usages",
            "version": "0.2.0",
            "description": "View all usages of a variable in the editor window",
            "keywords": [],
            "activationCommands": {
                "atom-workspace": "extract-usages:foldUnrelated"
            },
            "repository": "https://github.com/Jaodi/extract-usages",
            "license": "MIT",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/extract-usages/versions/0.2.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/Jaodi/extract-usages/tarball/refs/tags/v0.2.0",
            "sha": "953cb15d0345f28aa8288e9dfcea89f7246c6f82"
        },
        "0.1.0": {
            "name": "extract-usages",
            "main": "./lib/extract-usages",
            "version": "0.1.0",
            "description": "View all usages of a variable in the editor window",
            "keywords": [],
            "activationCommands": {
                "atom-workspace": "extract-usages:foldUnrelated"
            },
            "repository": "https://github.com/Jaodi/extract-usages",
            "license": "MIT",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/extract-usages/versions/0.1.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/Jaodi/extract-usages/tarball/refs/tags/v0.1.0",
            "sha": "59a73f8da694187a7c4d3f80b6acabf76bcb8eb1"
        }
    },
    "readme": "# Extract usages package\n\nThis tool finds all usages of a variable in the file and leaves only lines related to it in the editor window. \"Extract usages\" essentially makes your code look like it was written for a single variable.\n\n![Extract usages](https://raw.githubusercontent.com/Jaodi/extract-usages/master/img/Animation.gif)\n\n### Installation\n\nThere are three dependencies for scopeMinimizer: esprima, estraverse and esrefactor. It should be enough to install only esrefactor for it is dependent on other two.\n\n```sh\n$ npm i esrefactor\n```\n\n### Why it exists\n\nThe incentive for this program was my reading of \"Code Complete\" by Steve McConnell arguing minimization of a variable's scope not only logically, but visually as well (making the lines, containing a reference to said variable closer to each other). The concept is very native to me, for that is how I start exploring someone else's code: focus on a variable that took my attention by having a descriptive name or throwing an error or through some other means, and finding every line, where it is mentioned.\nEditors I've seen always do this in a separate window via \"Find Usages\" feature, which I find somewhat confusing. The dream was to fold all lines non-related to the variable being examined (that is to say, leave only lines, containing a reference to the variable, or the declaration of an enclosing block of one of the former) and unfold the rest when necessary.\n",
    "metadata": {
        "name": "extract-usages",
        "main": "./lib/extract-usages",
        "version": "0.3.0",
        "description": "View all usages of a variable in the editor window",
        "keywords": [],
        "activationCommands": {
            "atom-workspace": "extract-usages:foldUnrelated"
        },
        "repository": "https://github.com/Jaodi/extract-usages",
        "license": "MIT",
        "engines": {
            "atom": ">=1.0.0 <2.0.0"
        },
        "dependencies": {}
    },
    "created": 1658340878101,
    "updated": 1658340878101,
    "star_gazers": [],
    "creation_method": "Migrated from Atom.io"
}