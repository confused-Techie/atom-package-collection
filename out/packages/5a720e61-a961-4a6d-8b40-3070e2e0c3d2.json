{
    "name": "atom-es7-react-js-snippets",
    "repository": {
        "type": "git",
        "url": "https://github.com/evilPaprika/atom-es7-javascript-react-snippets"
    },
    "downloads": 2903,
    "stargazers_count": 3,
    "releases": {
        "latest": "0.1.1"
    },
    "versions": {
        "0.1.1": {
            "name": "atom-es7-react-js-snippets",
            "displayName": "ES7 React/Redux/GraphQL/React-Native snippets for Atom",
            "description": "Simple snippets for React, Redux and Graphql in JS/TS with ES7 syntax",
            "version": "0.1.1",
            "publisher": "evilPaprika",
            "icon": "images/logo.png",
            "keywords": [
                "snippets",
                "react",
                "redux",
                "react-native",
                "javascript",
                "typescript"
            ],
            "repository": "https://github.com/evilPaprika/atom-es7-javascript-react-snippets",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/atom-es7-react-js-snippets/versions/0.1.1/tarball"
            },
            "tarball_url": "https://api.github.com/repos/evilPaprika/atom-es7-javascript-react-snippets/tarball/refs/tags/v0.1.1",
            "sha": "513311d21aac63538be81629c92422155f074ecc"
        },
        "0.1.0": {
            "name": "atom-es7-react-js-snippets",
            "displayName": "ES7 React/Redux/GraphQL/React-Native snippets for Atom",
            "description": "Simple snippets for React, Redux and Graphql in JS/TS with ES7 syntax",
            "version": "0.1.0",
            "publisher": "evilPaprika",
            "icon": "images/logo.png",
            "keywords": [
                "snippets",
                "react",
                "redux",
                "react-native",
                "javascript",
                "typescript"
            ],
            "repository": "https://github.com/evilPaprika/atom-es7-javascript-react-snippets",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/atom-es7-react-js-snippets/versions/0.1.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/evilPaprika/atom-es7-javascript-react-snippets/tarball/refs/tags/v0.1.0",
            "sha": "651cf7066e2f93629b6b0517c3aa17098229485f"
        }
    },
    "readme": "# Atom ES7 React/Redux/React-Native/JS snippets\n\nThis is a port of [this extension for VSCode](https://github.com/dsznajder/vscode-es7-javascript-react-snippets) to Atom. None of snippets are edited.\n\nThis package provides you JavaScript and React/Redux snippets in ES7 with Babel plugin features for [Atom](https://atom.io/)\n\nHere is direct link to VSCode marketplace [ES7 React/Redux/React-Native/JS Snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)\n\n## Supported languages (file extensions)\n\n- JavaScript (.js)\n- JavaScript React (.jsx)\n- TypeScript (.ts)\n- TypeScript React (.tsx)\n\n## Snippets info\n\nEvery space inside `{ }` and `( )` means that this is pushed into next line :)\n`$` represent each step after `tab`.\n\n_TypeScript_ has own components and own snippets. Use search or just type `ts` before every component snippet.\n\nI.E. `tsrcc`\n\n## Basic Methods\n\n|  Prefix | Method                                              |\n| ------: | --------------------------------------------------- |\n|  `imp→` | `import moduleName from 'module'`                   |\n|  `imn→` | `import 'module'`                                   |\n|  `imd→` | `import { destructuredModule } from 'module'`       |\n|  `ime→` | `import * as alias from 'module'`                   |\n|  `ima→` | `import { originalName as aliasName} from 'module'` |\n|  `exp→` | `export default moduleName`                         |\n|  `exd→` | `export { destructuredModule } from 'module'`       |\n|  `exa→` | `export { originalName as aliasName} from 'module'` |\n|  `enf→` | `export const functionName = (params) => { }`       |\n|  `edf→` | `export default (params) => { }`                    |\n|  `met→` | `methodName = (params) => { }`                      |\n|  `fre→` | `arrayName.forEach(element => { }`                  |\n|  `fof→` | `for(let itemName of objectName { }`                |\n|  `fin→` | `for(let itemName in objectName { }`                |\n| `anfn→` | `(params) => { }`                                   |\n|  `nfn→` | `const functionName = (params) => { }`              |\n|  `dob→` | `const {propName} = objectToDescruct`               |\n|  `dar→` | `const [propName] = arrayToDescruct`                |\n|  `sti→` | `setInterval(() => { }, intervalTime`               |\n|  `sto→` | `setTimeout(() => { }, delayTime`                   |\n| `prom→` | `return new Promise((resolve, reject) => { }`       |\n| `cmmb→` | `comment block`                                     |\n|   `cp→` | `const { } = this.props`                            |\n|   `cs→` | `const { } = this.state`                            |\n\n## React\n\n|      Prefix | Method                                                                              |\n| ----------: | ----------------------------------------------------------------------------------- |\n|      `imr→` | `import React from 'react'`                                                         |\n|     `imrd→` | `import ReactDOM from 'react-dom'`                                                  |\n|     `imrc→` | `import React, { Component } from 'react'`                                          |\n|    `imrcp→` | `import React, { Component } from 'react' & import PropTypes from 'prop-types'`     |\n|    `imrpc→` | `import React, { PureComponent } from 'react'`                                      |\n|   `imrpcp→` | `import React, { PureComponent } from 'react' & import PropTypes from 'prop-types'` |\n|     `imrm→` | `import React, { memo } from 'react'`                                               |\n|    `imrmp→` | `import React, { memo } from 'react' & import PropTypes from 'prop-types'`          |\n|     `impt→` | `import PropTypes from 'prop-types'`                                                |\n|     `imrr→` | `import { BrowserRouter as Router, Route, NavLink} from 'react-router-dom'`         |\n|     `imbr→` | `import { BrowserRouter as Router} from 'react-router-dom'`                         |\n|    `imbrc→` | `import { Route, Switch, NavLink, Link } from react-router-dom'`                    |\n|    `imbrr→` | `import { Route } from 'react-router-dom'`                                          |\n|    `imbrs→` | `import { Switch } from 'react-router-dom'`                                         |\n|    `imbrl→` | `import { Link } from 'react-router-dom'`                                           |\n|   `imbrnl→` | `import { NavLink } from 'react-router-dom'`                                        |\n|     `imrs→` | `import React, { useState } from 'react'`                                           |\n|    `imrse→` | `import React, { useState, useEffect } from 'react'`                                |\n|    `redux→` | `import { connect } from 'react-redux'`                                             |\n|   `rconst→` | `constructor(props) with this.state`                                                |\n|    `rconc→` | `constructor(props, context) with this.state`                                       |\n|      `est→` | `this.state = { }`                                                                  |\n|      `cwm→` | `componentWillMount = () => { }` DEPRECATED!!!                                      |\n|      `cdm→` | `componentDidMount = () => { }`                                                     |\n|      `cwr→` | `componentWillReceiveProps = (nextProps) => { }` DEPRECATED!!!                      |\n|      `scu→` | `shouldComponentUpdate = (nextProps, nextState) => { }`                             |\n|     `cwup→` | `componentWillUpdate = (nextProps, nextState) => { }` DEPRECATED!!!                 |\n|     `cdup→` | `componentDidUpdate = (prevProps, prevState) => { }`                                |\n|     `cwun→` | `componentWillUnmount = () => { }`                                                  |\n|    `gdsfp→` | `static getDerivedStateFromProps(nextProps, prevState) { }`                         |\n|     `gsbu→` | `getSnapshotBeforeUpdate = (prevProps, prevState) => { }`                           |\n|      `ren→` | `render() { return( ) }`                                                            |\n|      `sst→` | `this.setState({ })`                                                                |\n|      `ssf→` | `this.setState((state, props) => return { })`                                       |\n|    `props→` | `this.props.propName`                                                               |\n|    `state→` | `this.state.stateName`                                                              |\n| `rcontext→` | `const ${1:contextName} = React.createContext()`                                    |\n|     `cref→` | `this.${1:refName}Ref = React.createRef()`                                          |\n|     `fref→` | `const ref = React.createRef()`                                                     |\n|      `bnd→` | `this.methodName = this.methodName.bind(this)`                                      |\n\n## React Hooks\n\n- All hooks from [official docs](https://reactjs.org/docs/hooks-reference.html) are added with hook name prefix.\n\n## React Native\n\n|     Prefix | Method                                 |\n| ---------: | -------------------------------------- |\n|    `imrn→` | `import { $1 } from 'react-native'`    |\n| `rnstyle→` | `const styles = StyleSheet.create({})` |\n\n## Redux\n\n|       Prefix | Method                    |\n| -----------: | ------------------------- |\n|  `rxaction→` | `redux action template`   |\n|   `rxconst→` | `export const $1 = '$1'`  |\n| `rxreducer→` | `redux reducer template`  |\n|  `rxselect→` | `redux selector template` |\n\n## PropTypes\n\n|    Prefix | Method                                   |\n| --------: | ---------------------------------------- |\n|    `pta→` | `PropTypes.array`                        |\n|   `ptar→` | `PropTypes.array.isRequired`             |\n|    `ptb→` | `PropTypes.bool`                         |\n|   `ptbr→` | `PropTypes.bool.isRequired`              |\n|    `ptf→` | `PropTypes.func`                         |\n|   `ptfr→` | `PropTypes.func.isRequired`              |\n|    `ptn→` | `PropTypes.number`                       |\n|   `ptnr→` | `PropTypes.number.isRequired`            |\n|    `pto→` | `PropTypes.object`                       |\n|   `ptor→` | `PropTypes.object.isRequired`            |\n|    `pts→` | `PropTypes.string`                       |\n|   `ptsr→` | `PropTypes.string.isRequired`            |\n|   `ptnd→` | `PropTypes.node`                         |\n|  `ptndr→` | `PropTypes.node.isRequired`              |\n|   `ptel→` | `PropTypes.element`                      |\n|  `ptelr→` | `PropTypes.element.isRequired`           |\n|    `pti→` | `PropTypes.instanceOf(name)`             |\n|   `ptir→` | `PropTypes.instanceOf(name).isRequired`  |\n|    `pte→` | `PropTypes.oneOf([name])`                |\n|   `pter→` | `PropTypes.oneOf([name]).isRequired`     |\n|   `ptet→` | `PropTypes.oneOfType([name])`            |\n|  `ptetr→` | `PropTypes.oneOfType([name]).isRequired` |\n|   `ptao→` | `PropTypes.arrayOf(name)`                |\n|  `ptaor→` | `PropTypes.arrayOf(name).isRequired`     |\n|   `ptoo→` | `PropTypes.objectOf(name)`               |\n|  `ptoor→` | `PropTypes.objectOf(name).isRequired`    |\n|   `ptsh→` | `PropTypes.shape({ })`                   |\n|  `ptshr→` | `PropTypes.shape({ }).isRequired`        |\n|  `ptany→` | `PropTypes.any`                          |\n| `ptypes→` | `static propTypes = {}`                  |\n\n## GraphQL\n\n|     Prefix | Method                                                  |\n| ---------: | ------------------------------------------------------- |\n| `graphql→` | `import { compose, graphql } from react-apollo'`        |\n| `expgql->` | `export default compose(graphql($1, { name: $2 }))($3)` |\n\n## Console\n\n| Prefix | Method                              |\n| -----: | ----------------------------------- |\n| `clg→` | `console.log(object)`               |\n| `clo→` | `console.log(\"object\", object)`     |\n| `ctm→` | `console.time(\"timeId\")`            |\n| `cte→` | `console.timeEnd(\"timeId\")`         |\n| `cas→` | `console.assert(expression,object)` |\n| `ccl→` | `console.clear()`                   |\n| `cco→` | `console.count(label)`              |\n| `cdi→` | `console.dir`                       |\n| `cer→` | `console.error(object)`             |\n| `cgr→` | `console.group(label)`              |\n| `cge→` | `console.groupEnd()`                |\n| `ctr→` | `console.trace(object)`             |\n| `cwa→` | `console.warn`                      |\n| `cin→` | `console.info`                      |\n\n## React Components\n\n### `rcc`\n\n```javascript\nimport React, { Component } from 'react'\n\nexport default class FileName extends Component {\n  render() {\n    return <div>$2</div>\n  }\n}\n```\n\n### `rce`\n\n```javascript\nimport React, { Component } from 'react'\n\nexport class FileName extends Component {\n  render() {\n    return <div>$2</div>\n  }\n}\n\nexport default $1\n```\n\n### `rcep`\n\n```javascript\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class FileName extends Component {\n  static propTypes = {}\n\n  render() {\n    return <div>$2</div>\n  }\n}\n\nexport default $1\n```\n\n### `rpc`\n\n```javascript\nimport React, { PureComponent } from 'react'\n\nexport default class FileName extends PureComponent {\n  render() {\n    return <div>$2</div>\n  }\n}\n```\n\n### `rpcp`\n\n```javascript\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class FileName extends PureComponent {\n  static propTypes = {}\n\n  render() {\n    return <div>$2</div>\n  }\n}\n```\n\n### `rpce`\n\n```javascript\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class FileName extends PureComponent {\n  static propTypes = {}\n\n  render() {\n    return <div>$2</div>\n  }\n}\n\nexport default FileName\n```\n\n### `rccp`\n\n```javascript\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class FileName extends Component {\n  static propTypes = {\n    $2: $3\n  }\n\n  render() {\n    return <div>$4</div>\n  }\n}\n```\n\n### `rfcp`\n\n```javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction $1(props) {\n  return <div>$0</div>\n}\n\n$1.propTypes = {}\n\nexport default $1\n```\n\n### `rfc`\n\n```javascript\nimport React from 'react'\n\nexport default function $1() {\n  return <div>$0</div>\n}\n```\n\n### `rfce`\n\n```javascript\nimport React from 'react'\n\nfunction $1() {\n  return <div>$0</div>\n}\n\nexport default $1\n```\n\n### `rafcp`\n\n```javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst $1 = props => {\n  return <div>$0</div>\n}\n\n$1.propTypes = {}\n\nexport default $1\n```\n\n### `rafc`\n\n```javascript\nimport React from 'react'\n\nexport const $1 = () => {\n  return <div>$0</div>\n}\n```\n\n### `rafce`\n\n```javascript\nimport React from 'react'\n\nconst $1 = () => {\n  return <div>$0</div>\n}\n\nexport default $1\n```\n\n### `rmc`\n\n```javascript\nimport React, { memo } from 'react'\n\nexport default memo(function $1() {\n  return <div>$0</div>\n})\n```\n\n### `rmcp`\n\n```javascript\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst $1 = memo(function $1(props) {\n  return <div>$0</div>\n})\n\n$1.propTypes = {}\n\nexport default $1\n```\n\n### `rcredux`\n\n```javascript\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport class FileName extends Component {\n  render() {\n    return <div>$4</div>\n  }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileName)\n```\n\n### `rcreduxp`\n\n```javascript\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class FileName extends Component {\n  static propTypes = {\n    $2: $3\n  }\n\n  render() {\n    return <div>$4</div>\n  }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileName)\n```\n\n### `rfcredux`\n\n```javascript\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nexport const FileName = () => {\n  return (\n    <div>\n      $4\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileName)\n```\n\n### `rfreduxp`\n\n```javascript\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const FileName = () => {\n  return (\n    <div>\n      $4\n    </div>\n  )\n}\n\nFileName.propTypes = {\n  $2: $3\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileName)\n```\n\n### `reduxmap`\n\n```javascript\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n```\n\n## React Native Components\n\n### `rnc`\n\n```javascript\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport default class FileName extends Component {\n  render() {\n    return (\n      <View>\n        <Text> $2 </Text>\n      </View>\n    )\n  }\n}\n```\n\n### `rnf`\n\n```javascript\nimport React from 'react'\nimport { View, Text } from 'react-native'\n\nconst $1 = () => {\n  return (\n    <View>\n      <Text> $2 </Text>\n    </View>\n  )\n}\n\nexport default $1\n```\n\n### `rnfs`\n\n```javascript\nimport React from 'react'\nimport { StyleSheet, View, Text } from 'react-native'\n\nconst $1 = () => {\n  return (\n    <View>\n      <Text> $2 </Text>\n    </View>\n  )\n}\n\nexport default $1\n\nconst styles = StyleSheet.create({})\n```\n\n### `rncs`\n\n```javascript\nimport React, { Component } from 'react'\nimport { Text, StyleSheet, View } from 'react-native'\n\nexport default class FileName extends Component {\n  render() {\n    return (\n      <View>\n        <Text> $2 </Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({})\n```\n\n### `rnce`\n\n```javascript\nimport React, { Component } from 'react'\nimport { Text, View } from 'react-native'\n\nexport class FileName extends Component {\n  render() {\n    return (\n      <View>\n        <Text> $2 </Text>\n      </View>\n    )\n  }\n}\n\nexport default $1\n```\n\n### `rncredux`\n\n```javascript\nimport React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport class FileName extends Component {\n  static propTypes = {\n    $2: $3\n  }\n\n  render() {\n    return (\n      <View>\n        <Text> $2 </Text>\n      </View>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileName)\n```\n\n## Others\n\n### `cmmb`\n\n```JS\n/**\n|--------------------------------------------------\n| $1\n|--------------------------------------------------\n*/\n```\n\n### `desc`\n\n```javascript\ndescribe('$1', () => {\n  $2\n})\n```\n\n### `test`\n\n```javascript\ntest('should $1', () => {\n  $2\n})\n```\n\n### `tit`\n\n```javascript\nit('should $1', () => {\n  $2\n})\n```\n\n### `stest`\n\n```javascript\nimport React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport { ${1:ComponentName} } from '../${1:ComponentName}'\n\ndescribe('<${1:ComponentName} />', () => {\n  const defaultProps = {}\n  const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)\n\n  test('render', () => {\n    expect(wrapper).toMatchSnapshot()\n  })\n})\n```\n\n### `srtest`\n\n```javascript\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store'\nimport { ${1:ComponentName} } from '../${1:ComponentName}'\n\ndescribe('<${1:ComponentName} />', () => {\n  const defaultProps = {}\n  const wrapper = renderer.create(\n    <Provider store={store}>\n      <${1:${TM_FILENAME_BASE}} {...defaultProps} />)\n    </Provider>,\n  )\n\n  test('render', () => {\n    expect(wrapper).toMatchSnapshot()\n  })\n})\n```\n\n### `sntest`\n\n```javascript\nimport 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\n\nimport ${1:ComponentName} from '../${1:ComponentName}'\n\ndescribe('<${1:ComponentName} />', () => {\n  const defaultProps = {\n\n  }\n\n  const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)\n\n  test('render', () => {\n    expect(wrapper).toMatchSnapshot()\n  })\n})\n```\n\n### `snrtest`\n\n```javascript\nimport 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\n\nimport store from 'src/store/configureStore'\nimport ${1:ComponentName} from '../${1:ComponentName}'\n\ndescribe('<${1:ComponentName} />', () => {\n  const defaultProps = {}\n  const wrapper = renderer.create(\n    <Provider store={store}>\n      <${1:ComponentName} {...defaultProps} />\n    </Provider>,\n  )\n\n  test('render', () => {\n    expect(wrapper).toMatchSnapshot()\n  })\n})\n```\n\n### `hocredux`\n\n```javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n\n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n  hocComponent.propTypes = {\n  }\n\n  return hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))\n```\n\n### `hoc`\n\n```javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default WrappedComponent => {\n  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n  hocComponent.propTypes = {}\n\n  return hocComponent\n}\n```\n",
    "metadata": {
        "name": "atom-es7-react-js-snippets",
        "displayName": "ES7 React/Redux/GraphQL/React-Native snippets for Atom",
        "description": "Simple snippets for React, Redux and Graphql in JS/TS with ES7 syntax",
        "version": "0.1.1",
        "publisher": "evilPaprika",
        "icon": "images/logo.png",
        "keywords": [
            "snippets",
            "react",
            "redux",
            "react-native",
            "javascript",
            "typescript"
        ],
        "repository": "https://github.com/evilPaprika/atom-es7-javascript-react-snippets",
        "engines": {
            "atom": ">=1.0.0 <2.0.0"
        },
        "dependencies": {}
    },
    "created": 1658332311048,
    "updated": 1658332311048,
    "star_gazers": [],
    "creation_method": "Migrated from Atom.io"
}