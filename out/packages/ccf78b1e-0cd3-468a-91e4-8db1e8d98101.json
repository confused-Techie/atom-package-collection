{
    "name": "shorthand",
    "repository": {
        "type": "git",
        "url": "https://github.com/FigueroaCode/Shorthand"
    },
    "downloads": 179,
    "stargazers_count": 0,
    "releases": {
        "latest": "1.1.0"
    },
    "versions": {
        "1.1.0": {
            "name": "Shorthand",
            "main": "./lib/shorthand",
            "version": "1.1.0",
            "description": "This plugin allows users to use shorthand notation, and expand it into functional Java codes.",
            "keywords": [],
            "activationCommands": {
                "atom-workspace": "shorthand:toggle"
            },
            "repository": "https://github.com/FigueroaCode/Shorthand",
            "license": "MIT",
            "engines": {
                "atom": ">=1.0.0 <2.0.0"
            },
            "dependencies": {},
            "dist": {
                "tarball": "https://www.atom.io/api/packages/shorthand/versions/1.1.0/tarball"
            },
            "tarball_url": "https://api.github.com/repos/FigueroaCode/Shorthand/tarball/refs/tags/v1.1.0",
            "sha": "73191351add974bd17a8af252b55d62c55afa779"
        }
    },
    "readme": "This plugin allows users to use shorthand notation, and expand it into functional Java codes.\n\nTo convert a shorthand phrase into functional code, select the text and press Alt-X.\n\nImplemented Shorthand Function Formats:\n\nformat: mainClass nameOfClass\nresult: class  nameOfClass\n        {\n        \tpublic static void main(String args[])\n        \t\t{\n        //insert code here\n        \t\t}\n        }\n\nformat: publicClass nameOfClass\nresult: public class  nameOfClass\n        {\n        \tpublic  nameOfClass()\n        \t\t{\n\n        \t\t}\n         \tpublic  nameOfClass(String name)\n        \t\t{\n\n        \t\t}\n        }\n\nformat: for loopEnd\nresult: for(int i = 0; i < loopEnd; i++){}\n\nformat: for loopStart loopEnd\nresult: for(int i = loopStart; i < loopEnd; i++){}\n  or\n        for(int i = loopStart; i > loopEnd; i--){}\n\nformat: for var loopStart loopEnd\nresult: for(int var = loopStart; var < loopEnd; var++){}\n  or\n        for(int var = loopStart; var > loopEnd; var--){}\n\nformat: for var loopEnd\nresult: for(int var = 0; var < loopEnd; i++ ){}\n\nformat: switch argument numOfCases\nresult: switch(argument){\n          case 1:\n            break;\n          case 2:\n            break;\n          ...\n          ...\n          case numOfCases:\n            break;\n          default:\n            break;\n        }\n\nformat: nested for loopEnds numOfLoops\nresult: for(int a = 0; a < loopEnds; a++){\n          for(int b = 0; b < loopEnds; b++){\n            ...\n            ...\n            for(int z = 0; z < loopEnds; z++){\n              ...\n            }\n          }\n        }\n\nformat: bubbleSort\nresult: void bubbleSort(int arr[])\n        {\n        \t\tint n = arr.length;\n        \t\tfor (int i = 0; i < n-1; i++)\n        \t\t{\n        \t\t\tfor (int j = 0; j < n-i-1; j++)\n        \t\t\t{\n        \t\t\t\tif (arr[j] > arr[j+1])\n        \t\t\t\t\t{\n        \t\t\t\t\t\tint temp = arr[j];\n        \t\t\t\t\t\tarr[j] = arr[j+1];\n        \t\t\t\t\t\tarr[j+1] = temp;\n        \t\t\t\t\t}\n        \t\t\t}\n        \t\t}\n        }\n\nformat: insertionSort\nresult: void sort(int arr[])\n        {\n        \tint n = arr.length;\n        \tfor (int i=1; i<n; ++i)\n        \t{\n        \t\tint key = arr[i];\n        \t\tint j = i-1;\n        \t\twhile (j>=0 && arr[j] > key)\n        \t\t{\n        \t\t\tarr[j+1] = arr[j];\n        \t\t\tj = j-1;\n        \t\t}\n        \t\tarr[j+1] = key;\n        \t}\n        }\n",
    "metadata": {
        "name": "Shorthand",
        "main": "./lib/shorthand",
        "version": "1.1.0",
        "description": "This plugin allows users to use shorthand notation, and expand it into functional Java codes.",
        "keywords": [],
        "activationCommands": {
            "atom-workspace": "shorthand:toggle"
        },
        "repository": "https://github.com/FigueroaCode/Shorthand",
        "license": "MIT",
        "engines": {
            "atom": ">=1.0.0 <2.0.0"
        },
        "dependencies": {}
    },
    "created": 1658426921892,
    "updated": 1658426921892,
    "star_gazers": [],
    "creation_method": "Migrated from Atom.io"
}