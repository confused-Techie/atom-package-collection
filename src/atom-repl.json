{
  "name": "atom-repl",
  "repository": {
    "type": "git",
    "url": "https://github.com/jasonknight/atom-repl"
  },
  "downloads": 1164,
  "stargazers_count": 2,
  "releases": {
    "latest": "0.1.0"
  },
  "versions": {
    "0.1.0": {
      "name": "atom-repl",
      "main": "./lib/atom-repl",
      "version": "0.1.0",
      "description": "Implementation of Fake REPLs for Lisp, Lua, Python, PHP and Ruby. Code is executed in the background via temporary files.",
      "keywords": [
        "REPL",
        "Lisp",
        "Ruby",
        "Python",
        "PHP",
        "Lua"
      ],
      "repository": "https://github.com/jasonknight/atom-repl",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "tempy": ">=0.1.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-repl/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# atom-repl\n\nThis began as a project to implement REPL interaction in several languages, but this is very complicated on Windows (interacting with different types of pseudo executables) has proved difficult. So this is a collection of \"Fake\" REPLS, which means your code is written to a temporary file and executed in the background.\n\nUntil I can figure out how to interactively read REPLs for Lisp/Python and Lua on windows, this is the default functionality of Windows. When I move to developing it on Linux, which is a more sane environment, REPLs might be true in that case. Also there is\nthe possibility of interfacing with SLIME for Lisp REPLS.\n\nYou can send the entire buffer, a selection, or multiple lines to the program in question. `alt-8` sends lines, `alt-9` sends selections and `alt-0` sends the entire buffer.\n\nFor code like PHP, when sending lines or selections, `<?php` is automatically prepended for you.\n\nThis project is done in vanilla Javascript/Nodejs/JSON. No coffeescript, No cson.\n\nIf you make a pull request in Coffeescript and cson, I won't merge it, but I'll probably port it into vanilla Javascript if it's awesome.\n\n### Currently supported\n\n* PHP\n* Lua (like ULua)\n* Lisp (such as CLISP)\n* Python\n* Ruby\n\n### Soon to be supported\n\n* Honest REPLS (at least for Python, Ruby and Lisp)\n\n## Hacking\n\nHacking is welcome and encouraged. Each type of REPL is it's own class, so you can choose to hack on your own favorite language's\nfeatures without really having to worry about any of the others. Someone into Python could hack on the Python class, and actually\nget some Python specific features up and running without even having to worry about Lisp, or PHP or what not.\n\n### Generic Features\n\nPlace all generic features into atom-repl-utils.js\n\nOr if you intend to create some additional helper class, do that. I am pretty easy going. Just make sure you do it in vanilla javascript, not coffeescript.\n\n![A screenshot of your package](https://raw.githubusercontent.com/jasonknight/atom-repl/master/ScreenShot.png)\n",
  "metadata": {
    "name": "atom-repl",
    "main": "./lib/atom-repl",
    "version": "0.1.0",
    "description": "Implementation of Fake REPLs for Lisp, Lua, Python, PHP and Ruby. Code is executed in the background via temporary files.",
    "keywords": [
      "REPL",
      "Lisp",
      "Ruby",
      "Python",
      "PHP",
      "Lua"
    ],
    "repository": "https://github.com/jasonknight/atom-repl",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {
      "tempy": ">=0.1.0"
    }
  }
}