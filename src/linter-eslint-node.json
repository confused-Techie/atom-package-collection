{
  "name": "linter-eslint-node",
  "repository": {
    "type": "git",
    "url": "https://github.com/AtomLinter/linter-eslint-node"
  },
  "downloads": 5350,
  "stargazers_count": 3,
  "releases": {
    "latest": "1.0.5"
  },
  "versions": {
    "1.0.5": {
      "name": "linter-eslint-node",
      "main": "./lib/main",
      "version": "1.0.5",
      "description": "Lint JavaScript on the fly, using ESLint (v7 or greater)",
      "keywords": [
        "linter-eslint",
        "eslint"
      ],
      "repository": "https://github.com/AtomLinter/linter-eslint-node",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "devDependencies": {
        "atom-jasmine3-test-runner": "^5.2.11",
        "eslint-plugin-import": "^2.25.4",
        "rimraf": "^3.0.2"
      },
      "package-deps": [
        {
          "name": "linter",
          "minimumVersion": "3.3.0"
        }
      ],
      "providedServices": {
        "linter": {
          "versions": {
            "2.0.0": "provideLinter"
          }
        }
      },
      "activationHooks": [
        "core:loaded-shell-environment"
      ],
      "configSchema": {
        "scopes": {
          "title": "List of scopes to run ESLint on",
          "description": "Run `Editor: Log Cursor Scope` to determine the scopes for a file. To lint JavaScript inside HTML files, add `source.js.embedded.html` to this list and be sure that `eslint-plugin-html` is installed and added to your `.eslintrc`.",
          "type": "array",
          "default": [
            "source.js",
            "source.jsx",
            "source.js.jsx",
            "source.flow",
            "source.babel",
            "source.js-semantic",
            "source.ts"
          ],
          "items": {
            "type": "string"
          },
          "order": 1
        },
        "nodeBin": {
          "title": "Path to Node binary",
          "description": "The path to the version of Node that this linter should run. If you have one global installation of node, `which node` should give you the correct value. If you use NVM or another Node version manager, `which node` within this project's directory should give you the correct value. If you need this value to vary on a per-project basis, consult the README for various options.",
          "type": "string",
          "default": "node",
          "order": 2
        },
        "warnAboutOldEslint": {
          "title": "Warn about old ESLint versions",
          "description": "If your project’s ESLint is too old for this package to support, and you don’t have `linter-eslint` installed, you’ll see a single warning message after your first lint attempt, and no further messages until you reopen the project. If you’d rather not receive the warning under any circumstances, disable this option.",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "autofix": {
          "type": "object",
          "order": 4,
          "title": "Automatic Fixes",
          "properties": {
            "fixOnSave": {
              "title": "Fix errors on save",
              "description": "Have ESLint automatically apply any fixes when linting on save.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "rulesToDisableWhileFixing": {
              "title": "Disable specific rules from fixes",
              "description": "Rules in this list will never have fixes applied, whether during a save or when running the `Linter Eslint: Fix File` command.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            },
            "ignoreFixableRulesWhileTyping": {
              "title": "Ignore fixable rules while typing",
              "description": "Ignore all violations that have fixes. Applies to linting that happens due to document changes. Does not apply to lint-on-save.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "disabling": {
          "type": "object",
          "order": 5,
          "properties": {
            "disableWhenNoEslintConfig": {
              "title": "Disable when no ESLint config is found",
              "description": "Will do nothing when no ESLint config is found in either `package.json` or `.eslintrc` instead of showing an error.",
              "type": "boolean",
              "default": true,
              "order": 1
            },
            "rulesToSilenceWhileTyping": {
              "title": "Silence specific rules while typing",
              "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            }
          }
        },
        "advanced": {
          "type": "object",
          "collapsed": true,
          "title": "Uncommon",
          "order": 6,
          "properties": {
            "disableEslintIgnore": {
              "title": "Disregard .eslintignore",
              "description": "Lint all files, even files mentioned in a project's `.eslintignore` file.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "showRuleIdInMessage": {
              "title": "Show Rule ID in Messages",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "useCache": {
              "title": "Use Cache",
              "description": "When this package creates an instance of `ESLint`, it will try to re-use that instance when linting other files in your project. If you’re noticing odd behavior, disable this option and reload your window to see if it’s cache-related.",
              "type": "boolean",
              "default": true,
              "order": 3
            }
          }
        }
      },
      "scripts": {
        "lint": "eslint . --fix",
        "test.lint": "eslint .",
        "test": "atom --test spec"
      },
      "atomTestRunner": "./spec/runner",
      "dependencies": {
        "atom-linter": "^10.0.0",
        "atom-package-deps": "^8.0.0",
        "compare-versions": "^4.1.3",
        "eslint": "^8.9.0",
        "lodash.get": "^4.4.2",
        "ndjson": "^2.0.0",
        "which": "^2.0.2"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-eslint-node/versions/1.0.5/tarball"
      }
    },
    "1.0.4": {
      "name": "linter-eslint-node",
      "main": "./lib/main",
      "version": "1.0.4",
      "description": "Lint JavaScript on the fly, using ESLint (v7 or greater)",
      "keywords": [
        "linter-eslint",
        "eslint"
      ],
      "repository": "https://github.com/AtomLinter/linter-eslint-node",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "devDependencies": {
        "atom-jasmine3-test-runner": "^5.2.11",
        "eslint-plugin-import": "^2.25.4",
        "rimraf": "^3.0.2"
      },
      "package-deps": [
        {
          "name": "linter",
          "minimumVersion": "3.3.0"
        }
      ],
      "providedServices": {
        "linter": {
          "versions": {
            "2.0.0": "provideLinter"
          }
        }
      },
      "activationHooks": [
        "core:loaded-shell-environment"
      ],
      "configSchema": {
        "scopes": {
          "title": "List of scopes to run ESLint on",
          "description": "Run `Editor: Log Cursor Scope` to determine the scopes for a file. To lint JavaScript inside HTML files, add `source.js.embedded.html` to this list and be sure that `eslint-plugin-html` is installed and added to your `.eslintrc`.",
          "type": "array",
          "default": [
            "source.js",
            "source.jsx",
            "source.js.jsx",
            "source.flow",
            "source.babel",
            "source.js-semantic",
            "source.ts"
          ],
          "items": {
            "type": "string"
          },
          "order": 1
        },
        "nodeBin": {
          "title": "Path to Node binary",
          "description": "The path to the version of Node that this linter should run. If you have one global installation of node, `which node` should give you the correct value. If you use NVM or another Node version manager, `which node` within this project's directory should give you the correct value. If you need this value to vary on a per-project basis, consult the README for various options.",
          "type": "string",
          "default": "node",
          "order": 2
        },
        "warnAboutOldEslint": {
          "title": "Warn about old ESLint versions",
          "description": "If your project’s ESLint is too old for this package to support, and you don’t have `linter-eslint` installed, you’ll see a single warning message after your first lint attempt, and no further messages until you reopen the project. If you’d rather not receive the warning under any circumstances, disable this option.",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "autofix": {
          "type": "object",
          "order": 4,
          "title": "Automatic Fixes",
          "properties": {
            "fixOnSave": {
              "title": "Fix errors on save",
              "description": "Have ESLint automatically apply any fixes when linting on save.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "rulesToDisableWhileFixing": {
              "title": "Disable specific rules from fixes",
              "description": "Rules in this list will never have fixes applied, whether during a save or when running the `Linter Eslint: Fix File` command.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            },
            "ignoreFixableRulesWhileTyping": {
              "title": "Ignore fixable rules while typing",
              "description": "Ignore all violations that have fixes. Applies to linting that happens due to document changes. Does not apply to lint-on-save.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "disabling": {
          "type": "object",
          "order": 5,
          "properties": {
            "disableWhenNoEslintConfig": {
              "title": "Disable when no ESLint config is found",
              "description": "Will do nothing when no ESLint config is found in either `package.json` or `.eslintrc` instead of showing an error.",
              "type": "boolean",
              "default": true,
              "order": 1
            },
            "rulesToSilenceWhileTyping": {
              "title": "Silence specific rules while typing",
              "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            }
          }
        },
        "advanced": {
          "type": "object",
          "collapsed": true,
          "title": "Uncommon",
          "order": 6,
          "properties": {
            "disableEslintIgnore": {
              "title": "Disregard .eslintignore",
              "description": "Lint all files, even files mentioned in a project's `.eslintignore` file.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "showRuleIdInMessage": {
              "title": "Show Rule ID in Messages",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "useCache": {
              "title": "Use Cache",
              "description": "When this package creates an instance of `ESLint`, it will try to re-use that instance when linting other files in your project. If you’re noticing odd behavior, disable this option and reload your window to see if it’s cache-related.",
              "type": "boolean",
              "default": true,
              "order": 3
            }
          }
        }
      },
      "scripts": {
        "lint": "eslint . --fix",
        "test.lint": "eslint .",
        "test": "atom --test spec"
      },
      "atomTestRunner": "./spec/runner",
      "dependencies": {
        "atom-linter": "^10.0.0",
        "atom-package-deps": "^8.0.0",
        "compare-versions": "^4.1.3",
        "eslint": "^8.9.0",
        "lodash.get": "^4.4.2",
        "ndjson": "^2.0.0",
        "which": "^2.0.2"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-eslint-node/versions/1.0.4/tarball"
      }
    },
    "1.0.3": {
      "name": "linter-eslint-node",
      "main": "./lib/main",
      "version": "1.0.3",
      "description": "A short description of your package",
      "keywords": [
        "linter-eslint",
        "eslint"
      ],
      "repository": "https://github.com/AtomLinter/linter-eslint-node",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "devDependencies": {
        "atom-jasmine3-test-runner": "^5.2.11",
        "eslint-plugin-import": "^2.25.4",
        "rimraf": "^3.0.2"
      },
      "package-deps": [
        {
          "name": "linter",
          "minimumVersion": "3.3.0"
        }
      ],
      "providedServices": {
        "linter": {
          "versions": {
            "2.0.0": "provideLinter"
          }
        }
      },
      "activationHooks": [
        "core:loaded-shell-environment"
      ],
      "configSchema": {
        "scopes": {
          "title": "List of scopes to run ESLint on",
          "description": "Run `Editor: Log Cursor Scope` to determine the scopes for a file. To lint JavaScript inside HTML files, add `source.js.embedded.html` to this list and be sure that `eslint-plugin-html` is installed and added to your `.eslintrc`.",
          "type": "array",
          "default": [
            "source.js",
            "source.jsx",
            "source.js.jsx",
            "source.flow",
            "source.babel",
            "source.js-semantic",
            "source.ts"
          ],
          "items": {
            "type": "string"
          },
          "order": 1
        },
        "nodeBin": {
          "title": "Path to Node binary",
          "description": "The path to the version of Node that this linter should run. If you have one global installation of node, `which node` should give you the correct value. If you use NVM or another Node version manager, `which node` within this project's directory should give you the correct value. If you need this value to vary on a per-project basis, consult the README for various options.",
          "type": "string",
          "default": "node",
          "order": 2
        },
        "warnAboutOldEslint": {
          "title": "Warn about old ESLint versions",
          "description": "If your project’s ESLint is too old for this package to support, and you don’t have `linter-eslint` installed, you’ll see a single warning message after your first lint attempt, and no further messages until you reopen the project. If you’d rather not receive the warning under any circumstances, disable this option.",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "autofix": {
          "type": "object",
          "order": 4,
          "title": "Automatic Fixes",
          "properties": {
            "fixOnSave": {
              "title": "Fix errors on save",
              "description": "Have ESLint automatically apply any fixes when linting on save.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "rulesToDisableWhileFixing": {
              "title": "Disable specific rules from fixes",
              "description": "Rules in this list will never have fixes applied, whether during a save or when running the `Linter Eslint: Fix File` command.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            },
            "ignoreFixableRulesWhileTyping": {
              "title": "Ignore fixable rules while typing",
              "description": "Ignore all violations that have fixes. Applies to linting that happens due to document changes. Does not apply to lint-on-save.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "disabling": {
          "type": "object",
          "order": 5,
          "properties": {
            "disableWhenNoEslintConfig": {
              "title": "Disable when no ESLint config is found",
              "description": "Will do nothing when no ESLint config is found in either `package.json` or `.eslintrc` instead of showing an error.",
              "type": "boolean",
              "default": true,
              "order": 1
            },
            "rulesToSilenceWhileTyping": {
              "title": "Silence specific rules while typing",
              "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            }
          }
        },
        "advanced": {
          "type": "object",
          "collapsed": true,
          "title": "Uncommon",
          "order": 6,
          "properties": {
            "disableEslintIgnore": {
              "title": "Disregard .eslintignore",
              "description": "Lint all files, even files mentioned in a project's `.eslintignore` file.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "showRuleIdInMessage": {
              "title": "Show Rule ID in Messages",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "useCache": {
              "title": "Use Cache",
              "description": "When this package creates an instance of `ESLint`, it will try to re-use that instance when linting other files in your project. If you’re noticing odd behavior, disable this option and reload your window to see if it’s cache-related.",
              "type": "boolean",
              "default": true,
              "order": 3
            }
          }
        }
      },
      "scripts": {
        "lint": "eslint . --fix",
        "test.lint": "eslint .",
        "test": "atom --test spec"
      },
      "atomTestRunner": "./spec/runner",
      "dependencies": {
        "atom-linter": "^10.0.0",
        "atom-package-deps": "^8.0.0",
        "compare-versions": "^4.1.3",
        "eslint": "^8.9.0",
        "lodash.get": "^4.4.2",
        "ndjson": "^2.0.0",
        "which": "^2.0.2"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-eslint-node/versions/1.0.3/tarball"
      }
    },
    "1.0.2": {
      "name": "linter-eslint-node",
      "main": "./lib/main",
      "version": "1.0.2",
      "description": "A short description of your package",
      "keywords": [
        "linter-eslint",
        "eslint"
      ],
      "repository": "https://github.com/AtomLinter/linter-eslint-node",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "devDependencies": {
        "atom-jasmine3-test-runner": "^5.2.11",
        "eslint-plugin-import": "^2.25.4",
        "rimraf": "^3.0.2"
      },
      "package-deps": [
        {
          "name": "linter",
          "minimumVersion": "3.3.0"
        }
      ],
      "providedServices": {
        "linter": {
          "versions": {
            "2.0.0": "provideLinter"
          }
        }
      },
      "activationHooks": [
        "core:loaded-shell-environment"
      ],
      "configSchema": {
        "scopes": {
          "title": "List of scopes to run ESLint on",
          "description": "Run `Editor: Log Cursor Scope` to determine the scopes for a file. To lint JavaScript inside HTML files, add `source.js.embedded.html` to this list and be sure that `eslint-plugin-html` is installed and added to your `.eslintrc`.",
          "type": "array",
          "default": [
            "source.js",
            "source.jsx",
            "source.js.jsx",
            "source.flow",
            "source.babel",
            "source.js-semantic",
            "source.ts"
          ],
          "items": {
            "type": "string"
          },
          "order": 1
        },
        "nodeBin": {
          "title": "Path to Node binary",
          "description": "The path to the version of Node that this linter should run. If you have one global installation of node, `which node` should give you the correct value. If you use NVM or another Node version manager, `which node` within this project's directory should give you the correct value. If you need this value to vary on a per-project basis, consult the README for various options.",
          "type": "string",
          "default": "node",
          "order": 2
        },
        "warnAboutOldEslint": {
          "title": "Warn about old ESLint versions",
          "description": "If your project’s ESLint is too old for this package to support, and you don’t have `linter-eslint` installed, you’ll see a single warning message after your first lint attempt, and no further messages until you reopen the project. If you’d rather not receive the warning under any circumstances, disable this option.",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "autofix": {
          "type": "object",
          "order": 4,
          "title": "Automatic Fixes",
          "properties": {
            "fixOnSave": {
              "title": "Fix errors on save",
              "description": "Have ESLint automatically apply any fixes when linting on save.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "rulesToDisableWhileFixing": {
              "title": "Disable specific rules from fixes",
              "description": "Rules in this list will never have fixes applied, whether during a save or when running the `Linter Eslint: Fix File` command.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            },
            "ignoreFixableRulesWhileTyping": {
              "title": "Ignore fixable rules while typing",
              "description": "Ignore all violations that have fixes. Applies to linting that happens due to document changes. Does not apply to lint-on-save.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "disabling": {
          "type": "object",
          "order": 5,
          "properties": {
            "disableWhenNoEslintConfig": {
              "title": "Disable when no ESLint config is found",
              "description": "Will do nothing when no ESLint config is found in either `package.json` or `.eslintrc` instead of showing an error.",
              "type": "boolean",
              "default": true,
              "order": 1
            },
            "rulesToSilenceWhileTyping": {
              "title": "Silence specific rules while typing",
              "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              },
              "order": 2
            }
          }
        },
        "advanced": {
          "type": "object",
          "collapsed": true,
          "title": "Uncommon",
          "order": 6,
          "properties": {
            "disableEslintIgnore": {
              "title": "Disregard .eslintignore",
              "description": "Lint all files, even files mentioned in a project's `.eslintignore` file.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "showRuleIdInMessage": {
              "title": "Show Rule ID in Messages",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "useCache": {
              "title": "Use Cache",
              "description": "When this package creates an instance of `ESLint`, it will try to re-use that instance when linting other files in your project. If you’re noticing odd behavior, disable this option and reload your window to see if it’s cache-related.",
              "type": "boolean",
              "default": true,
              "order": 3
            }
          }
        }
      },
      "scripts": {
        "lint": "eslint . --fix",
        "test.lint": "eslint .",
        "test": "atom --test spec"
      },
      "atomTestRunner": "./spec/runner",
      "dependencies": {
        "atom-linter": "^10.0.0",
        "atom-package-deps": "^8.0.0",
        "compare-versions": "^4.1.3",
        "eslint": "^8.9.0",
        "lodash.get": "^4.4.2",
        "ndjson": "^2.0.0",
        "which": "^2.0.2"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-eslint-node/versions/1.0.2/tarball"
      }
    }
  },
  "readme": "# linter-eslint-node package\n\nA “bring-your-own-Node” linter for newer versions of ESLint: v7 and above.\n\n## Installation\n\n```ShellSession\napm install linter-eslint-node\n```\n\nThe `linter` package will be installed for you if it’s not already present in your Atom installation. If you’re using an alternative `linter-*` consumer, the `linter` package can be disabled.\n\n\n## Why does this need to exist separate from linter-eslint?\n\nTwo reasons:\n\n1. After it was deprecated in v7, the `CLIEngine` class that `linter-eslint` relied upon was removed from ESLint in v8. Its replacement removed a few methods that supported some of `linter-eslint`’s features, making it impossible to abstract away the difference between the two, or to deliver an experience that’s consistent across ESLint versions.\n\n2. As the Node world slowly migrates away from CommonJS and toward [ECMAScript modules][], certain high-profile ESLint plugins now offer native ESM versions. This is not a problem for any recent version of Node, but it is a problem for `linter-eslint`’s practice of linting within a worker script using _Atom’s_ version of Node, which is too old to support ESM and is unlikely to be updated in the near future. The solution to this problem is to switch to a “bring-your-own-Node” model that runs the worker script inside the same version of Node that your project itself uses.\n\n## Should I uninstall linter-eslint?\n\nDepends. The `linter-eslint` package supports **ESLint up through and including v7**. This new package supports **ESLint v7 and greater**. The overlap in v7 is because that’s the one major version where both interfaces, `CLIEngine` and `ESLint`, are available.\n\nIf _all_ your projects use ESLint `>=7.0.0`, you can keep this package and uninstall `linter-eslint`. If _any_ of your projects use an older ESLint, you should keep `linter-eslint` installed alongside this package. **This package can coexist with `linter-eslint`; they won’t get in each other’s way.**\n\nSince they can both lint when ESLint 7.x is present, they have to coordinate who does the linting when both packages are installed. **If `linter-eslint` is installed, this package will not perform linting in ESLint 7.x environments** — only 8.x or greater. If only this package is installed, it will lint with any version of ESLint it supports.\n\nWhen `linter-eslint` is not installed and this package detects an ESLint version too old for it to support, it will show a notification and invite you to install `linter-eslint`. This behavior can be disabled in package settings.\n\n## How do I “bring my own Node”?\n\nTo run your version of Node, `linter-eslint-node` needs to know _where_ your version of Node is, and that question sometimes has a complex answer.\n\nThe **Path to Node binary** option in this package’s settings will allow you to set the path to your node binary. It defaults to the bare value `node`, which will work if `node` is in your `PATH`.\n\nThe command **Linter Eslint Node: Debug** will show a panel with the version of Node that this package will use for a particular project.\n\n### First: just see if it works\n\nIf you use exactly one version of Node on your system, there’s a good chance this package will work out of the box without further configuration.\n\nIf you manage several versions of Node using a tool like [NVM][], you might still want to do nothing at first and rely on this package’s heuristics to figure out which version of Node to use for a given project. This is highly likely to work if\n\n* you’re on Linux or macOS;\n* you only ever open projects from a terminal in which you’ve got NVM installed (and never via your OS’s file browser or **File → Open Recent…**); and\n* you are sure to run `nvm use` before running `atom .`, or else have auto-switching set up via `.nvmrc` files.\n\nIf you do all these things, the Atom windows you spawn will inherit the environment defined by your shell, including the current value of `$PATH`.\n\n### Failing that: set it explicitly\n\nIf you use one version of Node on your system, and this package somehow hasn’t inferred it from your `$PATH` variable, then you can use the package settings page to set **Path to Node binary** manually. On macOS or Linux, `which node` will typically retrieve this path.\n\nThis should also work if you use a Node version manager like [Volta][] or [asdf][] in which there’s a single “shim” executable with a consistent location.\n\n#### Per-project settings\n\nIf you manage several versions of Node with [NVM][] or a similar tool, and sometimes don’t launch a project via the terminal, you might notice this package using your the path to your NVM-default version of Node instead of the correct version for that project — or else failing to see your Node binary altogether.\n\nYou can fix this by bypassing our heuristics and setting your Node binary path **on a per-project basis** using one of several methods.\n\nIf you’re already using a package like [project-config][] or [atomic-management][], you can specify this setting in a file that resides at `.atom/config.json` (or `config.cson` for atomic-management):\n\n```json\n{\n  \"linter-eslint-node\": {\n    \"nodeBin\": \"/Users/foo/.nvm/versions/node/v17.4.0/bin/node\"\n  }\n}\n```\n\nOtherwise, you can specify your Node binary path (or any other project-specific `linter-eslint-node` settings) with a file called `.linter-eslint` that lives in your project root and contains only configuration settings for this package:\n\n```json\n{\n  \"nodeBin\": \"/Users/foo/.nvm/versions/node/v17.4.0/bin/node\"\n}\n```\n\nTo know which path to use:\n\n* `cd` to your project root in a terminal;\n* be sure to run any version-manager-specific commands (like `nvm use`) if necessary; then\n* run `which node`.\n\nKeep in mind you’ll have to update this setting whenever you update the version of Node that a given project uses.\n\n## Which ESLint version will this package use?\n\n`linter-eslint-node` will look for a version of ESLint local to your project, as long as it’s at least v7.0.0. Ideally, this would be installed into a `node_modules` folder in the project root, but it’ll find anything in `module.paths`.\n\nIf you can run `node -e \"require('eslint')\"` from your project root and not get an error, then `linter-eslint-node` should find your copy of ESLint just fine.\n\nIf it doesn’t find an ESLint in your project, `linter-eslint-node` will fall back to the version it ships with, which is typically the most recent major release.\n\nThe command **Linter Eslint Node: Debug**, when run from a file inside your project, will report which version of ESLint this package would use to lint that file, and whether it’s yours or the package’s built-in version.\n\n## Other configuration\n\nCommon JavaScript-derivative languages (TypeScript, Flow, etc.) will also trigger this linter by default. If you’d prefer that they don’t, or if you use a more obscure JS-derivative language that should nonetheless be linted, you can change the list of language scope names in this package’s “List of scopes” setting.\n\n\n## Using ESLint\n\n### .eslintrc\n\nRecent versions of ESLint don’t use any rules by default. For all but the most basic of usages, you must create an `.eslintrc` file in your project root:\n\n```ShellSession\nnpx eslint --init # or without \"npx \" if installed globally\n```\n\nYou can also create the `.eslintrc` file manually. It’s a good idea to consult the [ESLint documentation](http://eslint.org/docs/user-guide/configuring), including the [list of rules](http://eslint.org/docs/rules/).\n\n### .eslintignore\n\nAn `.eslintignore` file can be used to tell ESLint that certain files should not be linted. The `eslint` command-line tool will only look for an `.eslintignore` in the directory you run it from, so this file should almost always be placed in your project root. But `linter-eslint-node`, when linting a single file, will respect the first `.eslintignore` it finds, starting from the file’s path and moving upward until it reaches the project root.\n\n### Plugins\n\nIt’s better practice to install ESLint plugins locally in your project, but plugins installed globally will also work just fine. Just make sure to reference those plugins in your `.eslintrc`.\n\n\n[ECMAScript modules]: https://nodejs.org/api/esm.html\n[NVM]: https://github.com/nvm-sh/nvm/blob/master/README.md\n[Volta]: https://volta.sh/\n[asdf]: https://asdf-vm.com/\n[project-config]: https://github.com/steelbrain/project-config/\n[atomic-management]: https://github.com/harmsk/atomic-management\n",
  "metadata": {
    "name": "linter-eslint-node",
    "main": "./lib/main",
    "version": "1.0.5",
    "description": "Lint JavaScript on the fly, using ESLint (v7 or greater)",
    "keywords": [
      "linter-eslint",
      "eslint"
    ],
    "repository": "https://github.com/AtomLinter/linter-eslint-node",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "devDependencies": {
      "atom-jasmine3-test-runner": "^5.2.11",
      "eslint-plugin-import": "^2.25.4",
      "rimraf": "^3.0.2"
    },
    "package-deps": [
      {
        "name": "linter",
        "minimumVersion": "3.3.0"
      }
    ],
    "providedServices": {
      "linter": {
        "versions": {
          "2.0.0": "provideLinter"
        }
      }
    },
    "activationHooks": [
      "core:loaded-shell-environment"
    ],
    "configSchema": {
      "scopes": {
        "title": "List of scopes to run ESLint on",
        "description": "Run `Editor: Log Cursor Scope` to determine the scopes for a file. To lint JavaScript inside HTML files, add `source.js.embedded.html` to this list and be sure that `eslint-plugin-html` is installed and added to your `.eslintrc`.",
        "type": "array",
        "default": [
          "source.js",
          "source.jsx",
          "source.js.jsx",
          "source.flow",
          "source.babel",
          "source.js-semantic",
          "source.ts"
        ],
        "items": {
          "type": "string"
        },
        "order": 1
      },
      "nodeBin": {
        "title": "Path to Node binary",
        "description": "The path to the version of Node that this linter should run. If you have one global installation of node, `which node` should give you the correct value. If you use NVM or another Node version manager, `which node` within this project's directory should give you the correct value. If you need this value to vary on a per-project basis, consult the README for various options.",
        "type": "string",
        "default": "node",
        "order": 2
      },
      "warnAboutOldEslint": {
        "title": "Warn about old ESLint versions",
        "description": "If your project’s ESLint is too old for this package to support, and you don’t have `linter-eslint` installed, you’ll see a single warning message after your first lint attempt, and no further messages until you reopen the project. If you’d rather not receive the warning under any circumstances, disable this option.",
        "type": "boolean",
        "default": true,
        "order": 3
      },
      "autofix": {
        "type": "object",
        "order": 4,
        "title": "Automatic Fixes",
        "properties": {
          "fixOnSave": {
            "title": "Fix errors on save",
            "description": "Have ESLint automatically apply any fixes when linting on save.",
            "type": "boolean",
            "default": false,
            "order": 1
          },
          "rulesToDisableWhileFixing": {
            "title": "Disable specific rules from fixes",
            "description": "Rules in this list will never have fixes applied, whether during a save or when running the `Linter Eslint: Fix File` command.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "order": 2
          },
          "ignoreFixableRulesWhileTyping": {
            "title": "Ignore fixable rules while typing",
            "description": "Ignore all violations that have fixes. Applies to linting that happens due to document changes. Does not apply to lint-on-save.",
            "type": "boolean",
            "default": false,
            "order": 3
          }
        }
      },
      "disabling": {
        "type": "object",
        "order": 5,
        "properties": {
          "disableWhenNoEslintConfig": {
            "title": "Disable when no ESLint config is found",
            "description": "Will do nothing when no ESLint config is found in either `package.json` or `.eslintrc` instead of showing an error.",
            "type": "boolean",
            "default": true,
            "order": 1
          },
          "rulesToSilenceWhileTyping": {
            "title": "Silence specific rules while typing",
            "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "order": 2
          }
        }
      },
      "advanced": {
        "type": "object",
        "collapsed": true,
        "title": "Uncommon",
        "order": 6,
        "properties": {
          "disableEslintIgnore": {
            "title": "Disregard .eslintignore",
            "description": "Lint all files, even files mentioned in a project's `.eslintignore` file.",
            "type": "boolean",
            "default": false,
            "order": 1
          },
          "showRuleIdInMessage": {
            "title": "Show Rule ID in Messages",
            "type": "boolean",
            "default": true,
            "order": 2
          },
          "useCache": {
            "title": "Use Cache",
            "description": "When this package creates an instance of `ESLint`, it will try to re-use that instance when linting other files in your project. If you’re noticing odd behavior, disable this option and reload your window to see if it’s cache-related.",
            "type": "boolean",
            "default": true,
            "order": 3
          }
        }
      }
    },
    "scripts": {
      "lint": "eslint . --fix",
      "test.lint": "eslint .",
      "test": "atom --test spec"
    },
    "atomTestRunner": "./spec/runner",
    "dependencies": {
      "atom-linter": "^10.0.0",
      "atom-package-deps": "^8.0.0",
      "compare-versions": "^4.1.3",
      "eslint": "^8.9.0",
      "lodash.get": "^4.4.2",
      "ndjson": "^2.0.0",
      "which": "^2.0.2"
    }
  }
}