{
  "name": "phpunit-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/jadb/atom-phpunit-snippets"
  },
  "downloads": 3068,
  "stargazers_count": 19,
  "releases": {
    "latest": "0.1.0"
  },
  "versions": {
    "0.1.0": {
      "name": "phpunit-snippets",
      "version": "0.1.0",
      "description": "Snippets to help you writing PHPUnit tests in Atom.io.",
      "repository": "https://github.com/jadb/atom-phpunit-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/phpunit-snippets/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# PHPUnit Snippets\n\nSnippets to help you writing [PHPUnit](http://phpunit.de) tests in [Atom.io](http://atom.io).\n\n```php\n// assertArrayHasKey + [TAB]\n$this->assertArrayHasKey($key, $array, \"message\");\n\n// assertArrayNotHasKey + [TAB]\n$this->assertArrayNotHasKey($key, $array, \"message\");\n\n// assertContains + [TAB]\n$this->assertContains($needle, $haystack, \"message\", $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false);\n\n// assertAttributeContains + [TAB]\n$this->assertAttributeContains($needle, $haystack, \"message\", $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false);\n\n// assertNotContains + [TAB]\n$this->assertNotContains($needle, $haystack, \"message\", $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false);\n\n// assertAttributeNotContains + [TAB]\n$this->assertAttributeNotContains($needle, $haystack, \"message\", $ignoreCase = false, $checkForObjectIdentity = true, $checkForNonObjectIdentity = false);\n\n// assertContainsOnly + [TAB]\n$this->assertContainsOnly($type, $haystack, $isNativeType = NULL, \"message\");\n\n// assertContainsOnlyInstancesOf + [TAB]\n$this->assertContainsOnlyInstancesOf($classname, $haystack, \"message\");\n\n// assertAttributeContainsOnly + [TAB]\n$this->assertAttributeContainsOnly($type, $haystackAttributeName, $haystackClassOrObject, $isNativeType = null, \"message\");\n\n// assertNotContainsOnly + [TAB]\n$this->assertNotContainsOnly($type, $haystack, $isNativeType = null, \"message\");\n\n// assertAttributeNotContainsOnly + [TAB]\n$this->assertAttributeNotContainsOnly($type, $haystackAttributeName, $haystackClassOrObject, $isNativeType = null, \"message\");\n\n// assertCount + [TAB]\n$this->assertCount($expectedCount, $haystack, \"message\");\n\n// assertAttributeCount + [TAB]\n$this->assertAttributeCount($expectedCount, $haystackAttributeName, $haystackClassOrObject, \"message\");\n\n// assertNotCount + [TAB]\n$this->assertNotCount($expectedCount, $haystack, \"message\");\n\n// assertAttributeNotCount + [TAB]\n$this->assertAttributeNotCount($expectedCount, $haystackAttributeName, $haystackClassOrObject, \"message\");\n\n// assertEquals + [TAB]\n$this->assertEquals($expected, $actual, \"message\", $delta = 0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false);\n\n// assertAttributeEquals + [TAB]\n$this->assertAttributeEquals($expected, $actualAttributeName, $actualClassOrObject, \"message\", $delta = 0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false);\n\n// assertNotEquals + [TAB]\n$this->assertNotEquals($expected, $actual, \"message\", $delta = 0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false);\n\n// assertAttributeNotEquals + [TAB]\n$this->assertAttributeNotEquals($expected, $actualAttributeName, $actualClassOrObject, \"message\", $delta = 0, $maxDepth = 10, $canonicalize = false, $ignoreCase = false);\n\n// assertEmpty + [TAB]\n$this->assertEmpty($actual, \"message\");\n\n// assertAttributeEmpty + [TAB]\n$this->assertAttributeEmpty($haystackAttributeName, $haystackClassOrObject, \"message\");\n\n// assertNotEmpty + [TAB]\n$this->assertNotEmpty($actual, \"message\");\n\n// assertAttributeNotEmpty + [TAB]\n$this->assertAttributeNotEmpty($haystackAttributeName, $haystackClassOrObject, \"message\");\n\n// assertGreaterThan + [TAB]\n$this->assertGreaterThan($expected, $actual, \"message\");\n\n// assertAttributeGreaterThan + [TAB]\n$this->assertAttributeGreaterThan($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertGreaterThanOrEqual + [TAB]\n$this->assertGreaterThanOrEqual($expected, $actual, \"message\");\n\n// assertAttributeGreaterThanOrEqual + [TAB]\n$this->assertAttributeGreaterThanOrEqual($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertLessThan + [TAB]\n$this->assertLessThan($expected, $actual, \"message\");\n\n// assertAttributeLessThan + [TAB]\n$this->assertAttributeLessThan($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertLessThanOrEqual + [TAB]\n$this->assertLessThanOrEqual($expected, $actual, \"message\");\n\n// assertAttributeLessThanOrEqual + [TAB]\n$this->assertAttributeLessThanOrEqual($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertFileEquals + [TAB]\n$this->assertFileEquals($expected, $actual, \"message\", $canonicalize = false, $ignoreCase = false);\n\n// assertFileNotEquals + [TAB]\n$this->assertFileNotEquals($expected, $actual, \"message\", $canonicalize = false, $ignoreCase = false);\n\n// assertStringEqualsFile + [TAB]\n$this->assertStringEqualsFile($expectedFile, $actualString, \"message\", $canonicalize = false, $ignoreCase = false);\n\n// assertStringNotEqualsFile + [TAB]\n$this->assertStringNotEqualsFile($expectedFile, $actualString, \"message\", $canonicalize = false, $ignoreCase = false);\n\n// assertFileExists + [TAB]\n$this->assertFileExists($filename, \"message\");\n\n// assertFileNotExists + [TAB]\n$this->assertFileNotExists($filename, \"message\");\n\n// assertTrue + [TAB]\n$this->assertTrue($condition, \"message\");\n\n// assertNotTrue + [TAB]\n$this->assertNotTrue($condition, \"message\");\n\n// assertFalse + [TAB]\n$this->assertFalse($condition, \"message\");\n\n// assertNotFalse + [TAB]\n$this->assertNotFalse($condition, \"message\");  \n\n// assertNotNull + [TAB]\n$this->assertNotNull($actual, \"message\");\n\n// assertNull + [TAB]\n$this->assertNull($actual, \"message\");\n\n// assertClassHasAttribute + [TAB]\n$this->assertClassHasAttribute($attributeName, $className, \"message\");\n\n// assertClassNotHasAttribute + [TAB]\n$this->assertClassNotHasAttribute($attributeName, $className, \"message\");\n\n// assertClassHasStaticAttribute + [TAB]\n$this->assertClassHasStaticAttribute($attributeName, $className, \"message\");\n\n// assertClassNotHasStaticAttribute + [TAB]\n$this->assertClassNotHasStaticAttribute($attributeName, $className, \"message\");\n\n// assertObjectHasAttribute + [TAB]\n$this->assertObjectHasAttribute($attributeName, $object, \"message\");\n\n// assertObjectNotHasAttribute + [TAB]\n$this->assertObjectNotHasAttribute($attributeName, $object, \"message\");\n\n// assertSame + [TAB]\n$this->assertSame($expected, $actual, \"message\");\n\n// assertAttributeSame + [TAB]\n$this->assertAttributeSame($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertNotSame + [TAB]\n$this->assertNotSame($expected, $actual, \"message\");\n\n// assertAttributeNotSame + [TAB]\n$this->assertAttributeNotSame($expected, $actualAttributeName, $actualClassOrObject, \"message\");\n\n// assertInstanceOf + [TAB]\n$this->assertInstanceOf($expected, $actual, \"message\");\n\n// assertAttributeInstanceOf + [TAB]\n$this->assertAttributeInstanceOf($expected, $attributeName, $classOrObject, \"message\");\n\n// assertNotInstanceOf + [TAB]\n$this->assertNotInstanceOf($expected, $actual, \"message\");\n\n// assertAttributeNotInstanceOf + [TAB]\n$this->assertAttributeNotInstanceOf($expected, $attributeName, $classOrObject, \"message\");\n\n// assertInternalType + [TAB]\n$this->assertInternalType($expected, $actual, \"message\");\n\n// assertAttributeInternalType + [TAB]\n$this->assertAttributeInternalType($expected, $attributeName, $classOrObject, \"message\");\n\n// assertNotInternalType + [TAB]\n$this->assertNotInternalType($expected, $actual, \"message\");\n\n// assertAttributeNotInternalType + [TAB]\n$this->assertAttributeNotInternalType($expected, $attributeName, $classOrObject, \"message\");\n\n// assertRegExp + [TAB]\n$this->assertRegExp($pattern, $string, \"message\");\n\n// assertNotRegExp + [TAB]\n$this->assertNotRegExp($pattern, $string, \"message\");  \n\n// assertSameSize + [TAB]\n$this->assertSameSize($expected, $actual, \"message\");\n\n// assertNotSameSize + [TAB]\n$this->assertNotSameSize($expected, $actual, \"message\");\n\n// assertStringMatchesFormat + [TAB]\n$this->assertStringMatchesFormat($format, $string, \"message\");\n\n// assertStringNotMatchesFormat + [TAB]\n$this->assertStringNotMatchesFormat($format, $string, \"message\");\n\n// assertStringMatchesFormatFile + [TAB]\n$this->assertStringMatchesFormatFile($formatFile, $string, \"message\");\n\n// assertStringNotMatchesFormatFile + [TAB]\n$this->assertStringNotMatchesFormatFile($formatFile, $string, \"message\");\n\n// assertStringStartsWith + [TAB]\n$this->assertStringStartsWith($prefix, $string, \"message\");\n\n// assertStringStartsNotWith + [TAB]\n$this->assertStringStartsNotWith($prefix, $string, \"message\");\n\n// assertStringEndsWith + [TAB]\n$this->assertStringEndsWith($suffix, $string, \"message\");\n\n// assertStringEndsNotWith + [TAB]\n$this->assertStringEndsNotWith($suffix, $string, \"message\");\n\n// assertXmlFileEqualsXmlFile + [TAB]\n$this->assertXmlFileEqualsXmlFile($expectedFile, $actualFile, \"message\");\n\n// assertXmlFileNotEqualsXmlFile + [TAB]\n$this->assertXmlFileNotEqualsXmlFile($expectedFile, $actualFile, \"message\");\n\n// assertXmlStringEqualsXmlFile + [TAB]\n$this->assertXmlStringEqualsXmlFile($expectedFile, $actualXml, \"message\");\n\n// assertXmlStringNotEqualsXmlFile + [TAB]\n$this->assertXmlStringNotEqualsXmlFile($expectedFile, $actualXml, \"message\");\n\n// assertXmlStringEqualsXmlString + [TAB]\n$this->assertXmlStringEqualsXmlString($expectedXml, $actualXml, \"message\");  \n\n// assertXmlStringNotEqualsXmlString + [TAB]\n$this->assertXmlStringNotEqualsXmlString($expectedXml, $actualXml, \"message\");\n\n// assertEqualXMLStructure + [TAB]\n$this->assertEqualXMLStructure($expectedElement, $actualElement, $checkAttributes = false, \"message\");\n\n// assertSelectCount + [TAB]\n$this->assertSelectCount($selector, $count, $actual, \"message\", $isHtml = true);\n\n// assertSelectRegExp + [TAB]\n$this->assertSelectRegExp($selector, $pattern, $count, $actual, \"message\", $isHtml = true);\n\n// assertSelectEquals + [TAB]\n$this->assertSelectEquals($selector, $content, $count, $actual, \"message\", $isHtml = true);\n\n// assertTag + [TAB]\n$this->assertTag($matcher, $actual, \"message\", $isHtml = true);\n\n// assertNotTag + [TAB]\n$this->assertNotTag($matcher, $actual, \"message\", $isHtml = true);\n\n// assertThat + [TAB]\n$this->assertThat($value, $constraint, \"message\");\n\n// assertJson + [TAB]\n$this->assertJson($actualJson, \"message\");\n\n// assertJsonStringEqualsJsonString + [TAB]\n$this->assertJsonStringEqualsJsonString($expectedJson, $actualJson, \"message\");\n\n// assertJsonStringNotEqualsJsonString + [TAB]\n$this->assertJsonStringNotEqualsJsonString($expectedJson, $actualJson, \"message\");\n\n// assertJsonStringEqualsJsonFile + [TAB]\n$this->assertJsonStringEqualsJsonFile($expectedFile, $actualJson, \"message\");\n\n// assertJsonStringNotEqualsJsonFile + [TAB]\n$this->assertJsonStringNotEqualsJsonFile($expectedFile, $actualJson, \"message\");\n\n// assertJsonFileNotEqualsJsonFile + [TAB]\n$this->assertJsonFileNotEqualsJsonFile($expectedFile, $actualFile, \"message\");\n\n// assertJsonFileEqualsJsonFile + [TAB]\n$this->assertJsonFileEqualsJsonFile($expectedFile, $actualFile, \"message\");\n```\n\n## Patches & Features\n\n* Fork\n* Mod, fix\n* Test - this is important, so it's not unintentionally broken\n* Commit - do not mess with license, todo, version, etc. (if you do change any, bump them into commits of their own that I can ignore when I pull)\n* Pull request - bonus point for topic branches\n\n## Bugs & Feedback\n\nhttp://github.com/gourmet/common/issues\n\n### Known bugs\n\n* Snippets with more than 10+ placeholders - tabs don't work as expected yet.\n\n## License\n\nCopyright 2014, [Jad Bitar](http://jadb.io)\n\nLicensed under [The MIT License](http://www.opensource.org/licenses/mit-license.php)\n\nRedistributions of files must retain the above copyright notice.\n",
  "metadata": {
    "name": "phpunit-snippets",
    "version": "0.1.0",
    "description": "Snippets to help you writing PHPUnit tests in Atom.io.",
    "repository": "https://github.com/jadb/atom-phpunit-snippets",
    "license": "MIT",
    "engines": {
      "atom": ">0.50.0"
    },
    "dependencies": {}
  }
}