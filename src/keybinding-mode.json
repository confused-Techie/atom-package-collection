{
  "name": "keybinding-mode",
  "repository": {
    "type": "git",
    "url": "https://github.com/deprint/keybinding-mode"
  },
  "downloads": 1080,
  "stargazers_count": 6,
  "releases": {
    "latest": "0.1.3"
  },
  "versions": {
    "0.1.3": {
      "name": "keybinding-mode",
      "main": "./lib/keybinding-mode",
      "version": "0.1.3",
      "description": "Advanced keymap management in Atom",
      "keywords": [
        "keymap"
      ],
      "repository": "https://github.com/deprint/keybinding-mode",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "season": "^5.2.0",
        "underscore-plus": "^1.0.0"
      },
      "configSchema": {
        "debugger": {
          "type": "boolean",
          "default": "false",
          "title": "Enable Debugging",
          "description": "Debug keybinding modes by dumping every step on console"
        },
        "delay": {
          "type": "integer",
          "default": "3000",
          "title": "Autostart Delay",
          "description": "Delay loading of autostart mode to give packages enough time to provide their own modes (in ms)"
        }
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "keybinding-mode.modes": {
          "versions": {
            "^1.0.0": "consumeKeybindingMode"
          }
        },
        "keybinding-mode.extensions": {
          "versions": {
            "^1.0.0": "consumeKeybindingExtension"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/keybinding-mode/versions/0.1.3/tarball"
      }
    },
    "0.1.2": {
      "name": "keybinding-mode",
      "main": "./lib/keybinding-mode",
      "version": "0.1.2",
      "description": "Advanced keymap management in Atom",
      "keywords": [
        "keymap"
      ],
      "repository": "https://github.com/deprint/keybinding-mode",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "season": "^5.2.0",
        "underscore-plus": "^1.0.0"
      },
      "configSchema": {
        "debugger": {
          "type": "boolean",
          "default": "false",
          "title": "Enable Debugging",
          "description": "Debug keybinding modes by dumping every step on console"
        },
        "delay": {
          "type": "integer",
          "default": "3000",
          "title": "Autostart Delay",
          "description": "Delay loading of autostart mode to give packages enough time to provide their own modes (in ms)"
        }
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "keybinding-mode.modes": {
          "versions": {
            "^1.0.0": "consumeKeybindingMode"
          }
        },
        "keybinding-mode.extensions": {
          "versions": {
            "^1.0.0": "consumeKeybindingExtension"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/keybinding-mode/versions/0.1.2/tarball"
      }
    },
    "0.1.1": {
      "name": "keybinding-mode",
      "main": "./lib/keybinding-mode",
      "version": "0.1.1",
      "description": "Advanced keymap management in Atom",
      "keywords": [
        "keymap"
      ],
      "repository": "https://github.com/deprint/keybinding-mode",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "season": "^5.2.0",
        "underscore-plus": "^1.0.0"
      },
      "configSchema": {
        "debugger": {
          "type": "boolean",
          "default": "false",
          "title": "Enable Debugging",
          "description": "Debug keybinding modes by dumping every step on console"
        },
        "delay": {
          "type": "integer",
          "default": "3000",
          "title": "Autostart Delay",
          "description": "Delay loading of autostart mode to give packages enough time to provide their own modes (in ms)"
        }
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "keybinding-mode.modes": {
          "versions": {
            "^1.0.0": "consumeKeybindingMode"
          }
        },
        "keybinding-mode.extensions": {
          "versions": {
            "^1.0.0": "consumeKeybindingExtension"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/keybinding-mode/versions/0.1.1/tarball"
      }
    },
    "0.1.0": {
      "name": "keybinding-mode",
      "main": "./lib/keybinding-mode",
      "version": "0.1.0",
      "description": "Advanced keymap management in Atom",
      "keywords": [
        "keymap"
      ],
      "repository": "https://github.com/deprint/keybinding-mode",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "season": "^5.2.0",
        "underscore-plus": "^1.0.0"
      },
      "configSchema": {
        "debugger": {
          "type": "boolean",
          "default": "false",
          "title": "Enable Debugging",
          "description": "Debug keybinding modes by dumping every step on console"
        },
        "delay": {
          "type": "integer",
          "default": "3000",
          "title": "Autostart Delay",
          "description": "Delay loading of autostart mode to give packages enough time to provide their own modes (in ms)"
        }
      },
      "consumedServices": {
        "status-bar": {
          "versions": {
            "^1.0.0": "consumeStatusBar"
          }
        },
        "keybinding-mode.modes": {
          "versions": {
            "^1.0.0": "consumeKeybindingMode"
          }
        },
        "keybinding-mode.extensions": {
          "versions": {
            "^1.0.0": "consumeKeybindingExtension"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/keybinding-mode/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "keybinding-mode\n===============\n[![Travis](https://img.shields.io/travis/deprint/keybinding-mode.svg?style=flat-square)](https://travis-ci.org/deprint/keybinding-mode) [![AppVeyor](https://img.shields.io/appveyor/ci/deprint/keybinding-mode.svg?style=flat-square)](https://ci.appveyor.com/project/deprint/keybinding-mode) [![Dependency Status](https://david-dm.org/deprint/keybinding-mode.svg?style=flat-square)](https://david-dm.org/deprint/keybinding-mode) [![apm](https://img.shields.io/apm/dm/keybinding-mode.svg?style=flat-square)](https://github.com/deprint/keybinding-mode) [![apm](https://img.shields.io/apm/v/keybinding-mode.svg?style=flat-square)](https://github.com/deprint/keybinding-mode)\n\n### Advanced keymap configuration in Atom\n\n## HowTo\n1. Open your keymode configuration with `keybinding-mode:open-advanced-keymap`.\n2. Configure your keymaps. Bind keymaps to hotkeys (see [Hidden Keymaps](https://github.com/deprint/keybinding-mode/blob/master/README.md#hidden-keymaps)), etc.\n3. `window:reload` or `keybinding-mode:reload`.\n\nThere can only be one keymap active at a time. To load a keymap at startup, see [Autostart](https://github.com/deprint/keybinding-mode/blob/master/README.md#autostart).\n\n## Syntax\n\n```coffee\n'Simple Keymap':\n  keymap:\n    'atom-workspace':\n      #...\n'.Hidden Keymap':\n  keymap:\n    'atom-workspace':\n      #...\n'Include other keymaps': [\n  'Simple Keymap'\n  '.Hidden Keymap'\n  keymap:\n    'atom-workspace':\n      #...\n]\n'Include all keymaps ending with -emacs': '~-emacs$'\n'Disable keymaps of other packages': '-find-and-replace'\n'Disable all keybindings that start with ctrl-k': '-k/^ctrl-k/'\n'Move all alt- keybindings to ctrl-k': '-k/^alt-/ctrl-k /'\n'!import': ['other-keymap.cson'] # Split your adv. keymap across multiple files\n'!autostart': 'Simple Keymap' # Load 'Simple Keymap' at startup\n```\n\n### Static Keymaps\n\n```coffee\n'Static Keymap':\n  keymap:\n    'atom-workspace':\n      #...\n```\n\nStatic keymaps are objects with one key `keymap` which contains a custom keymap.\n\n### Dynamic Keymaps\n\n```coffee\n'Dynamic Keymap': '-user-packages'\n```\n\nDynamic keymaps are generated on the fly. If the dynamic keymap begins with `+`,\nit adds the keymap. On `-`, it removes (`unset!`s) it. The following dynamic keymaps are\nincluded in \"vanilla keybinding-mode\":\n\n* `+/-user-packages` enables/disables the keymap of all user packages.\n* `+/-core-packages` enables/disables the keymap of all core packages.\n* `+/-all-core` enables/disables all core keybindings.\n* `+/-custom` enables/disables your custom keymap.\n* `-upper`, `-lower`, `-numbers` disables uppercase letters, lowercase letters and numbers in your text editor, but leaves mini editors untouched.\n* `+/-package-name` enables/disables the keymap of package `package-name`.\n\n`+/-user-packages`, `+/-core-packages` and `+/-package-name` load/remove package keymaps instead of `unset!`ing them.\nTo force these three modes to return a keymap, use `+!` and `-!`.\n\n### Regular Expressions\n\n```coffee\n'Matching regular expression': '-k/^ctrl-k/'\n'Replacing regular expression': '-k/^ctrl-k/ctrl-x/'\n```\n\nAll regular expressions start with `+` or `-`, similar to dynamic keymaps.\nThe next character describes the property that we want to match:\n\n* `k` for matching keybindings (like `ctrl-f`)\n* `s` for matching selectors (like `atom-text-editor`)\n* `c` for matching commands (like `core:move-right`)\n\nHere, `/` is the separator. If you want to match `/` in your regular expression, choose a different separator.\n\nThe replacement string in substituting regular expressions can contain `$1`, `$2`, ... to work with capture groups.\n\nA `+` substitution adds the replaced keybinding. A `-` substitution also `unset!`s the old one.\n\n### Combined Filters\n\n```coffee\n'Merge multiple keymaps': ['-k/^ctrl-k/', '-find-and-replace']\n'Filter keymaps': [\n  [\n    '+k/^ctrl-/'\n    '-k/shift/'\n    '-k/^ctrl-k/^ctrl-m/'\n  ]\n]\n'Combined filters': [\n  '-k/^ctrl-k/'\n  [\n    ['+k/^alt-/', '&', '+c/^editor:/']\n    '-k/^alt-/ctrl-k /'\n  ]\n]\n```\n\nCombined filters have the form `[source filters+]`:\n\n1. The parent filter's `source` is filtered through `source`.\n2. Every `filter` filters `source` separately.\n3. The keymaps from all `filters` are merged in order and returned.\n\nIn `Filter keymaps`, for example:\n\n* `+k/^ctrl-/` matches all keybindings starting with `ctrl-`.\n* `-k/shift/` `unset!`s all keybindings in `+k/^ctrl-/` that contain `shift`.\n* `-k/^ctrl-k/^ctrl-m` moves all keybindings in `+k/^ctrl-/` that start with `ctrl-k` to `ctrl-m`\n\nThe outer array of a mode has a slightly different syntax, `[filters+]`.\nIf you execute the mode directly, `source` is implied to be `!all` (\"All keybindings\").\nIf the mode is loaded from another mode, `source` depends on the position of the include in said other mode.\n\nIf you want to chain multiple filters (`AND` them), use `[filter1, '&', filter2, '&', filter3, ...]`. If you only want to combine two filters, you can omit the `&`.\n\n### Hidden Keymaps\n\n```coffee\n'.hello': #...\n'world': ['.hello']\n```\n\nVisible keymaps (those that don't start with `.`) have a command\nassociated with them (`keybinding-mode:MODE-NAME`). You can toggle these keymaps through the command palette or by binding a key to it.\nHidden keymaps can only be included by other modes.\n\n### Static Keymaps with regular expression\n\n```coffee\nemacs: ['~']\n```\n\n`~REGEX` includes all __static__ keybinding modes matching `REGEX`.\n\n`~` without a regular expression matches `\\.?NAME-`. In this example, all modes starting with `emacs-` would be matched. This also includes modes from other packages (that use the service interface) and is a simple way for other packages to provide alternate keymaps (e.g. for `emacs` users).\n\n### Invert Keymaps\n\n```coffee\n'Disable keybindings that do not start with ctrl-k': ['!not', '-k/^ctrl-k/']\n```\n\n`['!not', filter]` returns all keybindings that did not pass `filter`. `filter` cannot be a substituting regular expression.\n\n### Import other keymap files\n\n```coffee\n'!import': ['other.cson']\n```\n\n`!import` loads modes from all file paths in array (relative to the current file).\n\n### Autostart\n\n```coffee\n'!autostart': 'emacs'\n```\n\nActivate mode at startup.\n\n### Local keymaps\n\nIf your project contains a `.advanced-keybindings.cson`, it loads modes from that file at startup. `!autostart` in local keymaps override global `!autostart`.\n\n### Service Interface\n\n```json\n\"providedServices\": {\n  \"keybinding-mode.modes\": {\n    \"versions\": {\n      \"1.0.0\": \"provideModes\"\n    }\n  }\n}\n```\n\n```coffee\nprovideModes: ->\n  name: 'package-name'\n  modes:\n    'static-mode': [\n      '!all'\n      keymap:\n        'atom-text-editor':\n          #...\n    ]\n    'dynamic-mode': (op, sobj) ->\n      #...\n```\n\nPackages can provide two types of modes:\n\n* __Static__ modes can be used like your user-defined modes (with their name). Unlike user modes, you have to use the `['!all', ...]` construct.\n\n* __Dynamic__ modes are functions that return a keybinding mode:\n\n  * `op` is _true_(`+dynamic-mode`) or _false_(`-dynamic-mode`).\n\n  ```coffee\n    sobj =\n      source\n      getKeyBindings\n      filter\n      merge\n      is_static: false\n      flags:\n        no_filter: false\n        resolved: false\n        not: false\n  ```\n\n  * `source` is either `!all` or `source.keymap` contains the current source keymap.\n\n  * `getKeyBindings` returns the current source as an Array of `{keystrokes, command, selector}`.\n\n  * `filter(dest, source, invert)` removes all keybindings from `dest` that are not in `source` (different commands are allowed). `invert = true` removes all keybindings from `dest` that are in `source`.\n\n  * `merge(dest, source)` merges the keymap of `source` into `dest`\n\n  * `is_static` should stay _false_, but you can set it to _true_ to cache the returned keymap.\n\n  * `no_filter` should be set to _true_ if you use `filter` or `getKeyBindings`.\n\n  * `resolved` should be _true_ if you return an object containing a `keymap` and optionally an `execute` function (see below).\n\n  * `not` is the `invert` argument of the internal filter. Only works if `no_filter` is _false_.\n\n  * Dynamic modes return the same values as your user-defined ones, with one exception:\n  Along with `keymap`, you can also return an `execute(reset = false)` function, which is called with _true_ on deactivation.\n\nThese modes do __not__ get their own commands, it is up to the user to include them in his advanced keymap.\n",
  "metadata": {
    "name": "keybinding-mode",
    "main": "./lib/keybinding-mode",
    "version": "0.1.3",
    "description": "Advanced keymap management in Atom",
    "keywords": [
      "keymap"
    ],
    "repository": "https://github.com/deprint/keybinding-mode",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {
      "season": "^5.2.0",
      "underscore-plus": "^1.0.0"
    },
    "configSchema": {
      "debugger": {
        "type": "boolean",
        "default": "false",
        "title": "Enable Debugging",
        "description": "Debug keybinding modes by dumping every step on console"
      },
      "delay": {
        "type": "integer",
        "default": "3000",
        "title": "Autostart Delay",
        "description": "Delay loading of autostart mode to give packages enough time to provide their own modes (in ms)"
      }
    },
    "consumedServices": {
      "status-bar": {
        "versions": {
          "^1.0.0": "consumeStatusBar"
        }
      },
      "keybinding-mode.modes": {
        "versions": {
          "^1.0.0": "consumeKeybindingMode"
        }
      },
      "keybinding-mode.extensions": {
        "versions": {
          "^1.0.0": "consumeKeybindingExtension"
        }
      }
    }
  }
}