{
  "name": "js-hyperclick-project-path",
  "repository": {
    "type": "git",
    "url": "https://github.com/rohithb/js-hyperclick-project-path"
  },
  "downloads": 1073,
  "stargazers_count": 0,
  "releases": {
    "latest": "1.12.0"
  },
  "versions": {
    "1.12.0": {
      "name": "js-hyperclick-project-path",
      "main": "./lib/js-hyperclick",
      "version": "1.12.0",
      "description": "A hyperclick provider that lets you jump to where variables are defined with project path support.",
      "keywords": [],
      "repository": "https://github.com/rohithb/js-hyperclick-project-path",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "providedServices": {
        "hyperclick.provider": {
          "versions": {
            "0.0.0": "getProvider"
          }
        }
      },
      "moduleRoots": [
        "lib"
      ],
      "dependencies": {
        "acorn-to-esprima": "^1.0.4",
        "babel-core": "^6.17.0",
        "babylon": "^6.11.4",
        "escope": "^3.2.0",
        "resolve": "^1.1.6"
      },
      "devDependencies": {
        "eslint": "^3.7.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/js-hyperclick-project-path/versions/1.12.0/tarball"
      }
    }
  },
  "readme": "# js-hyperclick package\n\nA [hyperclick][hyperclick] provider that lets you jump to where variables are defined.  \n\nThis is fork of https://github.com/AsaAyers/js-hyperclick  with support for **absolute paths**.  \n\n![screenshot]( https://raw.githubusercontent.com/AsaAyers/js-hyperclick/master/screenshots/Selection_107.png)\n\nThis project was created primarily to assist navigating projects that use many\nsmall modules. This project solves some of my problems and I share it in the\nhope that it solves some of yours.\n\n# FAQ\n\n## I configured {babel,eslint,flow,webpack,etc} to avoid '../' in my imports. How can I configure `js-hyperclick`?\n\nFirst, I think it's a bad idea to do that and I never configure my projects this\nway. In a twitter conversation to see if we could standardize this across\nprojects some good points were made:\n\n> @nodkz the module loader is locked (in node anyways) so any feature additions should be rejected\n>\n> -[@evanhlucas](https://twitter.com/evanhlucas/status/771750602967703561)\n\nand\n\n> @nodkz @left_pad @izs @slicknet @zpao I think this is at odds with Node resolution mechanism so it likely wonâ€™t happen.\n>\n> -[@dan_abramov](https://twitter.com/dan_abramov/status/771741318129324032)\n\nIf you're still set on custom module directories, there is a way to configure\nit. If you keep your common modules in `src/lib` you can add this to your\n`package.json`:\n\n```json\n\"moduleRoots\": [ \"src/lib\" ],\n```\n\nWith that in place `require('foo')` or `import 'foo'` with both locate your `src/lib/foo` module.\n\n## Why doesn't `js-hyperclick` see my jsx files?\n\nThere is a setting in `js-hyperclick` to add additional extensions. My\nconfiguration is `.js, .jsx, .coffee`\n\n## Can you add support for `this.doSomething()`?\n\nNo, There is no way to know for sure what `this` is or what properties it might\nhave. Instead of trying to pick some set of patterns to support and get partly\nright, I'm just not going to support that at all.\n\nIf you want this you might look into http://ternjs.net/, or if you'll switch to\nwriting Flow instead of standard JavaScript [Nuclide has jump to definition\nsupport](http://nuclide.io/docs/languages/flow/#jump-to-definition)\n\n## Will you support AMD?\n\nI just don't see a future in AMD, so I won't invest time in supporting it. I\nused RequireJS for years\n\n[hyperclick]: https://atom.io/packages/hyperclick\n[code-links]: https://atom.io/packages/code-links\n[resolve]: https://www.npmjs.com/package/resolvehttps://www.npmjs.com/package/resolve\n[webpack-config]: http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories\n",
  "metadata": {
    "name": "js-hyperclick-project-path",
    "main": "./lib/js-hyperclick",
    "version": "1.12.0",
    "description": "A hyperclick provider that lets you jump to where variables are defined with project path support.",
    "keywords": [],
    "repository": "https://github.com/rohithb/js-hyperclick-project-path",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "providedServices": {
      "hyperclick.provider": {
        "versions": {
          "0.0.0": "getProvider"
        }
      }
    },
    "moduleRoots": [
      "lib"
    ],
    "dependencies": {
      "acorn-to-esprima": "^1.0.4",
      "babel-core": "^6.17.0",
      "babylon": "^6.11.4",
      "escope": "^3.2.0",
      "resolve": "^1.1.6"
    },
    "devDependencies": {
      "eslint": "^3.7.0"
    }
  }
}