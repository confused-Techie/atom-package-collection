{
  "name": "tryton-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/raimonesteve/atom-tryton-snippets"
  },
  "downloads": 465,
  "stargazers_count": 0,
  "releases": {
    "latest": "1.3.0"
  },
  "versions": {
    "1.3.0": {
      "name": "tryton-snippets",
      "main": "./lib/main",
      "version": "1.3.0",
      "description": "Snippets for the Tryton software development",
      "keywords": [
        "snippets",
        "tryton",
        "python",
        "xml"
      ],
      "activationCommands": {},
      "repository": "https://github.com/raimonesteve/atom-tryton-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/tryton-snippets/versions/1.3.0/tarball"
      }
    },
    "1.2.0": {
      "name": "tryton-snippets",
      "main": "./lib/main",
      "version": "1.2.0",
      "description": "Snippets for the Tryton software development",
      "keywords": [
        "snippets",
        "tryton",
        "python",
        "xml"
      ],
      "activationCommands": {},
      "repository": "https://github.com/raimonesteve/atom-tryton-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/tryton-snippets/versions/1.2.0/tarball"
      }
    },
    "1.0.0": {
      "name": "tryton-snippets",
      "main": "./lib/main",
      "version": "1.0.0",
      "description": "Snippets for the Tryton software development",
      "keywords": [
        "snippets",
        "tryton",
        "python",
        "xml"
      ],
      "activationCommands": {},
      "repository": "https://github.com/raimonesteve/atom-tryton-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/tryton-snippets/versions/1.0.0/tarball"
      }
    },
    "0.1.0": {
      "name": "tryton-snippets",
      "main": "./lib/main",
      "version": "0.1.0",
      "description": "Snippets for the Tryton software development",
      "keywords": [
        "snippets",
        "tryton",
        "python",
        "xml"
      ],
      "activationCommands": {},
      "repository": "https://github.com/raimonesteve/atom-tryton-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/tryton-snippets/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# atom-tryton-snippets\n\n###### An Atom Package - [Atom.io](https://atom.io/packages/tryton-snippets) : [Github](https://github.com/raimonesteve/atom-tryton-snippets)\n\nShorthand [snippets](https://atom.io/packages/snippets) for Tryton ERP.  \n\nAdd snippets for the Tryton software development to the Atom editor. Snippets are\nprovided for Python and XML sources. All snippets start with prefix 'tryton_'.\n\n## Install :\n\n`apm install tryton-snippets`\n\n##  Help\n\nYou could use 'tryton_help' snippet to show all options (python and xml).\n\n## Python snippets:\n\n- tryton_fields.Date: Tryton: fields.Date()\n- tryton_fields.Function: Tryton: fields.Function()\n- tryton_register: Tryton: __register__()\n- tryton_fields.Time: Tryton: fields.Time()\n- tryton_fields.Float: Tryton: fields.Float()\n- tryton_config: Tryton: Trytond Config\n- tryton_import_transaction: Tryton: Transaction classes import\n- tryton_uniq_constraint_v4: Tryton: UNIQUE SQL Constraint\n- tryton_fields.Timestamp: Tryton: fields.Timestamp()\n- tryton_getter: Tryton: function multi fields getter\n- tryton_fields.Boolean: Tryton: fields.Boolean()\n- tryton_getter_company_config: Tryton: getter for company dependant field (property) in configuration singleton\n- tryton_on_change_with: Tryton: function to compute functional field and value of field when others change value\n- tryton_getter: Tryton: functional field instance getter\n- tryton_fields.Binary: Tryton: fields.Binary()\n- tryton_search: Tryton: search() reimplementation\n- tryton_fields.Many2Many: Tryton: fields.Many2Many()\n- utf8-header: UTF8 Header\n- tryton_create: Tryton: create() reimplementation\n- tryton_depends: Trycursorton: decorator for on_change/_with functions to specify which fields supply to the function in self object\n- tryton_on_change_with: Tryton: function to compute value of field when others change value\n- tryton_default: Tryton: default_fieldname() function\n- tryton_setup: Tryton: __setup__()\n- tryton_fields.Selection: Tryton: fields.Selection(): fixed list of options\n- tryton_fields.One2One: Tryton: fields.One2One() main relation side\n- tryton_cursor: Tryton: Cursor\n- tryton_fields.Selection: Tryton: fields.Selection(): dynamic options\n- tryton_states: Tryton: states fields attribute\n- tryton_header: Tryton: modules file header\n- tryton_fields.Integer: Tryton: fields.Integer()fieldname\n- tryton_import_model: Tryton: model classes import\n- tryton_fields.Char: Tryton: fields.Char()\n- tryton_fields.Many2One: Tryton: fields.Many2One()\n- tryton_raise_warning_class: Tryton: raise user warning class\n- tryton_import_pyson: Tryton: Pyson classes import\n- tryton_fields.One2Many: Tryton: fields.One2Many()\n- tryton_class: Tryton: new model\n- tryton_validate: Tryton: validate() classmethod validation\n- tryton_import_wizard: Tryton: wizard classes import\n- tryton_error_messages: Tryton: cls._error_messages extension\n- tryton_fields.Numeric: Tryton: fields.Numeric()\n- tryton_order: Tryton: _order attribute of Model\n- tryton_inclass: Tryton: inherit model\n- tryton_delete: Tryton: delete() reimplementation\n- tryton_fields.Text: Tryton: fields.Text()\n- tryton_setter: Tryton: functional field setter\n- tryton_searcher: Tryton: functional field searcher\n- tryton_validate: Tryton: validate() instance method validation\n- tryton_getter: Tryton: functional field class getter\n- tryton_fields.DateTime: Tryton: fields.DateTime()\n- tryton_write: Tryton: write() reimplementation\n- tryton_cursor_v4: Tryton: Cursor v4\n- tryton_fields.Reference: Tryton: fields.Reference()\n- tryton_get_rec_name: Tryton: getter for rec_name\n- tryton_copy: Tryton: copy() reimplementation\n- tryton_fields.BigInteger: Tryton: fields.BigInteger()\n- tryton_context: Tryton: Context\n- tryton_on_change: Tryton: function to compute values of fields when field change value\n- tryton_setter_company_config: Tryton: setter for company dependant field (property) in configuration singleton\n- tryton_raise_error: Tryton: raise user error\n- tryton_company: Tryton: standard definition of company field\n- tryton_sql_constraints: Tryton: cls._sql_constraints\n- tryton_raise_warning_self: Tryton: raise user warning self\n- tryton_imports: Tryton: common imports\n\n## XML snippets:\n\n- tryton_view_form: Tryton: Form View\n- tryton_record_list: Tryton: Record for List View\n- tryton_record_inform: Tryton: Record for Inherited Form View\n- tryton_header: Tryton: modules file header\n- tryton_rfield: Tryton: Record Field Tag\n- tryton_rfield: Tryton: Record Field Tag eval\n- tryton_rfield: Tryton: Record Field Tag ref\n- tryton_vfield: Tryton: View Field Tag with separator\n- tryton_view_header: Tryton: views file header\n- tryton_record_form: Tryton: Record for Form View\n- tryton_record_button: Tryton: Record for button\n- tryton_act_formview: Tryton: Action Window List View record\n- tryton_view_tree: Tryton: Tree View\n- tryton_completeview: Tryton: Complete view\n- tryton_view_inform: Tryton: Inherited Form View\n- tryton_vlabel: Tryton: View Label Tag\n- tryton_help: Tryton: Help\n- tryton_vfield: Tryton: View Field Tag\n- tryton_vfield: Tryton: View Field Tag with label\n- tryton_record_inlist: Tryton: Record for Inherited List View\n- tryton_vfield: Tryton: View Field Tag for One2Many\n- tryton_record_data: Tryton: Record for data\n- tryton_record_tree: Tryton: Record for Tree View\n- tryton_vbutton: Tryton: Button\n- tryton_view_intree: Tryton: Inherited Tree View\n- tryton_act_window: Tryton: Action Window record\n\n### Notes\nIssues and Pull Requests are welcome.\n",
  "metadata": {
    "name": "tryton-snippets",
    "main": "./lib/main",
    "version": "1.3.0",
    "description": "Snippets for the Tryton software development",
    "keywords": [
      "snippets",
      "tryton",
      "python",
      "xml"
    ],
    "activationCommands": {},
    "repository": "https://github.com/raimonesteve/atom-tryton-snippets",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {}
  }
}