{
  "name": "language-grammar",
  "repository": {
    "type": "git",
    "url": "https://github.com/nagyj2/language-grammar"
  },
  "downloads": 36,
  "stargazers_count": 0,
  "releases": {
    "latest": "1.0.2"
  },
  "versions": {
    "1.0.2": {
      "name": "language-grammar",
      "version": "1.0.2",
      "description": "A simple syntax for an Flex/Bison/EBNF inspired attribute grammars.",
      "repository": "https://github.com/nagyj2/language-grammar",
      "keywords": [
        "syntax",
        "highlighting",
        "grammar"
      ],
      "license": "MIT",
      "bugs": "https://github.com/nagyj2/language-grammar/issues",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/language-grammar/versions/1.0.2/tarball"
      }
    }
  },
  "readme": "# language-grammar\n\nA syntax highlighter for a simple grammar format inspired by Flex and Bison. Format is modelled after Flex and Bison, but EBNF conveniences are also allowed.\n\nRecognition works on finding 2 types of productions, terminal and nonterminals. Terminals are recognized as an all capital string followed by `:`, `:=` or `::=`. Immediately afterwards until an empty line, an enumerated-like structure will be recognized. The line can start with an optional `|` and then any text afterwards is assumed to be a literal. These literals can be single quoted or not.\n\nNonterminals are recognized as a mix of upper and lower case characters followed by `:`, `:=` or `::=`. Immediately afterwards until an empty line, productions will be recognized. Each production can be started with a `|`. The characters `.`, `+`, `*`, `?`, `|`, `(`, `)`, `{` and `}` are recognized as grammar operators and are highlighted as such. Terminals and nonterminals will be recognized and highlighted according to their spelling. Literals are single quoted and any unquoted non-word characters are assumed to be literals.\n\nWithin terminals and nonterminals, grammar attributes can be included with `<<` and `>>` surrounding them. These rules have no syntax highlighting. Any integers are considered terminals if alone. They can be mixed with terminals and nonterminals, alongside underscores.\n\n![Sample highlighting of a grammar](./assets/example1.jpg)\n",
  "metadata": {
    "name": "language-grammar",
    "version": "1.0.2",
    "description": "A simple syntax for an Flex/Bison/EBNF inspired attribute grammars.",
    "repository": "https://github.com/nagyj2/language-grammar",
    "keywords": [
      "syntax",
      "highlighting",
      "grammar"
    ],
    "license": "MIT",
    "bugs": "https://github.com/nagyj2/language-grammar/issues",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    }
  }
}