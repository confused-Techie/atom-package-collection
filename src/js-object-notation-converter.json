{
  "name": "js-object-notation-converter",
  "repository": {
    "type": "git",
    "url": "https://github.com/RikhartBekkevold/js-object-notation-converter"
  },
  "downloads": 47,
  "stargazers_count": 0,
  "releases": {
    "latest": "0.1.1"
  },
  "versions": {
    "0.1.1": {
      "name": "js-object-notation-converter",
      "main": "./lib/main",
      "version": "0.1.1",
      "description": "Converts between object literal notation and function statement (constructor) notation.",
      "keywords": [
        "javascript",
        "conversion",
        "automation",
        "object",
        "object literal",
        "constructor",
        "syntax",
        "notation"
      ],
      "repository": "https://github.com/RikhartBekkevold/js-object-notation-converter",
      "license": "MIT",
      "activationEvents": [
        "js-object-notation-converter:convert"
      ],
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/js-object-notation-converter/versions/0.1.1/tarball"
      }
    },
    "0.1.0": {
      "name": "js-object-notation-converter",
      "main": "./lib/main",
      "version": "0.1.0",
      "description": "Converts between object literal notation and function statement (constructor) notation.",
      "keywords": [],
      "repository": "https://github.com/RikhartBekkevold/js-object-notation-converter",
      "license": "MIT",
      "activationEvents": [
        "js-object-notation-converter:convert"
      ],
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/js-object-notation-converter/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# JS object notation converter\n\nAn atom package that converts the syntax between object literal notation and function statement notation (sometimes called constructor).\n\n![Demo gif](demo.gif)\n\nNormally, when you convert a JS object you need to complete two steps:\n1. Convert the syntax (e.g. convert equals signs to colons)\n2. Convert legal code in one notation that is illegal in the other\n\nThis package helps with the tedious work of the first step by automating it. The decisions of the second step still needs to be done manually by you.\n\n## How to\n1. Select the object you want converted\n2. Press <kbd>ctrl-alt-o</kbd> (win/linux) / <kbd>cmd-alt-o</kbd> (mac)\n\nor\n\n1. Select the object you want converted\n2. Then press <kbd>shift-ctrl-p</kbd> (win) / <kbd>shift-cmd-p</kbd> (mac) / <kbd>ctrl-shift-p</kbd> (linux) to open the atom command palette\n3. Start typing <code>\"js-object-notation-converter:convert\"</code>\n4. Select the command from the list of choices\n4. Press <kbd>Enter</kbd> to execute\n\nAdditionally, you can access the convert command through the <code>Packages</code> option in the menu bar, or the text editor's contextmenu.\n\n\n\n## Install\n\n#### In Atom Editor\nInstall the package through the Atom Editor itself:\n\n1. Open Atom, or click the green <kbd style=\"border-radius: 4px; border: #68A672; color: #ffffff; background: #68A672; padding: 5px; display: inline;\">Install</kbd> button at the top of [this page](https://atom.io/packages/js-object-notation-converter)\n2. Click <code>File</code> in the menubar at the top in Atom\n3. Click <code>Settings</code> in the dropdown menu or press <kbd>ctrl-,</kbd> (win/linux) / <kbd>cmd-,</kbd> (mac)\n4. Select <code>Install</code> in the left menu\n5. Type <code>\"js-object-notation-converter\"</code> in the input field\n6. Find the package in the results and click <kbd style=\"border-radius: 4px; border: #68A672; padding: 5px;color: #ffffff; background: #007acc; display: inline;\">Install</kbd>\n\n#### Command Line\n1. Install [Atom](https://atom.io/)\n\n2. In your terminal of choice, type:\n\n    ```shell\n    apm install js-object-notation-converter\n    ```\n\n    to install the latest version.\n\n\n## NB!\nThis package will **not auto-correct** syntax for you. If the syntax is wrong, the output will (most likely), be wrong also.\n\nAs mentioned above, code that is legal in one notation, but not the other (e.g. comparison expressions in the objects root scope), will be ignored. You must manually decide what to do with this code. This package only converts syntax.\n\nThe exception to the above is **private functions** which will be made public in the \"constructor -> literal\" conversion (thats how object literals work after all).\n\n``` js\nfunction calc() {}   ->   calc: function() {}\n```\n\n(NB! running the conversion again after converting from constructor to literal will not make previous private functions private again - use <kbd>ctrl-z</kbd> (undo) instead; to achieve this.)\n",
  "metadata": {
    "name": "js-object-notation-converter",
    "main": "./lib/main",
    "version": "0.1.1",
    "description": "Converts between object literal notation and function statement (constructor) notation.",
    "keywords": [
      "javascript",
      "conversion",
      "automation",
      "object",
      "object literal",
      "constructor",
      "syntax",
      "notation"
    ],
    "repository": "https://github.com/RikhartBekkevold/js-object-notation-converter",
    "license": "MIT",
    "activationEvents": [
      "js-object-notation-converter:convert"
    ],
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {}
  }
}