{
  "name": "linter-javac",
  "repository": {
    "type": "git",
    "url": "https://github.com/AtomLinter/linter-javac"
  },
  "downloads": 124004,
  "stargazers_count": 135,
  "releases": {
    "latest": "1.10.0"
  },
  "versions": {
    "1.10.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.10.0",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^10.0.0",
        "atom-package-deps": "^5.0.0",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "2.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter:2.0.0"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default.",
          "order": 1
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work.",
          "order": 2
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work.",
          "order": 3
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users.",
          "order": 4
        },
        "sourcepathFilename": {
          "type": "string",
          "default": ".sourcepath",
          "description": "This file should point out all the locations where you have sources. That way javac can find other source files you're referring to in your code (which are likely not on the classpath).",
          "order": 5
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments.",
          "order": 6
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues.",
          "order": 7
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.10.0/tarball"
      }
    },
    "1.9.4": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.9.4",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^5.0.1",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.9.4/tarball"
      }
    },
    "1.9.3": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.9.3",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^5.0.1",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.9.3/tarball"
      }
    },
    "1.9.2": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.9.2",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^5.0.1",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.9.2/tarball"
      }
    },
    "1.9.1": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.9.1",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^4.7.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.9.1/tarball"
      }
    },
    "1.9.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.9.0",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^4.7.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.9.0/tarball"
      }
    },
    "1.8.1": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.8.1",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": ">4.6.0 <5.0.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.8.1/tarball"
      }
    },
    "1.8.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.8.0",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.4.0"
      },
      "dependencies": {
        "atom-linter": "^4.5.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "configSchema": {
        "javacExecutablePath": {
          "type": "string",
          "default": "javac",
          "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_(variable)) is set properly it should not be necessary to change the default."
        },
        "additionalClasspaths": {
          "type": "string",
          "default": "",
          "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work."
        },
        "additionalJavacOptions": {
          "type": "string",
          "default": "",
          "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work."
        },
        "classpathFilename": {
          "type": "string",
          "default": ".classpath",
          "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users."
        },
        "javacArgsFilename": {
          "type": "string",
          "default": "",
          "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments."
        },
        "verboseLogging": {
          "type": "boolean",
          "default": false,
          "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues."
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.8.0/tarball"
      }
    },
    "1.7.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.7.0",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.0.0"
      },
      "dependencies": {
        "atom-linter": "^4.5.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.7.0/tarball"
      }
    },
    "1.6.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.6.0",
      "description": "Lint Java on save, using javac.",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">1.0.0"
      },
      "dependencies": {
        "atom-linter": "^4.5.0",
        "atom-package-deps": "^4.0.1",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.6.0/tarball"
      }
    },
    "1.5.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.5.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": "^4.3.1",
        "atom-package-deps": "^3.0.7",
        "voucher": "^0.1.2"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.5.0/tarball"
      }
    },
    "1.4.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.4.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": "^4.2.0",
        "atom-package-deps": "^3.0.6"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.4.0/tarball"
      }
    },
    "1.3.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.3.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": "^3.1.1",
        "atom-package-deps": "^2.0.1"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.3.0/tarball"
      }
    },
    "1.2.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.2.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": "^3.1.1",
        "atom-package-deps": "^2.0.1"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "package-deps": [
        "linter"
      ],
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.2.0/tarball"
      }
    },
    "1.1.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.1.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": "^3.1.1"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.1.0/tarball"
      }
    },
    "1.0.1": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.0.1",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": ">=3.0.0"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.0.1/tarball"
      }
    },
    "1.0.0": {
      "name": "linter-javac",
      "main": "./lib/init",
      "version": "1.0.0",
      "description": "Lint Java using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "atom-linter": ">=3.0.0"
      },
      "providedServices": {
        "linter": {
          "versions": {
            "1.0.0": "provideLinter"
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/1.0.0/tarball"
      }
    },
    "0.1.4": {
      "name": "linter-javac",
      "linter-package": true,
      "main": "./lib/init",
      "version": "0.1.4",
      "description": "Lint Java on the fly, using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "shelljs": "^0.2.6"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/0.1.4/tarball"
      }
    },
    "0.1.3": {
      "name": "linter-javac",
      "linter-package": true,
      "activationEvents": [],
      "main": "./lib/init",
      "version": "0.1.3",
      "description": "Lint Java on the fly, using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "shelljs": "^0.2.6"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/0.1.3/tarball"
      }
    },
    "0.1.2": {
      "name": "linter-javac",
      "linter-package": true,
      "activationEvents": [],
      "main": "./lib/init",
      "version": "0.1.2",
      "description": "Lint Java on the fly, using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "shelljs": "^0.2.6"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/0.1.2/tarball"
      }
    },
    "0.1.1": {
      "name": "linter-javac",
      "linter-package": true,
      "activationEvents": [],
      "main": "./lib/init",
      "version": "0.1.1",
      "description": "Lint Java on the fly, using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "shelljs": "^0.2.6"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/0.1.1/tarball"
      }
    },
    "0.1.0": {
      "name": "linter-javac",
      "linter-package": true,
      "activationEvents": [],
      "main": "./lib/init",
      "version": "0.1.0",
      "description": "Lint Java on the fly, using javac",
      "repository": "https://github.com/AtomLinter/linter-javac",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {
        "shelljs": "^0.2.6"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/linter-javac/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# linter-javac\n\nThis package will lint your opened `.java`-files on save, using [javac][javac-docs].\n\n\n## Latest Changes\n\n- 1.9.4 - Hotfixes exception after empty stderr-output (see [issue 96][iss96]).\n- 1.9.2|3 - Fixes faulty handling of symbolic links in the files path (see [issue 94][iss94]).\n- 1.9.1 - Hotfixes a bug introduced by 1.9.0.\n- 1.9.0 - Adds generic support for localized javac output, supports chinese (see [issue 36][iss36]).\n\n### Planned Milestones\n\n- 2.0.0 - Complete rewrite of linter-javac (see [issue 76][iss76]).\n\n\n## Installation\n\nEnsure a working JDK is available in your environment (see FAQ) then enter the following on your command line:\n\n    apm install linter-javac\n\nOr Atom ➔ Preferences... ➔ Packages ➔ Search for \"linter-javac\".\n\n\n## Settings\n\nYou can configure linter-javac by using the GUI (recommended - the GUI offers a description and valid defaults) or by editing your `~/.atom/config.cson` (or Atom ➔ Open Your Config):\n\n```coffeescript\n\n\"linter-javac\":\n  javaExecutablePath: \"javac\"\n  additionalClasspaths: \"C:\\Users\\JohnDoe\"\n  additionalJavacOptions: \"-verbose -d C:\\java-class-cache\"\n  classpathFilename: \".acme-inc-classpaths\"\n  javacArgsFilename: \"acme-inc-argfile\"\n\n```\nExample-Configuration, see our [Wiki][wiki] or the config-GUI for further information.\n\n> To configure linter-javac on a per project-base, we currently encourage you using the [project-manager package][project-manager].\n\n\n## Classpath\n\n> The currently implemented `.classpath`-file format conflicts with the Eclipse-based file format. Therefore this implementation will be replaced in the far future.  \nWe are aware that configuring classpath-information is the most important (and annoying) issue in linting source-files right - we are working hard to make our planned improvement imperceptible for you. We will keep you informed.\n\n~~It is strongly recommended that you~~ You may configure your classpath via a so called classpath-file which by default is named `.classpath` (you can change the filename in the Atom-preferences).\n\nThe linter starts searching for your classpath-file in the directory where the source file resides which get's linted. If there is no matching classpath-file the search is continued wandering the file-tree up, until a classpath-file is found or the project-folder would be left.\n\nYou may place any directories classpath-file, delimited by your platform-specific path-dlimiter (`:`/`;`):\n\n```java\n.:./lib/junit.jar\n```\n\nA linter configured by the above example will execute `javac` in the directory where the classpath-file resides, so that relative paths will be resolved in dependency to the classpath-file-position.\n\n\n## Frequently Asked Questions & Troubleshooting\n\nPlease take a look into our [FAQs at our wiki][faqs].\n\n### Can I help?\n\nYes please! Give us feedback, file bugs or just help us coding - join us on https://github.com/AtomLinter/linter-javac/issues and leave a note!\n\n\n:gift_heart:\n\n\n\n[iss96]: https://github.com/AtomLinter/linter-javac/issues/96\n[iss94]: https://github.com/AtomLinter/linter-javac/issues/94\n[iss36]: https://github.com/AtomLinter/linter-javac/issues/36\n[iss76]: https://github.com/AtomLinter/linter-javac/issues/76\n[javac-docs]: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html\n[wiki]: https://github.com/AtomLinter/linter-javac/wiki\n[project-manager]: https://atom.io/packages/project-manager\n[faqs]: https://github.com/AtomLinter/linter-javac/wiki#frequently-asked-questions\n",
  "metadata": {
    "name": "linter-javac",
    "main": "./lib/init",
    "version": "1.10.0",
    "description": "Lint Java on save, using javac.",
    "repository": "https://github.com/AtomLinter/linter-javac",
    "license": "MIT",
    "engines": {
      "atom": ">1.4.0"
    },
    "dependencies": {
      "atom-linter": "^10.0.0",
      "atom-package-deps": "^5.0.0",
      "voucher": "^0.1.2"
    },
    "providedServices": {
      "linter": {
        "versions": {
          "2.0.0": "provideLinter"
        }
      }
    },
    "package-deps": [
      "linter:2.0.0"
    ],
    "configSchema": {
      "javacExecutablePath": {
        "type": "string",
        "default": "javac",
        "description": "Path to the javac executable. This setting will be used to call the java-compiler. The entered value should be immediately callable on commandline. Example: `C:\\Program Files\\Java\\jdk1.6.0_16\\bin\\javac.exe`. Keep in mind that placeholders like `~` do **not** work. If your [path-variable](https://en.wikipedia.org/wiki/PATH_%28variable%29) is set properly it should not be necessary to change the default.",
        "order": 1
      },
      "additionalClasspaths": {
        "type": "string",
        "default": "",
        "description": "Additional classpaths to be used (for the `-cp`-option) when calling javac, separate multiple paths using the right path-delimiter for your os (`:`/`;`). Be aware that existing classpath-definitions from the environment variable \"CLASSPATH\" will be merged into the argument, as well as the content of your optional [`.classpath`-files](https://atom.io/packages/linter-javac). Example: `/path1:/path2` will become `javac -cp :/path1:/path2`. Keep in mind that placeholders like `~` do **not** work.",
        "order": 2
      },
      "additionalJavacOptions": {
        "type": "string",
        "default": "",
        "description": "Your additional options will be inserted between the javac-command and the sourcefiles. Example: `-d /root/class-cache` will become `javac -Xlint:all -d /root/class-cache .../Test.java` take a look to the [javac-docs](http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javac.html) for further information on valid options. Keep in mind that placeholders like `~` do **not** work.",
        "order": 3
      },
      "classpathFilename": {
        "type": "string",
        "default": ".classpath",
        "description": "You can change the default .classpath filename. This is a useful option if You e.g. bump into conflicts with Eclipse users.",
        "order": 4
      },
      "sourcepathFilename": {
        "type": "string",
        "default": ".sourcepath",
        "description": "This file should point out all the locations where you have sources. That way javac can find other source files you're referring to in your code (which are likely not on the classpath).",
        "order": 5
      },
      "javacArgsFilename": {
        "type": "string",
        "default": "",
        "description": "Optionally you can define filename for a [javac argsfile](https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCCFGCD) that is located alongside with the .classpath file in the same directory. Contents of the argfile are passed to javac as arguments.",
        "order": 6
      },
      "verboseLogging": {
        "type": "boolean",
        "default": false,
        "description": "If enabled linter-javac will log its internal states to the console. This option is intended for debugging purposes **only** - enable this **only temporarily**, if the linter is not working as expected. You can access the output from the dev-console (alt+cmd+i), you may file the log-messages to a proper issue in order to help us improving this package. Do not forget to disable this option afterwards - since this may lead to performance issues.",
        "order": 7
      }
    }
  }
}