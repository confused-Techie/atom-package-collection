{
  "name": "git-wip",
  "repository": {
    "type": "git",
    "url": "https://github.com/coopermaruyama/atom-git-wip"
  },
  "downloads": 1387,
  "stargazers_count": 4,
  "releases": {
    "latest": "0.3.0"
  },
  "versions": {
    "0.3.0": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.3.0",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
      "dependencies": {
        "shelljs": "0.5.3",
        "path": "^0.11.14",
        "ps-tree": "1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.3.0/tarball"
      }
    },
    "0.2.2": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.2.2",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
      "dependencies": {
        "shelljs": "0.5.3",
        "path": "^0.11.14",
        "ps-tree": "1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.2.2/tarball"
      }
    },
    "0.2.1": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.2.1",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
      "dependencies": {
        "shelljs": "0.5.3",
        "path": "^0.11.14",
        "ps-tree": "1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.2.1/tarball"
      }
    },
    "0.2.0": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.2.0",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
      "dependencies": {
        "shelljs": "0.5.3",
        "path": "^0.11.14",
        "ps-tree": "1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.2.0/tarball"
      }
    },
    "0.1.3": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.1.3",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
      "dependencies": {
        "shelljs": ">=0.4.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.1.3/tarball"
      }
    },
    "0.1.2": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.1.2",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "dependencies": {
        "shelljs": ">=0.4.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.1.2/tarball"
      }
    },
    "0.1.1": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.1.1",
      "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "dependencies": {
        "shelljs": ">=0.4.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.1.1/tarball"
      }
    },
    "0.1.0": {
      "name": "git-wip",
      "main": "./lib/git-wip",
      "version": "0.1.0",
      "description": "A short description of your package",
      "repository": "https://github.com/coopermaruyama/atom-git-wip",
      "license": "MIT",
      "engines": {
        "atom": ">=0.174.0 <2.0.0"
      },
      "dependencies": {
        "shelljs": ">=0.4.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/git-wip/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\n\n# Installation\n*Install via settings > packages, or: `apm install git-wip`*\n\nGit WIP relies on a shell script which comes bundled with this package, but you should download it anyways to manage the WIP branches that get created.\n\nThe shell script can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!). You can install it with the instructions below.\n\n# Installing the `git wip` command\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n\n\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\n\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.\n\n---\n\n---\n\n**Below is the README from the original git-wip repo which contains a lot of useful info:**\n\n\n### About\n\ngit-wip is a script that will manage Work In Progress (or WIP) branches.\nWIP branches are mostly throw away but identify points of development\nbetween commits.  The intent is to tie this script into your editor so\nthat each time you save your file, the git-wip script captures that\nstate in git.  git-wip also helps you return back to a previous state of\ndevelopment.\n\nLatest git-wip can be obtained from [github.com](http://github.com/bartman/git-wip)\ngit-wip was written by [Bart Trojanowski](mailto:bart@jukie.net)\n\n### WIP branches\n\nWip branches are named after the branch that is being worked on, but are\nprefixed with 'wip/'.  For example if you are working on a branch named\n'feature' then the git-wip script will only manipulate the 'wip/feature'\nbranch.\n\nWhen you run git-wip for the first time, it will capture all changes to\ntracked files and all untracked (but not ignored) files, create a\ncommit, and make a new wip/*topic* branch point to it.\n\n    --- * --- * --- *          <-- topic\n                     \\\n                      *        <-- wip/topic\n\nThe next invocation of git-wip after a commit is made will continue to\nevolve the work from the last wip/*topic* point.\n\n    --- * --- * --- *          <-- topic\n                     \\\n                      *\n                       \\\n                        *      <-- wip/topic\n\nWhen git-wip is invoked after a commit is made, the state of the\nwip/*topic* branch will be reset back to your *topic* branch and the new\nchanges to the working tree will be caputred on a new commit.\n\n    --- * --- * --- * --- *    <-- topic\n                     \\     \\\n                      *     *  <-- wip/topic\n                       \\\n                        *\n\nWhile the old wip/*topic* work is no longer accessible directly, it can\nalways be recovered from git-reflog.  In the above example you could use\n`wip/topic@{1}` to access the dangling references.\n\n### git-wip command\n\nThe git-wip command can be invoked in several differnet ways.\n\n* `git wip`\n  \n  In this mode, git-wip will create a new commit on the wip/*topic*\n  branch (creating it if needed) as described above.\n\n* `git wip save \"description\"`\n  \n  Similar to `git wip`, but allows for a custom commit message.\n\n* `git wip log`\n  \n  Show the list of the work that leads upto the last WIP commit.  This\n  is similar to invoking:\n  \n  `git log --stat wip/$branch...$(git merge-base wip/$branch $branch)`\n\n# recovery\n\nShould you discover that you made some really bad changes in your code,\nfrom which you want to recover, here is what to do.\n\nFirst we need to find the commit we are interested in.  If it's the most recent\nthen it can be referenced with `wip/master` (assuming your branch is `master`),\notherwise you may need to find the one you want using:\n\n    git reflog show wip/master\n\nI personally prefer to inspect the reflog with `git log -g`, and sometimes\nwith `-p` also:\n\n    git log -g -p wip/master\n\nOnce you've picked a commit, you need to checkout the files, note that we are not\nswitching the commit that your branch points to (HEAD will continue to reference\nthe last real commit on the branch).  We are just checking out the files:\n\n    git checkout ref -- .\n\nHere `ref` could be a SHA1 or `wip/master`.  If you only want to recover one file,\nthen use it's path instead of the *dot*.\n\nThe changes will be staged in the index and checked out into the working tree, to\nreview what the differences are between the last commit, use:\n\n    git diff --cached\n\nIf you want, you can unstage all or some with `git reset`, optionally specifying a\nfilename to unstage.  You can then stage them again using `git add` or `git add -p`.\nFinally, when you're happy with the changes, commit them.\n\n\n<!-- vim: set ft=markdown -->\n",
  "metadata": {
    "name": "git-wip",
    "main": "./lib/git-wip",
    "version": "0.3.0",
    "description": "Automatically create Work-in-Progress git checkpoints without affecting your working tree.",
    "repository": "https://github.com/coopermaruyama/atom-git-wip",
    "license": "MIT",
    "engines": {
      "atom": ">=0.174.0 <2.0.0"
    },
    "readme": "# Git WIP: Automatic WIP checkpoints\n\nGit WIP automatically creates Work-in-Progress checkpoints upon saving, or when manually activated. WIP checkpoints are stored in separate branches, so they don't affect the state of your current working tree.\nGit WIP relies on a shell script which must be installed before you can use this package, and can be found here: https://github.com/bartman/git-wip (Big thanks to bartman for creating this very useful script!)\n# Installation\n  1. `cd ~/your-projects`\n  2. `git clone https://github.com/bartman/git-wip`\n  3. `ln -s ~/your-projects/git-wip/git-wip /usr/local/bin/git-wip` (you can copy it too but this way it's easier to update)\n  4. *Install via settings > packages, or: `apm install git-wip`\nAs of right now this package can do 3 things:\n 1. Automatically create WIPs upon saving a file for that file.\n 2. Create WIPs for the current file using the command palette.\n 3. Create WIPs for the current project using the command palette.\nEventually if more people start using this package I will add functionality for things such as reviewing WIPs, recovery, using them squashing them into actual commits, etc.",
    "dependencies": {
      "shelljs": "0.5.3",
      "path": "^0.11.14",
      "ps-tree": "1.0.0"
    }
  }
}