{
  "name": "atom-bash-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/Janfy/Atom-Bash-Snippets"
  },
  "downloads": 6900,
  "stargazers_count": 2,
  "releases": {
    "latest": "0.0.3"
  },
  "versions": {
    "0.0.3": {
      "name": "Atom-Bash-Snippets",
      "version": "0.0.3",
      "description": "Bash snippets collections",
      "keywords": [
        "bash",
        "shell",
        "script",
        "snippet"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/Janfy/Atom-Bash-Snippets.git"
      },
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "bugs": {
        "url": "https://github.com/Janfy/Atom-Bash-Snippets.git/issues"
      },
      "homepage": "https://github.com/Janfy/Atom-Bash-Snippets.git#readme",
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-bash-snippets/versions/0.0.3/tarball"
      }
    },
    "0.0.1": {
      "name": "Atom-Bash-Snippets",
      "version": "0.0.1",
      "description": "Bash snippets collections",
      "keywords": [
        "bash",
        "shell",
        "script",
        "snippet"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/Janfy/Atom-Bash-Snippets.git"
      },
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {},
      "bugs": {
        "url": "https://github.com/Janfy/Atom-Bash-Snippets.git/issues"
      },
      "homepage": "https://github.com/Janfy/Atom-Bash-Snippets.git#readme",
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-bash-snippets/versions/0.0.1/tarball"
      }
    }
  },
  "readme": "# Atom Bash Snippets\nBash snippets for Atom\n\n# List of snippets\n\n## Redirect stdout to /dev/null\n\nPrefix: **1**  \nRender: `>/dev/null`\n\n## Redirect stderr to /dev/null\n\nPrefix: **2**  \nRender: `2>/dev/null`\n\n## Redirect stdout & stderr to /dev/null\n\nPrefix: **12**\nRender:`>/dev/null 2>&1`\n\n## Redirect to stderr\n\nPrefix: **e2**\nRender: `>&2`\n\n## cat until EOF\n\nPrefix: **cat**  \nRender:\n\n    cat <<-EOF >/path/to/file\n\n    EOF\n\n### Notes\n- The `-` option to mark a here document limit string (<<-EOF) suppresses leading tabs (but not spaces) in the output. This may be useful in making a script more readable.\n\n- cat something to `stdout` by removing the redirection to file (`>/path/to/file`).\n\n### More about heredocuments\n\nSee http://tldp.org/LDP/abs/html/here-docs.html\n\n## Short 'if..then..else' (almost ternary operator)\n\nPrefix: **ite**  \nRender: `[[ condition ]] && echo \"true\" || echo \"false\" >&2`\n\n### Notes\n- Be sure the first command (`echo \"true\"`) always exits with 0 otherwise, the second command will also be executed!\n\nExample:\n\n    $ [[ 1 -eq 1 ]] && { echo \"it's true\"; false; } || echo \"but it's also false\" >&2\n    it's true\n    but it's also false\n\n## Read file line by line\n\nPrefix: **while read file**  \nRender:\n\n    while read -r line\n    do\n      ${2:echo \"\\$line\"}\n    done < ${1:/path/to/file}\n\n## Parsing short command line arguments/parameters\n\nPrefix: **getopts**  \nRender:\n\n    while getopts :?h arg\n    do\n      case $arg in\n        )\n          : #statements\n          ;;\n        :|?|h)\n          [[ $arg == \\? ]] && print_error \"L'arg -$OPTARG n'est pas prise en charge !\"\n          [[ $arg == : ]] && print_error \"L'arg -$OPTARG requiert un argument !\"\n          usage\n          exit $([[ $arg == h ]] && echo 0 || echo 2)\n          ;;\n      esac\n    done\n\n### Notes\n- After triggering this snippet, you must enter a letter (or number) for the first argument, otherwise, script doesn't works.\n- `print_error` is a custom function according to my needs to print message in red to stderr. You can replace it with `echo \"the error message\" >&2`.\n\n## Parsing short command line options/parameters\n\nSame as above but with support of long options.\n\nPrefix: **getopts long**  \nRender:\n\n    while getopts :?a-:fqvh arg\n    do\n      case $arg in\n        -)\n          if [[ ${!OPTIND} == -* ]]\n          then\n            value=\n          else\n            value=\"${!OPTIND}\"\n            ((OPTIND++))\n          fi\n          case $OPTARG in\n            host)\n              HOST=$value\n              ;;\n            port)\n              if [[ ! $value =~ ^[0-9]+$ ]]\n              then\n                print_error \"L'arg --$OPTARG a besoin d'un entier en parametre. \"$value\" n'est pas un entier.\"\n                usage\n                exit 2\n              fi\n              ;;\n            *)\n              print_error \"Le parametre '--$OPTARG' n'est pas reconnu !\"\n                    usage\n                exit 2\n                    ;;\n            esac\n          ;;\n        a)\n          [[ $OPTARG == -* ]] && print_error \"L'option -$arg requiert un argument !\" && usage && exit 2\n          ;;\n        )\n          : #statements\n          ;;\n        f)\n          FORCE=1\n          ;;\n        q)\n          QUIET=1\n          ;;\n        v)\n          VERBOSE=1\n          ;;\n        :|?|h)\n          [[ $arg == \\? ]] && print_error \"L'option -$OPTARG n'est pas prise en charge !\"\n          [[ $arg == : ]] && print_error \"L'option -$OPTARG requiert un argument !\"\n          usage\n          exit $([[ $arg == h ]] && echo 0 || echo 2)\n          ;;\n      esac\n    done\n\n### More about getopts\nSee http://tldp.org/LDP/abs/html/internal.html#EX33\n\n## function template\n\nPrefix: **function!**\nRender:\n\n    # TODO 's description\n    # @param  The first parameter\n    # @return\n    #\n    function_name() {\n      local param_name=\"$1\"; shift\n      echo \"TODO !\"\n    }\n\n## usage function template\n\nPrefix: **usage**\nRender:\n\n    usage() {\n      cat <<-EOF\n      Usage: pgihadmin tache <CIBLE> [-f] [-q] [-h]\n      Cette tache permet de bla bla\n      PARAMETRES:\n      ===========\n          CIBLE    Serveur cible : <vide> ou all, aps, ts, lb, ord, apsN, tsN, lbN, ordN (avec N un nombre)\n      OPTIONS:\n      ========\n          -f    Mode force\n          -q    Mode silencieux\n          -h    Affiche ce message\n      EOF\n    }\n",
  "metadata": {
    "name": "Atom-Bash-Snippets",
    "version": "0.0.3",
    "description": "Bash snippets collections",
    "keywords": [
      "bash",
      "shell",
      "script",
      "snippet"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/Janfy/Atom-Bash-Snippets.git"
    },
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {},
    "bugs": {
      "url": "https://github.com/Janfy/Atom-Bash-Snippets.git/issues"
    },
    "homepage": "https://github.com/Janfy/Atom-Bash-Snippets.git#readme"
  }
}