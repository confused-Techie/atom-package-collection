{
  "name": "atom-rsync",
  "repository": {
    "type": "git",
    "url": "https://github.com/esba1ley/atom-rsync"
  },
  "downloads": 960,
  "stargazers_count": 0,
  "releases": {
    "latest": "0.8.5"
  },
  "versions": {
    "0.8.5": {
      "name": "atom-rsync",
      "main": "./lib/atom-rsync",
      "version": "0.8.5",
      "description": "Sync files bidirectionally between remote host and local over ssh+rsync",
      "keywords": [
        "sync",
        "ssh",
        "sftp",
        "rsync",
        "remote"
      ],
      "repository": "https://github.com/esba1ley/atom-rsync",
      "license": "MIT",
      "engines": {
        "atom": ">=1.22.0 <2.0.0"
      },
      "dependencies": {
        "atom-space-pen-views": "^2.0.3",
        "fs-plus": "^2.8.1",
        "lodash": "^4.11.1",
        "node-sshclient": "^0.2.0",
        "property-accessors": "^1.1.3",
        "rsync": "^0.4.0",
        "season": "^5.3.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-rsync/versions/0.8.5/tarball"
      }
    },
    "0.8.3": {
      "name": "atom-rsync",
      "main": "./lib/atom-rsync",
      "version": "0.8.3",
      "description": "Sync files bidirectionally between remote host and local over ssh+rsync",
      "keywords": [
        "sync",
        "ssh",
        "sftp",
        "rsync",
        "remote"
      ],
      "repository": "https://github.com/esba1ley/atom-rsync",
      "license": "MIT",
      "engines": {
        "atom": ">=1.22.0 <2.0.0"
      },
      "dependencies": {
        "atom-space-pen-views": "^2.0.3",
        "fs-plus": "^2.8.1",
        "lodash": "^4.11.1",
        "node-sshclient": "^0.2.0",
        "property-accessors": "^1.1.3",
        "rsync": "^0.4.0",
        "season": "^5.3.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-rsync/versions/0.8.3/tarball"
      }
    },
    "0.8.2": {
      "name": "atom-rsync",
      "main": "./lib/atom-rsync",
      "version": "0.8.2",
      "description": "Sync files bidirectionally between remote host and local over ssh+rsync",
      "keywords": [
        "sync",
        "ssh",
        "sftp",
        "rsync",
        "remote"
      ],
      "repository": "https://github.com/esba1ley/atom-rsync",
      "license": "MIT",
      "engines": {
        "atom": ">=1.22.0 <2.0.0"
      },
      "dependencies": {
        "atom-space-pen-views": "^2.0.3",
        "fs-plus": "^2.8.1",
        "lodash": "^4.11.1",
        "node-sshclient": "^0.2.0",
        "property-accessors": "^1.1.3",
        "rsync": "^0.4.0",
        "season": "^5.3.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-rsync/versions/0.8.2/tarball"
      }
    },
    "0.8.1": {
      "name": "atom-rsync",
      "main": "./lib/atom-rsync",
      "version": "0.8.1",
      "description": "Sync files bidirectionally between remote host and local over ssh+rsync",
      "keywords": [
        "sync",
        "ssh",
        "sftp",
        "rsync",
        "remote"
      ],
      "repository": "https://github.com/esba1ley/atom-rsync",
      "license": "MIT",
      "engines": {
        "atom": ">=1.22.0 <2.0.0"
      },
      "dependencies": {
        "atom-space-pen-views": "^2.0.3",
        "fs-plus": "^2.8.1",
        "lodash": "^4.11.1",
        "node-sshclient": "^0.2.0",
        "property-accessors": "^1.1.3",
        "rsync": "^0.4.0",
        "season": "^5.3.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-rsync/versions/0.8.1/tarball"
      }
    }
  },
  "readme": "# atom-rsync package\n\natom-rsync is an Atom package to sync files bidirectionally between remote host and local over ssh+rsync. Inspired by [Sublime SFTP](http://wbond.net/sublime_packages/sftp).\n\nThis Atom package is a fork of the [atom-sync](https://github.com/dingjie/atom-sync) package, which was abandoned around 2017 by the original author.  This package picks up and applies the [pull request #76](https://github.com/dingjie/atom-sync/pull/76) from the original repo.\n\n[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)[![Build Status](https://travis-ci.org/dingjie/atom-rsync.svg?branch=master)](https://travis-ci.org/dingjie/atom-rsync)\n\n> This package is currently in early development and has only been tested on Mac. Please kindly [try it out](http://atom.io/packages/atom-rsync) and [provide feedback](https://github.com/dingjie/atom-rsync/issues/new).\n\n![atom-rsync](https://cloud.githubusercontent.com/assets/586262/8085519/2b63a7c4-0fc3-11e5-930a-685b09fe7af3.gif)\n\n### Feature ###\n* Sync over ssh+rsync — still [secure](http://www.sakana.fr/blog/2008/05/07/securing-automated-rsync-over-ssh/), but much [faster](http://stackoverflow.com/questions/20244585/what-is-the-difference-between-scp-and-rsync).\n* [Multi-Folder Projects](http://blog.atom.io/2015/04/15/multi-folder-projects.html) with different sync config files supported\n* Triggers conditionally run commands after successful uploading\n\n### Prerequisite ###\n* Ensure you have `ssh` and `rsync` installed.\n\n### Quick Start ###\n* Open a project folder to sync in [Atom](http://atom.io).\n* Right click on the project folder and select `Sync` -> `Edit Remote Config`.\n* Edit and save the config file.\n* Right click on the project folder and select `Sync` -> `Sync Remote -> Local`.\n* Watch water flows.\n\n### Notice ###\n* Password based login is not supported—at least yet, you have to [assign your key file](https://www.linode.com/docs/security/use-public-key-authentication-with-ssh) and better host name in .ssh/config in advanced. Try to [Simplify Your Life With an SSH Config File](http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/).\n\n### Config File (and Tutorial) ###\n> .sync-config.cson\n\n```\nremote:\n    host: \"HOSTNAME\",       # server name or ip or ssh host abbr in .ssh/config\n    user: \"USERNAME\",       # ssh username\n    path: \"REMOTE_DIR\"      # e.g. /home/someone/somewhere\n\nbehaviour:\n    uploadOnSave: true      # Upload every time you save a file\n    syncDownOnOpen: true    # Download every time you open a file\n    forgetConsole: false    # Never show console panel even while syncing\n    autoHideConsole: true   # Hide console automatically after 1.5s\n    alwaysSyncAll: false    # Sync all files and folders under the project \\\n                            # instead of syncing single file or folder\noption:\n    deleteFiles: true       # Delete files during syncing\n    autoHideDelay: 1500     # Time delay to hide console\n    exclude: [              # Excluding patterns\n        '.sync-config.cson'\n        '.git'\n        'node_modules'\n        'tmp'\n        'vendor'\n    ]\n    flags: 'avzpur'         # Advanced option: rsync flags\n    shell: 'ssh'\ntrigger:                    # Triggers fire after uploading file successfully\n                            # which STARTS with following patterns\n\n    \"*\": \"uptime\"            # Wildcard trigger for any file uploaded\n\n    \"resources/scripts/coffee\": [   # Any file under %PROJECT_ROOT%/resources/scripts/coffee \\\n                                    # being uploaded will fire this trigger\n\n        \"echo Compile coffeescript to js ...\"\n        \"coffee -b --output js/ --compile coffee/\"\n        \"ls public/js/|xargs -I@ echo \\\\t@\"       # You can also pipe commands but don't \\\n                                                  # forget to escape special characters\n    ]\n    \"resources/scripts/sass\": [\n        \"echo Compile sass to css ...\"\n        \"sass --update resources/scripts/sass:public/css\"\n    ]\n```\n\n### Introduction to Trigger ###\n#### Config ####\n```\ntrigger:\n    \"*\": [\n        \"echo \\'<span class=warning>Every time you\\\\'ll see me</span>\\'\"\n    ]\n    \"coffee\": [\n        \"echo Compile coffeescript to js ...\"\n        \"mkdir -p js\"\n        \"coffee -b --output js/ --compile coffee/\"\n        \"ls js/|xargs -I@ echo \\\\t@\"\n    ]\n    \"sass/style.sass\": [\n        \"echo Compile sass to css ...\"\n        \"mkdir -p css\"\n        \"sass --update sass:css\"\n    ]\n```\n#### Result ####\n![trigger](https://cloud.githubusercontent.com/assets/586262/14584004/a2cf2872-0466-11e6-9908-5f035a8b4e46.gif)\n\n#### Suggestion ####\nTrigger is implemented via ssh, it would be great to use triggers with SSH ControlMaster by transferring data through single ssh tunnel instead of making one ssh connection for rsync and another for ssh command, which could be very slow under unideal network speed or connection limits.\n\n###### Config sample of ~/.ssh/config ######\n\n```\nHost *\n    ControlMaster auto\n    ControlPath ~/.ssh/ssh-%r@%h:%p\n    ControlPersist 10m\n    ServerAliveInterval 30\n```\n\n\n### Keybindings ###\n* `ctrl`+`alt`+`l` (Windows/Linux) `cmd`+`alt`+`l` (Mac) Toggle log window\n\n### Known Problems ###\n* You have to `Sync Local -> Remote` manually after renaming and deleting files.\n\n### Roadmap ###\n* Listen to events\n  * Create folders\n  * Rename files/folders\n  * What about deleting?\n",
  "metadata": {
    "name": "atom-rsync",
    "main": "./lib/atom-rsync",
    "version": "0.8.5",
    "description": "Sync files bidirectionally between remote host and local over ssh+rsync",
    "keywords": [
      "sync",
      "ssh",
      "sftp",
      "rsync",
      "remote"
    ],
    "repository": "https://github.com/esba1ley/atom-rsync",
    "license": "MIT",
    "engines": {
      "atom": ">=1.22.0 <2.0.0"
    },
    "dependencies": {
      "atom-space-pen-views": "^2.0.3",
      "fs-plus": "^2.8.1",
      "lodash": "^4.11.1",
      "node-sshclient": "^0.2.0",
      "property-accessors": "^1.1.3",
      "rsync": "^0.4.0",
      "season": "^5.3.0"
    }
  }
}