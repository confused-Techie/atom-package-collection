{
  "name": "dicy",
  "repository": {
    "type": "git",
    "url": "https://github.com/yitzchak/atom-dicy"
  },
  "downloads": 741,
  "stargazers_count": 1,
  "releases": {
    "latest": "0.1.2"
  },
  "versions": {
    "0.1.2": {
      "name": "dicy",
      "main": "./lib/main",
      "version": "0.1.2",
      "description": "Compile LaTeX, knitr, literate Agda, literate Haskell and Pweave documents using DiCy.",
      "keywords": [
        "tex",
        "latex",
        "dicy"
      ],
      "repository": "https://github.com/yitzchak/atom-dicy",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "@dicy/client": "^0.15.2",
        "atom-ts-transpiler": "^1.4.0",
        "command-join": "^2.0.0",
        "dbus-native": "^0.4.0",
        "file-uri-to-path": "^1.0.0",
        "file-url": "^2.0.2",
        "fs-extra": "^7.0.0",
        "lodash": "^4.17.11",
        "readdir-enhanced": "^2.2.2",
        "typescript": "^3.1.6"
      },
      "devDependencies": {
        "@types/atom": "^1.31.0",
        "@types/fs-extra": "^5.0.4",
        "@types/lodash": "^4.14.117",
        "@types/node": "^10.12.2",
        "@types/readdir-enhanced": "^2.2.0",
        "chalk-cli": "^4.1.0",
        "remark-cli": "^6.0.0",
        "remark-preset-lint-consistent": "^2.0.2",
        "remark-preset-lint-markdown-style-guide": "^2.1.2",
        "remark-preset-lint-recommended": "^3.0.2",
        "tslint": "^5.11.0",
        "tslint-config-standard": "^8.0.1"
      },
      "scripts": {
        "fix": "npm run fix-md && npm run fix-ts",
        "fix-ts": "echo Fixing TypeScript... | chalk yellowBright bold && tslint --fix --format stylish --project tsconfig.json",
        "fix-md": "echo Fixing MarkDown... | chalk yellowBright bold && remark . -o",
        "lint": "npm run lint-md && npm run lint-ts",
        "lint-ts": "echo Linting TypeScript... | chalk yellowBright bold && tslint --format stylish --project tsconfig.json",
        "lint-md": "echo Linting MarkDown... | chalk yellowBright bold && remark ."
      },
      "activationCommands": {
        "atom-workspace": [
          "dicy:build",
          "dicy:clean",
          "dicy:initialize",
          "dicy:kill",
          "dicy:kill-all",
          "dicy:open",
          "dicy:scrub",
          "dicy:sync"
        ]
      },
      "activationHooks": [
        "language-knitr:grammar-used",
        "language-latex:grammar-used",
        "language-latexsimple:grammar-used",
        "language-pweave:grammar-used",
        "language-tex:grammar-used"
      ],
      "atomTranspilers": [
        {
          "transpiler": "atom-ts-transpiler",
          "glob": "{!(node_modules)/**/,}*.ts?(x)",
          "options": {
            "cacheKeyFiles": [],
            "verbose": false
          }
        }
      ],
      "consumedServices": {
        "atom-ide-busy-signal": {
          "versions": {
            "0.1.0": "consumeBusySignal"
          }
        },
        "linter-indie": {
          "versions": {
            "2.0.0": "consumeLinterIndie"
          }
        }
      },
      "configSchema": {
        "event": {
          "type": "object",
          "title": "Event",
          "description": "Settings that control what events trigger various commands.",
          "order": 1,
          "collapsed": false,
          "properties": {
            "buildOnSave": {
              "title": "Build after Save",
              "description": "Automatically run build after files are saved.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "openAfterBuild": {
              "title": "Open after Build",
              "description": "Automatically open targets after build is completed.",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "syncAfterChangeCursorPosition": {
              "title": "Sync after Cursor Change",
              "description": "Automatically synchronize the opener with the current cursor position. This will only work if the opener supports SyncTeX.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "open": {
          "type": "object",
          "description": "Settings that determine which opener to use.",
          "title": "Open",
          "order": 2,
          "collapsed": false,
          "properties": {
            "opener": {
              "title": "Opener",
              "type": "string",
              "enum": [
                "automatic",
                "atril",
                "evince",
                "okular",
                "pdf-view",
                "preview",
                "qpdfview",
                "shell-open",
                "skim",
                "sumatra",
                "xdg-open",
                "x-reader",
                "zathura"
              ],
              "default": "automatic",
              "order": 1
            },
            "openInBackground": {
              "title": "Open in Background",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "pdfViewSplitDirection": {
              "title": "pdf-view Split Direction",
              "description": "Pane split direction to use for pdf-view.",
              "type": "string",
              "enum": [
                "left",
                "right",
                "up",
                "down"
              ],
              "default": "right",
              "order": 3
            }
          }
        },
        "build": {
          "type": "object",
          "title": "Build",
          "description": "Settings that configure the build.",
          "order": 3,
          "collapsed": false,
          "properties": {
            "$PATH": {
              "title": "Search Path",
              "description": "Additional directories needed for finding TeX or viewers. Use `$PATH` to include system search path. Paths should be separated by `:` on Linux/MacOS and ';' on Windows.",
              "type": "string",
              "default": "$PATH"
            },
            "engine": {
              "title": "Engine",
              "description": "Select LaTeX engine",
              "type": "string",
              "enum": [
                "pdflatex",
                "lualatex",
                "platex",
                "uplatex",
                "xelatex"
              ],
              "default": "pdflatex"
            },
            "shellEscape": {
              "title": "Shell Escape",
              "type": "string",
              "enum": [
                "enabled",
                "restricted",
                "disabled"
              ],
              "default": "restricted"
            },
            "synctex": {
              "title": "SyncTeX",
              "type": "boolean",
              "default": true
            },
            "outputDirectory": {
              "title": "Output Directory",
              "description": "All files generated during a build will be redirected here. Leave blank if you want the build output to be stored in the same directory as the TeX document.",
              "type": "string",
              "default": ""
            },
            "outputFormat": {
              "title": "Output Format",
              "description": "Output file format.",
              "type": "string",
              "enum": [
                "pdf",
                "dvi",
                "ps"
              ],
              "default": "pdf"
            },
            "dviToPdfEngine": {
              "title": "DVI to PDF Engine",
              "description": "Program to use when post-processing DVI output in order to produce PDF. This is only used for LaTeX engines not capable of natively producing PDF.",
              "type": "string",
              "enum": [
                "dvipdfmx",
                "xdvipdfmx",
                "dvipdf"
              ],
              "default": "xdvipdfmx"
            },
            "intermediatePostScript": {
              "title": "Generate Intermediate PostScript",
              "description": "Enable generation of PostScript using dvips when the output format is pdf. This is only used for LaTeX engines not capable of natively producing PDF",
              "type": "boolean",
              "default": false
            },
            "copyTargetsToRoot": {
              "title": "Copy Targets to Root Directory",
              "description": "Ensures that the output files produced by a successful build is stored together with the TeX document that produced it.",
              "type": "boolean",
              "default": false
            },
            "cleanPatterns": {
              "title": "Clean Patterns",
              "description": "The files and directories to remove during a clean.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "$OUTDIR/$JOB!($OUTEXT|.synctex.gz|.tex)",
                "/$OUTDIR/_minted-$JOB/*"
              ]
            }
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/dicy/versions/0.1.2/tarball"
      }
    },
    "0.1.0": {
      "name": "dicy",
      "main": "./lib/main",
      "version": "0.1.0",
      "description": "Compile LaTeX, knitr, literate Agda, literate Haskell and Pweave documents using DiCy.",
      "keywords": [
        "tex",
        "latex",
        "dicy"
      ],
      "repository": "https://github.com/yitzchak/atom-dicy",
      "license": "MIT",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dependencies": {
        "@dicy/client": "^0.14.1",
        "atom-ts-transpiler": "^1.4.0",
        "command-join": "^2.0.0",
        "dbus-native": "^0.2.5",
        "file-uri-to-path": "^1.0.0",
        "file-url": "^2.0.2",
        "fs-extra": "^7.0.0",
        "lodash": "^4.17.11",
        "readdir-enhanced": "^2.2.2",
        "typescript": "^3.1.6"
      },
      "devDependencies": {
        "@types/atom": "^1.31.0",
        "@types/fs-extra": "^5.0.4",
        "@types/lodash": "^4.14.117",
        "@types/node": "^10.12.2",
        "@types/readdir-enhanced": "^2.2.0",
        "chalk-cli": "^4.1.0",
        "remark-cli": "^6.0.0",
        "remark-preset-lint-consistent": "^2.0.2",
        "remark-preset-lint-markdown-style-guide": "^2.1.2",
        "remark-preset-lint-recommended": "^3.0.2",
        "tslint": "^5.11.0",
        "tslint-config-standard": "^8.0.1"
      },
      "scripts": {
        "fix": "npm run fix-md && npm run fix-ts",
        "fix-ts": "echo Fixing TypeScript... | chalk yellowBright bold && tslint --fix --format stylish --project tsconfig.json",
        "fix-md": "echo Fixing MarkDown... | chalk yellowBright bold && remark . -o",
        "lint": "npm run lint-md && npm run lint-ts",
        "lint-ts": "echo Linting TypeScript... | chalk yellowBright bold && tslint --format stylish --project tsconfig.json",
        "lint-md": "echo Linting MarkDown... | chalk yellowBright bold && remark ."
      },
      "activationCommands": {
        "atom-workspace": [
          "dicy:build",
          "dicy:clean",
          "dicy:initialize",
          "dicy:kill",
          "dicy:kill-all",
          "dicy:open",
          "dicy:scrub",
          "dicy:sync"
        ]
      },
      "activationHooks": [
        "language-latex:grammar-used",
        "language-tex:grammar-used",
        "language-latexsimple:grammar-used"
      ],
      "atomTranspilers": [
        {
          "transpiler": "atom-ts-transpiler",
          "glob": "{!(node_modules)/**/,}*.ts?(x)",
          "options": {
            "cacheKeyFiles": [],
            "verbose": false
          }
        }
      ],
      "consumedServices": {
        "atom-ide-busy-signal": {
          "versions": {
            "0.1.0": "consumeBusySignal"
          }
        },
        "linter-indie": {
          "versions": {
            "2.0.0": "consumeLinterIndie"
          }
        }
      },
      "configSchema": {
        "event": {
          "type": "object",
          "title": "Event",
          "description": "Settings that control what events trigger various commands.",
          "order": 1,
          "collapsed": false,
          "properties": {
            "buildOnSave": {
              "title": "Build after Save",
              "description": "Automatically run build after files are saved.",
              "type": "boolean",
              "default": false,
              "order": 1
            },
            "openAfterBuild": {
              "title": "Open after Build",
              "description": "Automatically open targets after build is completed.",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "syncAfterChangeCursorPosition": {
              "title": "Sync after Cursor Change",
              "description": "Automatically synchronize the opener with the current cursor position. This will only work if the opener supports SyncTeX.",
              "type": "boolean",
              "default": false,
              "order": 3
            }
          }
        },
        "open": {
          "type": "object",
          "description": "Settings that determine which opener to use.",
          "title": "Open",
          "order": 2,
          "collapsed": false,
          "properties": {
            "opener": {
              "title": "Opener",
              "type": "string",
              "enum": [
                "automatic",
                "atril",
                "evince",
                "okular",
                "pdf-view",
                "preview",
                "qpdfview",
                "shell-open",
                "skim",
                "sumatra",
                "xdg-open",
                "x-reader",
                "zathura"
              ],
              "default": "automatic",
              "order": 1
            },
            "openInBackground": {
              "title": "Open in Background",
              "type": "boolean",
              "default": true,
              "order": 2
            },
            "pdfViewSplitDirection": {
              "title": "pdf-view Split Direction",
              "description": "Pane split direction to use for pdf-view.",
              "type": "string",
              "enum": [
                "left",
                "right",
                "up",
                "down"
              ],
              "default": "right",
              "order": 3
            }
          }
        },
        "build": {
          "type": "object",
          "title": "Build",
          "description": "Settings that configure the build.",
          "order": 3,
          "collapsed": false,
          "properties": {
            "$PATH": {
              "title": "Search Path",
              "description": "Additional directories needed for finding TeX or viewers. Use `$PATH` to include system search path. Paths should be separated by `:` on Linux/MacOS and ';' on Windows.",
              "type": "string",
              "default": "$PATH"
            },
            "engine": {
              "title": "Engine",
              "description": "Select LaTeX engine",
              "type": "string",
              "enum": [
                "pdflatex",
                "lualatex",
                "platex",
                "uplatex",
                "xelatex"
              ],
              "default": "pdflatex"
            },
            "shellEscape": {
              "title": "Shell Escape",
              "type": "string",
              "enum": [
                "enabled",
                "restricted",
                "disabled"
              ],
              "default": "restricted"
            },
            "synctex": {
              "title": "SyncTeX",
              "type": "boolean",
              "default": true
            },
            "outputDirectory": {
              "title": "Output Directory",
              "description": "All files generated during a build will be redirected here. Leave blank if you want the build output to be stored in the same directory as the TeX document.",
              "type": "string",
              "default": ""
            },
            "outputFormat": {
              "title": "Output Format",
              "description": "Output file format.",
              "type": "string",
              "enum": [
                "pdf",
                "dvi",
                "ps"
              ],
              "default": "pdf"
            },
            "dviToPdfEngine": {
              "title": "DVI to PDF Engine",
              "description": "Program to use when post-processing DVI output in order to produce PDF. This is only used for LaTeX engines not capable of natively producing PDF.",
              "type": "string",
              "enum": [
                "dvipdfmx",
                "xdvipdfmx",
                "dvipdf"
              ],
              "default": "xdvipdfmx"
            },
            "intermediatePostScript": {
              "title": "Generate Intermediate PostScript",
              "description": "Enable generation of PostScript using dvips when the output format is pdf. This is only used for LaTeX engines not capable of natively producing PDF",
              "type": "boolean",
              "default": false
            },
            "copyTargetsToRoot": {
              "title": "Copy Targets to Root Directory",
              "description": "Ensures that the output files produced by a successful build is stored together with the TeX document that produced it.",
              "type": "boolean",
              "default": false
            },
            "cleanPatterns": {
              "title": "Clean Patterns",
              "description": "The files and directories to remove during a clean.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "$OUTDIR/$JOB!($OUTEXT|.synctex.gz|.tex)",
                "/$OUTDIR/_minted-$JOB/*"
              ]
            }
          }
        }
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/dicy/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "# Atom-DiCy\n\nCompile LaTeX, knitr, literate Agda, literate Haskell and Pweave documents using\n[DiCy][].\n\n## Installation\n\nUse the Atom package manager and search for \"dicy\" or run `apm install dicy`\nfrom the command line.\n\n### TeX Distribution\n\nIn order to use this package you must have an up-to-date TeX distribution such\nas [TeX Live][] or [MiKTeX][] installed. The binaries of your TeX distribution\nmust be available in the executable search path. This search path can be\ncustomized via the `$PATH` setting or via [DiCy environment variables][].\n\n### Language Syntax Packages\n\nThe various commands provided by this package depend upon the document grammar\ntype being detected by Atom. In order for the correct grammar to be detected you\nwill need to have the appropriate language syntax package installed. The table\nbelow lists the required language package for each document type.\n\n| Document Type    | Required Language Packages            |\n| ---------------- | ------------------------------------- |\n| LaTeX            | [language-latex][]                    |\n| knitr            | [language-r][] and [language-knitr][] |\n| literate Agda    | [language-agda][]                     |\n| literate Haskell | [language-haskell][]                  |\n| Pweave           | [language-weave][]                    |\n\n### Atom IDE Packages\n\nBusy status during document compilation and log messages reported by DiCy are\ndisplayed in Atom using the [Atom IDE][] package. Therefore the Atom IDE package\nmust also be installed in order to for this information to be displayed.\n\n## Usage\n\nWhile editing a document various DiCy commands can issued via the commands\nlisted in the table below. Only one command is allowed to be active at a time,\nbut commands such as `dicy:build` can run concurrently on different files. All\ncommands can be run from the main root document or from sub-document provided\nthat the sub-document has a TeX magic root statement such as\n`%!TeX root=foo.tex` at the beginning of the file.\n\n| Command           |                  Keybinding                 | Use                                                               |\n| :---------------- | :-----------------------------------------: | :---------------------------------------------------------------- |\n| `dicy:build`      | <kbd>ctrl</kbd>-<kbd>alt</kbd>-<kbd>b</kbd> | Build DiCy document and open results.                             |\n| `dicy:clean`      | <kbd>ctrl</kbd>-<kbd>alt</kbd>-<kbd>c</kbd> | Cleanup intermediate files after a build.                         |\n| `dicy:scrub`      |                     None                    | Cleanup all files after a build.                                  |\n| `dicy:kill`       |                     None                    | Terminate build associated with current file.                     |\n| `dicy:kill-all`   |                     None                    | Terminate all builds in progress.                                 |\n| `dicy:open`       | <kbd>ctrl</kbd>-<kbd>alt</kbd>-<kbd>o</kbd> | Open build results and sync.                                      |\n| `dicy:sync`       |                     None                    | Open build results and sync without loading from DiCy file cache. |\n| `dicy:initialize` |                     None                    | Initialize file openers, etc.                                     |\n\n## Configuration\n\nThere are three types of configuration settings available on the settings page\nof Atom-DiCy. These settings are described in the following sections.\n\n### Event Configuration\n\nVarious events can be configured to automatically trigger a building or opening\nresults via the `Event` settings section. Enabling `Build after Save` will cause\n`dicy:build` to automatically be run when a compatible document is saved. To\nautomatically open any resulting output targets via the configured opener\n`Open after Build` should be enabled. Lastly, automatic cursor position\nsynchronization via the `dicy:sync` command can be enabled with\n`Sync after Cursor Change`.\n\n### Open Configuration\n\nIn the `Open` settings section `Opener` controls which opener is used to open\nbuild results such as PDF, PS or DVI files. The default setting of `automatic`\nwill attempt to select whichever opener available on the user's platform that\nsupports features requested by the user. For instance, if `SyncTeX` is enabled\nin the `Build` settings section then openers that support SyncTex will have a\nhigher priority. Selecting a specific opener will override this automatic\nselection. The table below lists the currently supported openers and the\nfeatures of each opener.\n\n| Viewer        | Platforms | PDF |  PS | DVI | Background | SyncTeX |\n| :------------ | :-------: | :-: | :-: | :-: | :--------: | :-----: |\n| [Atril]       |   Linux   |  ✓  |  ✓  |  ✓  |      ✓     |    ✓    |\n| [Evince]      |   Linux   |  ✓  |  ✓  |  ✓  |      ✓     |    ✓    |\n| [Okular]      |   Linux   |  ✓  |  ✓  |  ✓  |      ✓     |    ✓    |\n| [pdf-view]    |    Any    |  ✓  |     |     |      ✓     |    ✓    |\n| [Preview]     |   MacOS   |  ✓  |  ✓  |     |      ✓     |         |\n| [Skim]        |   MacOS   |  ✓  |  ✓  |  ✓  |      ✓     |    ✓    |\n| [Sumatra PDF] |  Windows  |  ✓  |     |     |            |    ✓    |\n| Shell Open    |  Windows  |  ✓  |  ✓  |  ✓  |            |         |\n| [xdg-open]    |   Linux   |  ✓  |  ✓  |  ✓  |            |         |\n| [Xreader]     |   Linux   |  ✓  |  ✓  |  ✓  |      ✓     |    ✓    |\n| [Zathura]     |   Linux   |  ✓  |  ✓  |     |            |    ✓    |\n\nThe remaining settings in the `Open` section are `Open In Background` and\n`pdf-view Split Direction`. `Open In Background` will attempt to keep the\ncursor focus in Atom when using an opener. `pdf-view Split Direction` specifies\nwhere to add an extra pane when using the `pdf-view` opener.\n\n### Build Configuration\n\nA limited selection of the build settings that DiCy uses can be configured via\nthe `Build` setting section. These settings will be written to the user's\nconfiguration file. The location of this file is described at\n[DiCy configuration][]. The build settings of DiCy, including the ones available\nfrom the settings page are described at [DiCy options][].\n\n[Atom IDE]: https://ide.atom.io/\n\n[Atril]: http://mate-desktop.com/#atril\n\n[DiCy configuration]: https://yitzchak.github.io/dicy/configuration\n\n[DiCy environment variables]: https://yitzchak.github.io/dicy/options#environment-variables\n\n[DiCy options]: https://yitzchak.github.io/dicy/options\n\n[DiCy]: https://yitzchak.github.io/dicy/\n\n[Evince]: https://wiki.gnome.org/Apps/Evince\n\n[language-agda]: https://atom.io/packages/language-agda\n\n[language-haskell]: https://atom.io/packages/language-haskell\n\n[language-knitr]: https://atom.io/packages/language-knitr\n\n[language-latex]: https://atom.io/packages/language-latex\n\n[language-r]: https://atom.io/packages/language-r\n\n[language-weave]: https://atom.io/packages/language-weave\n\n[MiKTeX]: http://miktex.org/\n\n[Okular]: https://okular.kde.org/\n\n[pdf-view]: https://atom.io/packages/pdf-view\n\n[Preview]: https://support.apple.com/en-us/HT201740\n\n[Skim]: http://skim-app.sourceforge.net/\n\n[Sumatra PDF]: http://www.sumatrapdfreader.org/free-pdf-reader.html\n\n[TeX Live]: https://www.tug.org/texlive/\n\n[xdg-open]: https://linux.die.net/man/1/xdg-open\n\n[Xreader]: https://github.com/linuxmint/xreader\n\n[Zathura]: https://github.com/pwmt/zathura\n",
  "metadata": {
    "name": "dicy",
    "main": "./lib/main",
    "version": "0.1.2",
    "description": "Compile LaTeX, knitr, literate Agda, literate Haskell and Pweave documents using DiCy.",
    "keywords": [
      "tex",
      "latex",
      "dicy"
    ],
    "repository": "https://github.com/yitzchak/atom-dicy",
    "license": "MIT",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    },
    "dependencies": {
      "@dicy/client": "^0.15.2",
      "atom-ts-transpiler": "^1.4.0",
      "command-join": "^2.0.0",
      "dbus-native": "^0.4.0",
      "file-uri-to-path": "^1.0.0",
      "file-url": "^2.0.2",
      "fs-extra": "^7.0.0",
      "lodash": "^4.17.11",
      "readdir-enhanced": "^2.2.2",
      "typescript": "^3.1.6"
    },
    "devDependencies": {
      "@types/atom": "^1.31.0",
      "@types/fs-extra": "^5.0.4",
      "@types/lodash": "^4.14.117",
      "@types/node": "^10.12.2",
      "@types/readdir-enhanced": "^2.2.0",
      "chalk-cli": "^4.1.0",
      "remark-cli": "^6.0.0",
      "remark-preset-lint-consistent": "^2.0.2",
      "remark-preset-lint-markdown-style-guide": "^2.1.2",
      "remark-preset-lint-recommended": "^3.0.2",
      "tslint": "^5.11.0",
      "tslint-config-standard": "^8.0.1"
    },
    "scripts": {
      "fix": "npm run fix-md && npm run fix-ts",
      "fix-ts": "echo Fixing TypeScript... | chalk yellowBright bold && tslint --fix --format stylish --project tsconfig.json",
      "fix-md": "echo Fixing MarkDown... | chalk yellowBright bold && remark . -o",
      "lint": "npm run lint-md && npm run lint-ts",
      "lint-ts": "echo Linting TypeScript... | chalk yellowBright bold && tslint --format stylish --project tsconfig.json",
      "lint-md": "echo Linting MarkDown... | chalk yellowBright bold && remark ."
    },
    "activationCommands": {
      "atom-workspace": [
        "dicy:build",
        "dicy:clean",
        "dicy:initialize",
        "dicy:kill",
        "dicy:kill-all",
        "dicy:open",
        "dicy:scrub",
        "dicy:sync"
      ]
    },
    "activationHooks": [
      "language-knitr:grammar-used",
      "language-latex:grammar-used",
      "language-latexsimple:grammar-used",
      "language-pweave:grammar-used",
      "language-tex:grammar-used"
    ],
    "atomTranspilers": [
      {
        "transpiler": "atom-ts-transpiler",
        "glob": "{!(node_modules)/**/,}*.ts?(x)",
        "options": {
          "cacheKeyFiles": [],
          "verbose": false
        }
      }
    ],
    "consumedServices": {
      "atom-ide-busy-signal": {
        "versions": {
          "0.1.0": "consumeBusySignal"
        }
      },
      "linter-indie": {
        "versions": {
          "2.0.0": "consumeLinterIndie"
        }
      }
    },
    "configSchema": {
      "event": {
        "type": "object",
        "title": "Event",
        "description": "Settings that control what events trigger various commands.",
        "order": 1,
        "collapsed": false,
        "properties": {
          "buildOnSave": {
            "title": "Build after Save",
            "description": "Automatically run build after files are saved.",
            "type": "boolean",
            "default": false,
            "order": 1
          },
          "openAfterBuild": {
            "title": "Open after Build",
            "description": "Automatically open targets after build is completed.",
            "type": "boolean",
            "default": true,
            "order": 2
          },
          "syncAfterChangeCursorPosition": {
            "title": "Sync after Cursor Change",
            "description": "Automatically synchronize the opener with the current cursor position. This will only work if the opener supports SyncTeX.",
            "type": "boolean",
            "default": false,
            "order": 3
          }
        }
      },
      "open": {
        "type": "object",
        "description": "Settings that determine which opener to use.",
        "title": "Open",
        "order": 2,
        "collapsed": false,
        "properties": {
          "opener": {
            "title": "Opener",
            "type": "string",
            "enum": [
              "automatic",
              "atril",
              "evince",
              "okular",
              "pdf-view",
              "preview",
              "qpdfview",
              "shell-open",
              "skim",
              "sumatra",
              "xdg-open",
              "x-reader",
              "zathura"
            ],
            "default": "automatic",
            "order": 1
          },
          "openInBackground": {
            "title": "Open in Background",
            "type": "boolean",
            "default": true,
            "order": 2
          },
          "pdfViewSplitDirection": {
            "title": "pdf-view Split Direction",
            "description": "Pane split direction to use for pdf-view.",
            "type": "string",
            "enum": [
              "left",
              "right",
              "up",
              "down"
            ],
            "default": "right",
            "order": 3
          }
        }
      },
      "build": {
        "type": "object",
        "title": "Build",
        "description": "Settings that configure the build.",
        "order": 3,
        "collapsed": false,
        "properties": {
          "$PATH": {
            "title": "Search Path",
            "description": "Additional directories needed for finding TeX or viewers. Use `$PATH` to include system search path. Paths should be separated by `:` on Linux/MacOS and ';' on Windows.",
            "type": "string",
            "default": "$PATH"
          },
          "engine": {
            "title": "Engine",
            "description": "Select LaTeX engine",
            "type": "string",
            "enum": [
              "pdflatex",
              "lualatex",
              "platex",
              "uplatex",
              "xelatex"
            ],
            "default": "pdflatex"
          },
          "shellEscape": {
            "title": "Shell Escape",
            "type": "string",
            "enum": [
              "enabled",
              "restricted",
              "disabled"
            ],
            "default": "restricted"
          },
          "synctex": {
            "title": "SyncTeX",
            "type": "boolean",
            "default": true
          },
          "outputDirectory": {
            "title": "Output Directory",
            "description": "All files generated during a build will be redirected here. Leave blank if you want the build output to be stored in the same directory as the TeX document.",
            "type": "string",
            "default": ""
          },
          "outputFormat": {
            "title": "Output Format",
            "description": "Output file format.",
            "type": "string",
            "enum": [
              "pdf",
              "dvi",
              "ps"
            ],
            "default": "pdf"
          },
          "dviToPdfEngine": {
            "title": "DVI to PDF Engine",
            "description": "Program to use when post-processing DVI output in order to produce PDF. This is only used for LaTeX engines not capable of natively producing PDF.",
            "type": "string",
            "enum": [
              "dvipdfmx",
              "xdvipdfmx",
              "dvipdf"
            ],
            "default": "xdvipdfmx"
          },
          "intermediatePostScript": {
            "title": "Generate Intermediate PostScript",
            "description": "Enable generation of PostScript using dvips when the output format is pdf. This is only used for LaTeX engines not capable of natively producing PDF",
            "type": "boolean",
            "default": false
          },
          "copyTargetsToRoot": {
            "title": "Copy Targets to Root Directory",
            "description": "Ensures that the output files produced by a successful build is stored together with the TeX document that produced it.",
            "type": "boolean",
            "default": false
          },
          "cleanPatterns": {
            "title": "Clean Patterns",
            "description": "The files and directories to remove during a clean.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "$OUTDIR/$JOB!($OUTEXT|.synctex.gz|.tex)",
              "/$OUTDIR/_minted-$JOB/*"
            ]
          }
        }
      }
    }
  }
}