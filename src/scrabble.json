{
  "name": "scrabble",
  "repository": {
    "type": "git",
    "url": "https://github.com/shnaveen25/scrabble"
  },
  "downloads": 46,
  "stargazers_count": 1,
  "releases": {
    "latest": "1.6.0"
  },
  "versions": {
    "1.6.0": {
      "name": "scrabble",
      "author": "naveen",
      "version": "1.6.0",
      "description": "Hold on to something",
      "license": "MIT",
      "keywords": [
        "React",
        "Redux",
        "Hooks",
        "Scrabble"
      ],
      "repository": "https://github.com/shnaveen25/scrabble",
      "homepage": "https://github.com/shnaveen25/scrabble#readme",
      "bugs": {
        "url": "https://github.com/shnaveen25/scrabble/issues"
      },
      "readmeFilename": "README.md",
      "engines": {
        "atom": ">=1.0.0 <2.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/scrabble/versions/1.6.0/tarball"
      }
    }
  },
  "readme": "# scrabble\n\n\n**Atom snippets which Hold on to something for React.**\n\n \nHooks are a new addition in React 16.8. They let you use state and other React features without writing a class [Ref](https://reactjs.org/docs/hooks-overview.html).\n\n\nBasically, A React Component looks :\n\n    import React, { useEffect, useReducer } from 'react';\n    import { connect } from 'react-redux';\n    import { bindActionCreators } from 'redux';\n    \n    const initialState = {\n      STATE: VALUE\n    };\n    \n    function stateReducer(state, action) {\n      switch (action.type) {\n        case ACTION_TYPE:\n          return {\n            ...state,\n            STATE: VALUE\n          };\n        default:\n          return state;\n      }\n    }\n    \n    const COMPONENT_NAME = (props) => {\n      const [state, dispatch] = useReducer(stateReducer, initialState);\n      // setState can be achived by dispatching.\n      // dispatch({ type: 'ACTION_TYPE', payload: VALUE });\n    \n      // Similar to componentDidMount and componentDidUpdate:\n      useEffect(\n        () => {\n          // do something after render\n    \n          // Similar to componentWillUnmount\n          return () => {\n            // do something when component unmounts\n          };\n        },\n        []\n      );\n    \n      return (\n        <div className=\"container\">\n    \n        </div>\n      );\n    };\n    \n    const mapStateToProps = (state) => ({\n    \n    });\n    \n    const mapDispatchToProps = dispatch => bindActionCreators({\n    \n    }, dispatch);\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(COMPONENT_NAME);\n\n# To make the above step simple\n\nIntroducting **Scrabble**.\n\nAll you have to do is search and install a package called `Scrabble` on atom.\n\n - On your Atom editor Simply key-in a pre-defined set of commands . For\n   example,    `useHook`\n   \n - Select the itom from Plugin.\n - Edit the highlighted section.\n - Tab to move between highlighted sections.\n",
  "metadata": {
    "name": "scrabble",
    "author": "naveen",
    "version": "1.6.0",
    "description": "Hold on to something",
    "license": "MIT",
    "keywords": [
      "React",
      "Redux",
      "Hooks",
      "Scrabble"
    ],
    "repository": "https://github.com/shnaveen25/scrabble",
    "homepage": "https://github.com/shnaveen25/scrabble#readme",
    "bugs": {
      "url": "https://github.com/shnaveen25/scrabble/issues"
    },
    "readmeFilename": "README.md",
    "engines": {
      "atom": ">=1.0.0 <2.0.0"
    }
  }
}