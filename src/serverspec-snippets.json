{
  "name": "serverspec-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/Tomohiro/atom-serverspec-snippets"
  },
  "downloads": 1314,
  "stargazers_count": 11,
  "releases": {
    "latest": "0.1.1"
  },
  "versions": {
    "0.1.1": {
      "name": "serverspec-snippets",
      "version": "0.1.1",
      "description": "Snippets to help you writing Serverspec specs",
      "repository": "https://github.com/Tomohiro/atom-serverspec-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/serverspec-snippets/versions/0.1.1/tarball"
      }
    },
    "0.1.0": {
      "name": "serverspec-snippets",
      "version": "0.1.0",
      "description": "Snippets to help you writing Serverspec specs",
      "repository": "https://github.com/Tomohiro/atom-serverspec-snippets",
      "license": "MIT",
      "engines": {
        "atom": ">0.50.0"
      },
      "dependencies": {},
      "dist": {
        "tarball": "https://www.atom.io/api/packages/serverspec-snippets/versions/0.1.0/tarball"
      }
    }
  },
  "readme": "Serverspec Snippets in Atom\n================================================================================\n\n[![apm](https://img.shields.io/apm/v/serverspec-snippets.svg?style=flat-square)](https://atom.io/packages/serverspec-snippets)\n\nSnippets to help you writing [Serverspec](http://serverspec.org) specs in\n[Atom](http://atom.io)\n\n\nExample\n--------------------------------------------------------------------------------\n\n```ruby\n# Serverspec\n# Resource Types http://serverspec.org/resource_types.html\n\n# http://serverspec.org/resource_types.html#cgroup\ndescribe 'Linux cgroup resource type' do\n  # cgroup + [TAB]\n  describe cgroup('group1') do\n    its('cpuset.cpus') { should eq 1 }\n  end\nend\n\n# http://serverspec.org/resource_types.html#command\ndescribe 'Command resource type' do\n  # command + [TAB]\n  describe command('whoami') do\n    # return_stdout + [TAB]\n    it { should return_stdout 'root' }\n  end\n\n  describe command('ls /foo') do\n    # return_stderr + [TAB]\n    it { should return_stderr 'ls: /foo: No such file or directory' }\n  end\n\n  describe command('ls /tmp') do\n    # return_exit_status + [TAB]\n    it { should return_exit_status '0' }\n  end\n\n  # command_stdout + [TAB]\n  describe command('ls -al /') do\n    its(:stdout) { should match /bin/ }\n  end\n\n  # command_stderr + [TAB]\n  describe command('ls /foo') do\n    its(:stderr) { should match /No such file or directory/ }\n  end\nend\n\n# http://serverspec.org/resource_types.html#cron\ndescribe 'Cron resource type' do\n  # cron + [TAB]\n  describe cron do\n    it { should have_entry '* * * * * /usr/bin/foo' }\n  end\n\n  # cron_with_user + [TAB]\n  describe cron do\n    it { should have_entry('* * * * * /usr/bin/foo').with_user('Tomohiro') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#default_gateway\ndescribe 'Default gateway resource type' do\n  describe default_gateway do\n    its(:ipaddress) { should eq '192.168.10.1' }\n    its(:interface) { should eq 'br0' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#file\ndescribe 'File and directory resource type' do\n  # file + [TAB]\n  describe file('/etc/passwd') do\n    # be_file + [TAB]\n    it { should be_file }\n  end\n\n  describe file('/var/log/httpd') do\n    # be_directory + [TAB]\n    it { should be_directory }\n  end\n\n  describe file('/var/run/unicorn.sock') do\n    # be_socket + [TAB]\n    it { should be_socket }\n  end\n\n  describe file('/etc/httpd/conf/httpd.conf') do\n    # content + [TAB]\n    its(:content) { should match /ServerName www.example.com/ }\n  end\n\n  describe file('/etc/sudoers') do\n    # be_mode + [TAB]\n    it { should be_mode 440 }\n\n    # be_owned_by + [TAB]\n    it { should be_owned_by 'root' }\n\n    # be_grouped_into + [TAB]\n    it { should be_grouped_into 'wheel' }\n\n    # be_readable + [TAB]\n    it { should be_readable }\n\n    # be_readable_by + [TAB]\n    it { should by_readable.by('root') }\n\n    # be_readable_by_user + [TAB]\n    it { should by_readable.by_user('apache') }\n  end\n\n  describe file('/etc/sudoers') do\n    # be_writable + [TAB]\n    it { should be_writable }\n\n    # be_writable + [TAB]\n    it { should by_writable.by('root') }\n\n    # be_writable + [TAB]\n    it { should by_writable.by_user('apache') }\n  end\n\n  describe file('/etc/init.d/httpd') do\n    # be_executable + [TAB]\n    it { should be_executable }\n\n    # be_executable_by + [TAB]\n    it { should by_executable.by('root') }\n\n    # be_executable_by_user + [TAB]\n    it { should by_executable.by_user('httpd') }\n  end\n\n  describe file('/') do\n    # be_mounted + [TAB]\n    it { should be_mounted }\n\n    # be_mounted_with_type + [TAB]\n    it { should be_mounted.with( :type => 'ext4' ) }\n\n    # be_mounted_with_options + [TAB]\n    it { should be_mounted.with( :options => { :rw => true } ) }\n\n    # be_mounted_only_with + [TAB]\n    it do\n      should be_mounted.only_with(\n        :device  => '/dev/mapper/VolGroup-lv_root',\n        :type    => 'ext4',\n        :options => {\n          :rw   => true,\n          :mode => 620\n        }\n      )\n    end\n  end\n\n  describe file('C:\\\\Windows\\\\System32\\\\wuapi.dll') do\n    # be_version + [TAB]\n    it { should be_version('7.6.7600.256') }\n  end\n\n  describe file('/etc/services') do\n    # match_md5checksum + [TAB]\n    it { should match_md5checksum '35435ea447c19f0ea5ef971837ab9ced' }\n\n    # match_sha256checksum + [TAB]\n    it { should match_sha256checksum 'a861c49e9a76d64d0a756e1c9125ae3aa6b88df3f814a51cecffd3e89cce6210' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#group\ndescribe 'Group resource type' do\n  # group + [TAB]\n  describe group('root') do\n    # exist + [TAB]\n    it { should exist }\n\n    # have_gid + [TAB]\n    it { should have_gid 0 }\n  end\nend\n\n# http://serverspec.org/resource_types.html#host\ndescribe 'Host resource type' do\n  describe host('serverspec.org') do\n    # be_resolvable + [TAB]\n    it { should be_resolvable }\n\n    # be_resolvable_by_hosts + [TAB]\n    it { should be_resolvable.by('hosts') }\n\n    # be_resolvable_by_dns + [TAB]\n    it { should be_resolvable.by('dns') }\n\n    # be_reachable + [TAB]\n    it { should be_reachable }\n\n    # be_reachable_with + [TAB]\n    it { should be_reachable.with( :port => 22 ) }\n  end\n\n  # host_address + [TAB]\n  describe host('example.com') do\n    its(:ipaddress) { should eq '1.2.3.4' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#iis_app_pool\ndescribe 'IIS Application Pool resource type' do\n  describe iis_app_pool('Default App Pool') do\n    # have_dotnet_version + [TAB]\n    it { should have_dotnet_version('2.0') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#iis_website\ndescribe 'IIS Website resource type' do\n  describe iis_website('Default Website') do\n    # exists + [TAB]\n    it { should exist }\n\n    # be_enabled + [TAB]\n    it { should be_enabled }\n\n    # be_running + [TAB]\n    it { should be_running }\n\n    # be_in_app_pool + [TAB]\n    it { should be_in_app_pool('Default App Pool') }\n\n    # have_physial_path + [TAB]\n    it { have_physial_path('C:\\\\inetpub\\\\www') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#interface\ndescribe 'Network interface resource type' do\n  # interface + [TAB]\n  describe interface('eth0') do\n    # have_ipv4_address + [TAB]\n    it { should have_ipv4_address('192.168.10.10') }\n  end\n\n  # interface_speed + [TAB]\n  describe interface('eth0') do\n    its(:speed) { should eq 1000 }\n  end\nend\n\n# http://serverspec.org/resource_types.html#ipfilter\ndescribe 'Ipfilter resource type' do\n  # ipfilter + [TAB]\n  describe ipfilter do\n    it { should have_rule 'pass in quick on lo0 all' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#ipnat\ndescribe 'Ipnat resource type' do\n  # ipnat + [TAB]\n  describe ipnat do\n    it { should _have_rule 'map net1 192.168.0.0/24 -> 0.0.0.0/32' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#iptables\ndescribe 'Iptables resource type' do\n  # iptables + [TAB]\n  describe iptables do\n    it { should have_rule '-P ACCCEPT' }\n\n    # have_rule_table_chain + [TAB]\n    it { should have_rule('-P INPUT ACCEPT').with_table('mangle').with_chain('INPUT') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#kernel_module\ndescribe 'Kernel module resource type' do\n  # kernel_module + [TAB]\n  describe kernel_module('virtio_balloon') do\n    it { should be_loaded }\n  end\nend\n\n# http://serverspec.org/resource_types.html#linux_kernel_parameter\ndescribe 'Linux kernel parameter resource type' do\n  # linux_kernel_parameters + [TAB]\n  describe 'Linux kernel parameters' do\n    context linux_kernel_parameter('net.ipv4.tcp_syncookies') do\n      its(:value) { should eq 1 }\n    end\n  end\n\n  # linux_kernel_parameter + [TAB]\n  describe linux_kernel_parameter('kernel.osrelease') do\n    its(:value) { should be eq '2.6.32-131.0.15.el6.x86_64' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#lxc\ndescribe 'LXC(Linux Container) resource type' do\n  # lxc + [TAB]\n  describe lxc('ct01') do\n    # be_running + [TAB]\n    it { should be_running }\n  end\nend\n\n# http://serverspec.org/resource_types.html#mail_alias\ndescribe 'Mail alias resource type' do\n  # mail_alias + [TAB]\n  describe mail_alias('daemon') do\n    it { should be_aliased_to 'root' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#package\ndescribe 'Package resource type' do\n  # package + [TAB]\n  describe package('httpd') do\n    it { should be_installed }\n  end\n\n  # package_installed_by\n  describe package('jekyll') do\n    it { should be_installed.by('gem').with_version('0.12.1') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#php_config\ndescribe 'PHP config resource type' do\n  # php_config_parameters + [TAB]\n  describe 'PHP config prameters' do\n    context php_config('default_mimetype') do\n      its(:value) { should eq 'text/html'}\n    end\n  end\n\n  # php_config + [TAB]\n  describe php_config('session.cache_expire') do\n    its(:value) { should eq '180' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#port\ndescribe 'Port resource type' do\n  # port + [TAB]\n  describe port(80) do\n    # be_listening + [TAB]\n    it { should be_listening }\n\n    # be_listening_with + [TAB]\n    it { should be_listening.with('tcp') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#ppa\ndescribe 'PPA resource type' do\n  # ppa + [TAB]\n  describe ppa('launchpad-username/ppa-name') do\n    # exists + [TAB]\n    it { should exist }\n  end\nend\n\n# http://serverspec.org/resource_types.html#process\ndescribe 'Process resource type' do\n  # process + [TAB]\n  describe process('memchached') do\n    # be_running + [TAB]\n    it { should be_running }\n  end\n\n  # process_parameter + [TAB]\n  describe process('memcached') do\n    its(:args) { should match /-c 32000\\b/ }\n  end\nend\n\n# http://serverspec.org/resource_types.html#routing_table\ndescribe 'Routing table resource type' do\n  # routing_table + [TAB]\n  describe routing_table do\n    it do\n      should have_entry(\n        :destination => '192.168.100.0/24',\n        :interface   => 'eth1',\n        :gateway     => '192.168.10.1'\n      )\n    end\n  end\nend\n\n# http://serverspec.org/resource_types.html#selinux\ndescribe 'SELinux resource type' do\n  # selinux + [TAB]\n  describe selinux do\n    # be_disabled + [TAB]\n    it { should be_disabled }\n\n    # be_enforcing + [TAB]\n    it { should be_enforcing }\n\n    # be_permissive + [TAB]\n    it { should be_permissive }\n  end\nend\n\n# http://serverspec.org/resource_types.html#service\ndescribe 'Service resource type' do\n  # service + [TAB]\n  describe service('ntpd') do\n    # be_enabled + [TAB]\n    it { should be_enabled }\n\n    # be_enabled_with_level + [TAB]\n    it { should be_enabled.with_level(3) }\n\n    # be_running + [TAB]\n    it { should be_running }\n\n    # be_monitored_by + [TAB]\n    it { should be_monitored_by('monit') }\n  end\n\n  # be_running_under_supervisor + [TAB]\n  describe service('ntpd') do\n    it { should be_running.under('supervisor') }\n  end\n\n  describe service('DNS Client') do\n    # be_installed + [TAB] (Only supported in Windows)\n    it { should be_installed }\n\n    # have_start_mode + [TAB] (Only supported in Windows)\n    it { should have_start_mode('Manual') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#user\ndescribe 'User resource type' do\n  # user + [TAB]\n  describe user('root') do\n    # exists + [TAB]\n    it { should exist }\n\n    # belong_to_group + [TAB]\n    it { should belong_to_group 'root' }\n\n    # have_uid + [TAB]\n    it { should have_uid 0 }\n\n    # have_home_directory + [TAB]\n    it { should have_home_directory '/root' }\n\n    # have_login_shell\n    it { should have_login_shell '/bin/bash' }\n\n    # have_authorized_key\n    it { should have_authorized_key 'ssh-rsa ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH foo@bar.local' }\n  end\nend\n\n# http://serverspec.org/resource_types.html#windows_feature\ndescribe 'Windows Feature resource type' do\n  # windows_feature + [TAB]\n  describe windows_feature('Minesweeper') do\n    it { be_installed }\n  end\n\n  describe windows_feature('Web-Webserver') do\n    # be_installed_by + [TAB]\n    it { should be_installed.by('powershell') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#windows_registry_key\ndescribe 'Windows Registry Key resource type' do\n  # windows_registry_key + [TAB]\n  describe windows_registry_key('HKEY_USERS\\S-1-5-21\\Test MyKey') do\n    # exists + [TAB]\n    it { should exist }\n\n    # have_property + [TAB]\n    it { should have_property('string value') }\n\n    # have_property_type + [TAB]\n    it { should have_property('binary value', :type_binary) }\n\n    # have_value + [TAB]\n    it { should have_value('test default data') }\n\n    # have_property_value + [TAB]\n    it { should have_property_value('binary value', :type_binary, 'dfa0f066') }\n  end\nend\n\n# http://serverspec.org/resource_types.html#yumrepo\ndescribe 'Yumrepo resource type' do\n  # yumrepo + [TAB]\n  describe yumrepo('epel') do\n    # exists + [TAB]\n    it { should exist }\n\n    # be_enabled + [TAB]\n    it { should be_enabled }\n  end\nend\n\n# http://serverspec.org/resource_types.html#zfs\ndescribe 'ZFS resource type' do\n  # zfs + [TAB]\n  describe zfs('rpool') do\n    # exists + [TAB]\n    it { should exist }\n\n    # zfs_have_property + [TAB]\n    it { should have_property 'mountpoint' => '/rpool', 'compression' => 'off' }\n  end\nend\n```\n\nLICENSE\n--------------------------------------------------------------------------------\n\n&copy; 2014 - 2016 Tomohiro TAIRA.\n\nThis project is licensed under the MIT license. See [LICENSE](LICENSE) for details.\n",
  "metadata": {
    "name": "serverspec-snippets",
    "version": "0.1.1",
    "description": "Snippets to help you writing Serverspec specs",
    "repository": "https://github.com/Tomohiro/atom-serverspec-snippets",
    "license": "MIT",
    "engines": {
      "atom": ">0.50.0"
    },
    "dependencies": {}
  }
}