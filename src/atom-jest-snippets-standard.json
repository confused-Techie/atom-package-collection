{
  "name": "atom-jest-snippets-standard",
  "repository": {
    "type": "git",
    "url": "https://github.com/peterjacobson/atom-jest-snippets"
  },
  "downloads": 270,
  "stargazers_count": 0,
  "releases": {
    "latest": "1.1.0"
  },
  "versions": {
    "1.1.0": {
      "name": "atom-jest-snippets-standard",
      "version": "1.1.0",
      "description": "Snippets for Jest testing framework, fork of Bryce Osterhaus's atom-jest-snippets",
      "repository": "https://github.com/peterjacobson/atom-jest-snippets.git",
      "keywords": [
        "atom",
        "jest",
        "snippets",
        "standard"
      ],
      "engines": {
        "atom": ">0.50.0"
      },
      "author": [
        "Bryce Osterhaus",
        "Peter Jacobson"
      ],
      "license": "MIT",
      "dist": {
        "tarball": "https://www.atom.io/api/packages/atom-jest-snippets-standard/versions/1.1.0/tarball"
      }
    }
  },
  "readme": "# Atom Jest Snippets\n\nAn [Atom](https://atom.io/) snippet library for [Jest](https://facebook.github.io/jest/). This library uses ES6 syntax.\n\nInstall via `apm install atom-jest-snippets`\n\n## Snippet Available\n\nexpect.cson\n---\n\n#### [exp]\nexpect(value)\n```js\nexpect($1)$2\n```\n\n#### [ebe]\nexpect(value).toBe(value)\n```js\nexpect($1).toBe($2);\n```\n\n#### [ecall]\nexpect(mockFn).toHaveBeenCalled()\n```js\nexpect($1).toHaveBeenCalled();\n```\n\n#### [ecallt]\nexpect(mockFn).toHaveBeenCalledTimes(number)\n```js\nexpect($1).toHaveBeenCalledTimes($2);\n```\n\n#### [ecallw]\nexpect(mockFn).toHaveBeenCalledWith(arg1, arg2, ...)\n```js\nexpect($1).toHaveBeenCalledWith($2);\n```\n\n#### [ecloseto]\nexpect(number).toBeCloseTo(number, numDigits)\n```js\nexpect($1).toBeCloseTo($2, $3);\n```\n\n#### [edef]\nexpect(value).toBeDefined()\n```js\nexpect($1).toBeDefined();\n```\n\n#### [efalsy]\nexpect(value).toBeFalsy()\n```js\nexpect($1).toBeFalsy();\n```\n\n#### [egreater]\nexpect(number).toBeGreaterThan(number)\n```js\nexpect($1).toBeGreaterThan($2);\n```\n\n#### [egreateror]\nexpect(number).toBeGreaterThanOrEqual(number)\n```js\nexpect($1).toBeGreaterThanOrEqual($2);\n```\n\n#### [eless]\nexpect(number).toBeLessThan(number)\n```js\nexpect($1).toBeLessThan($2);\n```\n\n#### [elessor]\nexpect(number).toBeLessThanOrEqual(number)\n```js\nexpect($1).toBeLessThanOrEqual($2);\n```\n\n#### [einst]\nexpect(obj).toBeInstanceOf(Class)\n```js\nexpect($1).toBeInstanceOf($2);\n```\n\n#### [enull]\nexpect(value).toBeNull()\n```js\nexpect($1).toBeNull();\n```\n\n#### [etruthy]\nexpect(value).toBeTruthy()\n```js\nexpect($1).toBeTruthy();\n```\n\n#### [eundef]\nexpect(value).toBeUndefined()\n```js\nexpect($1).toBeUndefined();\n```\n\n#### [econ]\nexpect(list).toContain(value)\n```js\nexpect($1).toContain($2);\n```\n\n#### [econeq]\nexpect(list).toContainEqual(value)\n```js\nexpect($1).toContainEqual($2);\n```\n\n#### [eeq]\nexpect(value).toEqual(value)\n```js\nexpect($1).toEqual($2);\n```\n\n#### [eleng]\nexpect(list).toHaveLength(number)\n```js\nexpect($1).toHaveLength($2);\n```\n\n#### [emat]\nexpect(string).toMatch(regexpOrString)\n```js\nexpect($1).toMatch($2);\n```\n\n#### [ematob]\nexpect(obj).toMatchObject(obj)\n```js\nexpect($1).toMatchObject($2);\n```\n\n#### [ematsnap]\nexpect(value).toMatchSnapshot(optionalString)\n```js\nexpect($1).toMatchSnapshot($2);\n```\n\n#### [ethrow]\nexpect(func).toThrow(error)\n```js\nexpect($1).toThrow($2);\n```\nglobals.cson\n---\n\n#### [desc]\ndescribe(name, fn)\n```js\ndescribe('$1', () => {\n  $2\n});\n```\n\n#### [test]\ntest(name, fn)\n```js\ntest('$1', () => {\n  $2\n});\n```\n\n#### [it]\nalias for test()\n```js\nit('$1', () => {\n  $2\n});\n```\n\n#### [aftera]\nafterAll(fn)\n```js\nafterAll(() => {\n  $1\n})\n```\n\n#### [aftere]\nafterEach(fn)\n```js\nafterEach(() => {\n  $1\n})\n```\n\n#### [beforea]\nbeforeAll(fn)\n```js\nbeforeAll(() => {\n  $1\n})\n```\n\n#### [beforee]\nbeforeEach(fn)\n```js\nbeforeEach(() => {\n  $1\n})\n```\njest.cson\n---\n\n#### [jcleartimers]\n```js\njest.clearAllTimers();\n```\n\n#### [jdisableautomock]\n```js\njest.disableAutomock();\n```\n\n#### [jenableautomock]\n```js\njest.enableAutomock();\n```\n\n#### [jfn]\n```js\njest.fn($1);\n```\n\n#### [jismock]\n```js\njest.isMockFunction($1);\n```\n\n#### [jgenmock]\n```js\njest.genMockFromModule($1);\n```\n\n#### [jmock]\n```js\njest.mock($1);\n```\n\n#### [jresetallmocks]\n```js\njest.resetAllMocks();\n```\n\n#### [jresetmodules]\n```js\njest.resetModules();\n```\n\n#### [jrunticks]\n```js\njest.runAllTicks();\n```\n\n#### [jruntimers]\n```js\njest.runAllTimers();\n```\n\n#### [jrunpendtimers]\n```js\njest.runOnlyPendingTimers();\n```\n\n#### [jsetmock]\n```js\njest.setMock($1);\n```\n\n#### [junmock]\n```js\njest.unmock($1);\n```\n\n#### [jfaketimers]\n```js\njest.useFakeTimers($1);\n```\n\n#### [jrealtimers]\n```js\njest.useRealTimers($1);\n```\nmock.cson\n---\n\n#### [mclear]\n```js\n.mockClear();\n```\n\n#### [mreset]\n```js\n.mockReset();\n```\n\n#### [mimpl]\n```js\n.mockImplementation($1);\n```\n\n#### [mimplonce]\n```js\n.mockImplementationOnce($1);\n```\n\n#### [mrett]\n```js\n.mockReturnThis();\n```\n\n#### [mretval]\n```js\n.mockReturnValue($1);\n```\n\n#### [mretvalo]\n```js\n.mockReturnValueOnce($1);\n```",
  "metadata": {
    "name": "atom-jest-snippets-standard",
    "version": "1.1.0",
    "description": "Snippets for Jest testing framework, fork of Bryce Osterhaus's atom-jest-snippets",
    "repository": "https://github.com/peterjacobson/atom-jest-snippets.git",
    "keywords": [
      "atom",
      "jest",
      "snippets",
      "standard"
    ],
    "engines": {
      "atom": ">0.50.0"
    },
    "author": [
      "Bryce Osterhaus",
      "Peter Jacobson"
    ],
    "license": "MIT"
  }
}