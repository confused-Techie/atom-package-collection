{
  "name": "remote-sync-2",
  "repository": {
    "type": "git",
    "url": "https://github.com/netizen-ais/remote-sync-2"
  },
  "downloads": 1272,
  "stargazers_count": 1,
  "releases": {
    "latest": "0.2.4"
  },
  "versions": {
    "0.2.4": {
      "name": "remote-sync-2",
      "version": "0.2.4",
      "description": "Upload your files to remote host after every change. Both SCP/SFTP and FTP are supported.",
      "license": "MIT",
      "repository": "https://github.com/netizen-ais/remote-sync-2",
      "main": "index.js",
      "engines": {
        "atom": ">=1.30"
      },
      "dependencies": {
        "async": "^3.2.0",
        "atom-message-panel": "^1.3.1",
        "atom-space-pen-views": "^2.2.0",
        "chokidar": "^3.4.0",
        "fs-plus": "^3.1.1",
        "ftp": "^0.3.10",
        "minimatch": "^3.0.4",
        "mkdirp": "^1.0.4",
        "randomatic": "^3.1.1",
        "ssh2": "^0.8.9"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/remote-sync-2/versions/0.2.4/tarball"
      }
    },
    "0.2.0": {
      "name": "remote-sync-2",
      "version": "0.2.0",
      "description": "Upload your files to remote host after every change. Both SCP/SFTP and FTP are supported.",
      "license": "MIT",
      "repository": "https://github.com/netizen-ais/remote-sync-2",
      "main": "index.js",
      "engines": {
        "atom": ">=1.30"
      },
      "dependencies": {
        "async": "^3.2.0",
        "atom-message-panel": "^1.3.1",
        "atom-space-pen-views": "^2.2.0",
        "chokidar": "^3.4.0",
        "fs-plus": "^3.1.1",
        "ftp": "^0.3.10",
        "minimatch": "^3.0.4",
        "mkdirp": "^1.0.4",
        "randomatic": "^3.1.1",
        "ssh2": "^0.8.9"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/remote-sync-2/versions/0.2.0/tarball"
      }
    }
  },
  "readme": "# Atom Remote Sync 2 [![Atom.io](https://img.shields.io/badge/Atom.io-1.48.0-40A977.svg)](https://atom.io) [![GitHub stars](https://img.shields.io/github/stars/netizen-ais/remote-sync-2.svg)](https://github.com/netizen-ais/remote-sync-2/stargazers) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/netizen-ais/remote-sync-2/master/LICENSE) [![GitHub issues](https://img.shields.io/github/issues/netizen-ais/remote-sync-2.svg)](https://github.com/netizen-ais/remote-sync-2/issues)\n\nUse SFTP and FTP features inside Atom, having the ability to upload and download files directly from inside Atom.\n\nRemote Sync PRO is a fork of the remote-sync project which was abandoned in 2016. Remote Sync PRO fixes bugs and compatibility issues present in remote-sync, and will be bringing new features in the near future.\n\nRemote Sync 2 is a fork of the remote-sync-pro project which seems to be unmaintaied since 2018.\n\n## New\n\n- Does a local/remote MD5 before diff, to avoid opening a useless external tool (TBD: make it an option in config)\n\n## Features\n\n- Uploading/downloading files to/from the server\n- Displaying diffs between the local and remote files with your favourite diff tool\n- Monitoring files for external changes and automatically uploading - useful for scss/less compiling\n- Support for both SCP/SFTP and FTP\n\n## Extras\n\n- Toggle for uploading changes automatically when you save a file\n- Define files to be monitored to be automatically monitoring\n- Set difftoolCommand in AtomSettingView of `remote-sync` -- The path to your diff tool executable\n- Toggle the logs for extra information\n- Toggle the hiding and showing of the log panel\n- Set custom config name\n- Support for native Atom Notifications\n\n## Installation\n\nYou can install this like any other Atom package, with one of these methods:\n\n### Via Atom (recommended)\n\n- Open Atom\n- Open settings\n\n  - <kbd>ctrl</kbd>+<kbd>,</kbd> | <kbd>cmd</kbd>+<kbd>,</kbd>\n  - Edit > Preferences (Linux)\n  - Atom > Preferences (OS X)\n  - File > Preferences (Windows)\n\n- Select \"Install\" tab\n- Search for `remote-sync` and click install\n\n### APM - terminal\n\n- Open a terminal\n- Run `apm install remote-sync`\n\n### Manually\n\n- Download / clone this repository to your `~/.atom/packages/`\n- Enter the directory\n- Run `apm install`\n\n## Usage\n\nYou can configure Remote Sync PRO using multiple methods:\n\n### Existing project\n\n#### Via Atom (recommended)\n\n1. Right click main project folder\n2. Navigate to Remote Sync PRO > Configure\n3. Fill in the details / select options\n4. Hit save\n\n#### Manually\n\n1. Add a file named `.remote-sync.json` to your project\n2. Add/configure with one of the contents below\n3. Save the file\n\n### From scratch, with a remote server\n\n1. Follow setups for creating existing project - see above\n1. Right click main project folder\n2. Navigate to Remote Sync PRO > Download folder\n\n\n## Options\n\nThe `.remote-sync.json` in your project root will use these options:\n\n\n| Option            | Datatype | Default                         | Details                                                                                        |\n|-------------------|----------|---------------------------------|------------------------------------------------------------------------------------------------|\n| `transport`       | String   | \"\"                              | `scp` for SCP/SFTP, or `ftp` for FTP                                                           |\n| `hostname`        | String   | \"\"                              | Remote host address                                                                            |\n| `port`            | String   | \"\"                              | Remort port to connect on (typically 22 for SCP/SFTP, 21 for FTP)                              |\n| `username`        | String   | \"\"                              | Remote host username                                                                           |\n| `password`        | String   | \"\"                              | Remote host password                                                                           |\n| `keyfile`         | String   | \"\"                              | Absolute path to SSH key (only used for SCP)                                                   |\n| `secure`          | Boolean  | false                           | Set to true for both control and data connection encryption (only used for FTP)                |\n| `passphrase`      | String   | \"\"                              | Passphrase for the SSH key (only used for SCP)                                                 |\n| `useAgent`        | String   | false                           | Whether or not to use an agent process (only used for SCP)                                     |\n| `target`          | String   | \"\"                              | Target directory on remote host                                                                |\n| `source`          | String   | \"\"                              | Source directory relative to project root                                                      |\n| `ignore`          | Array    | [\".remote-sync.json\",\".git/**\"] | Array of [minimatch](https://github.com/isaacs/minimatch) patterns of files to ignore          |\n| `watch`           | Array    | []                              | Array of files (relative to project root - starting with \"/\") to watch for changes             |\n| `uploadMirrors`   | Array    | []                              | Transport mirror config array when upload                                                      |\n| `uploadOnSave`    | Boolean  | false                           | Whether or not to upload the current file when saved                                           |\n| `saveOnUpload`    | Boolean  | false                           | Whether or not to save a modified file before uploading                                        |\n| `useAtomicWrites` | Boolean  | false                           | Upload file using a temporary filename before moving to its final location (only used for SCP) |\n| `deleteLocal`     | Boolean  | false                           | Whether or not to delete the local file / folder after remote delete                           |\n\n\n## Example configuration's\n\n### SCP example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n  \"passphrase\": \"your_passphrase\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ],\n  \"watch\":[\n    \"/css/styles.css\",\n    \"/index.html\"\n  ]\n}\n```\n\n### SCP `useAgent` example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"useAgent\": true,\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ],\n  \"watch\":[\n    \"/css/styles.css\",\n    \"/index.html\"\n  ]\n}\n```\n\n### FTP example:\n\n```json\n{\n  \"transport\": \"ftp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 21,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ],\n  \"watch\":[\n    \"/css/styles.css\",\n    \"/index.html\"\n  ]\n}\n```\n\n### Upload mirrors example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n  \"passphrase\": \"your_passphrase\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ],\n  \"watch\":[\n    \"/css/styles.css\",\n    \"/index.html\"\n  ],\n  \"uploadMirrors\":[\n    {\n      \"transport\": \"scp\",\n      \"hostname\": \"10.10.10.10\",\n      \"port\": 22,\n      \"username\": \"vagrant\",\n      \"password\": \"vagrant\",\n      \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n      \"passphrase\": \"your_passphrase\",\n      \"target\": \"/home/vagrant/dirname/subdirname_one\",\n    },\n    {\n      \"transport\": \"ftp\",\n      \"hostname\": \"10.10.10.10\",\n      \"port\": 21,\n      \"username\": \"vagrant\",\n      \"password\": \"vagrant\",\n      \"target\": \"/home/vagrant/dirname/subdirname_two\",\n    }\n  ]\n}\n```\n## Diff tool command\n\nYou can use any GUI app which takes two arguments without parameters like **meld** or **gvimdiff**.\n\nIf you want to use app with parameters or console app, try this:\n\n- **code** (Visual Studio Code)\n\n  create shell script `atom-diff-code` in `/usr/local/bin/` with command\n\n  ```\n  #!/bin/bash\n  code -d -n --disable-extensions $1 $2\n  ```\n\n  Then set `atom-diff-code` in Diff tool command setting in remote-sync in atom\n\n- **vim** in Ubuntu:\n\n  `atom-diff-vimdiff`\n\n  ```\n  #!/bin/bash\n  gnome-terminal -x bash -c \"vimdiff  $1 $2\"\n  ```\n- **diff** in Ubuntu:\n\n  `atom-diff-diff`\n\n  ```\n  #!/bin/bash\n  gnome-terminal -x bash -c \"diff $1 $2; exec bash\"\n  ```\n",
  "metadata": {
    "name": "remote-sync-2",
    "version": "0.2.4",
    "description": "Upload your files to remote host after every change. Both SCP/SFTP and FTP are supported.",
    "license": "MIT",
    "repository": "https://github.com/netizen-ais/remote-sync-2",
    "main": "index.js",
    "engines": {
      "atom": ">=1.30"
    },
    "dependencies": {
      "async": "^3.2.0",
      "atom-message-panel": "^1.3.1",
      "atom-space-pen-views": "^2.2.0",
      "chokidar": "^3.4.0",
      "fs-plus": "^3.1.1",
      "ftp": "^0.3.10",
      "minimatch": "^3.0.4",
      "mkdirp": "^1.0.4",
      "randomatic": "^3.1.1",
      "ssh2": "^0.8.9"
    }
  }
}