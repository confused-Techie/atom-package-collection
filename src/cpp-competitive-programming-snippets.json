{
  "name": "cpp-competitive-programming-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets"
  },
  "downloads": 3185,
  "stargazers_count": 0,
  "releases": {
    "latest": "1.0.1"
  },
  "versions": {
    "1.0.1": {
      "name": "CPP-Competitive-Programming-Snippets",
      "version": "1.0.1",
      "description": "This package contains snippets for making the experience of competitive coding faster and smoother. These snippets are templates for some commonly used algorithms in C++.",
      "engines": {
        "atom": "*"
      },
      "dependencies": {},
      "repository": {
        "type": "git",
        "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets"
      },
      "bugs": {
        "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets/issues"
      },
      "license": "MIT",
      "dist": {
        "tarball": "https://www.atom.io/api/packages/cpp-competitive-programming-snippets/versions/1.0.1/tarball"
      }
    },
    "1.0.0": {
      "name": "CPP-Competitive-Programming-Snippets",
      "version": "1.0.0",
      "description": "This package contains snippets for making the experience of competitive coding faster and smoother. These snippets are templates for some commonly used algorithms in C++.",
      "engines": {
        "atom": "*"
      },
      "dependencies": {},
      "repository": {
        "type": "git",
        "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets"
      },
      "bugs": {
        "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets/issues"
      },
      "license": "MIT",
      "dist": {
        "tarball": "https://www.atom.io/api/packages/cpp-competitive-programming-snippets/versions/1.0.0/tarball"
      }
    }
  },
  "readme": "# CPP_Competitive_Programming_Atom_Snippets\nA collection of code snippets for competitive programmers, written in C++ for atom editor.\n\nMany times this happens in competitive programming competitions that you&#39;ve figured out an algorithm for the solution of the problem, which happens to be a standard algorithm. How helpful would it be to have snippets for commonly used concepts/algorithms in competitive programming in that situation, to provide you an edge over fellow competitors as using snippets will improve your accuracy, speed and hence rank!\n\nThis repository provides extension for atom-text editor which enables atom users to use c++ coding snippets of algorithms while doing competitive programming.\n\n## Installation\n\n- For installation, type Ctrl + Shift + P.\n- Select Settings View:Install Packages And Themes\n- Then search for cpp-competitive-programming-snippets in Packages tab.\n- Restart atom.\n\n## Usage\n\nFollowing table contains all the snippets available in this package. It gives information about the file containing the code of a particular snippet, prompt of the snippet, and when to use that particular snippet.\n\n| **File Name** | **Prompt** | **When to use** |\n| --- | --- | --- |\n| codeChefStarter.cpp | codechef | Starting template for all the codechef problems |\n| codeJamStarter.cpp | codejam | Starting template for all the codejam problems |\n| codeChefStarterPython.py | codechef-py | Starting template for all the codechef problems in python |\n| time.cpp | time | To calculate time taken by a particular code to run |\n| basicGeometry.cpp | geometry-basic | In geometry problems, you&#39;ll need cartesian-points, distance between points and things like these. |\n| convexHull.cpp | convex-hull | To get vector of points belonging to hull in anti-clockwise order |\n| polygonArea.cpp | polygon-area | Find Area of a polygon whose points are given |\n| dfs.cpp | dfs | Depth First Search Algorithm |\n| dsu.cpp | dsu | Disjoint Set Union |\n| ewalk.cpp | ewalk | Euler Walk |\n| graphStarter.cpp | graph-starter | Starting template for all the graph problems |\n| minHeap.cpp | min-heap | min-heap using c++ stl |\n| maxHeap.cpp | max-heap | max-heap using c++ stl |\n| bigInt.cpp | bigint | BigInt in c++ |\n| binomialBigMod.cpp | binomial-big-mod | nCr % m:O(nlog(no. of digits in n)), n&lt;m [finds nCr for all 0&lt;=r&lt;=n in fact vector] (m is large Prime)  Modular Division - Euclid Extended theorem |\n| binomialSmallMod.cpp | binomial-small-mod | nCr % m:O(m^2logn), N is greater than m. (m is small)  Lucas theorem |\n| 2dSegmentTree.cpp | 2d-segment-tree | 2-D Segment Tree for Range Queries in 2-D |\n| simpleSegmentTree.cpp | segment-tree | Classic Segment Tree |\n| splitString.cpp | split-string | Split a c++ string by a delimiter |\n| suffixArray.cpp |  suffix-array | Suffix array and LCP array |\n| binarySearch.cpp | binary-search | Binary Search |\n",
  "metadata": {
    "name": "CPP-Competitive-Programming-Snippets",
    "version": "1.0.1",
    "description": "This package contains snippets for making the experience of competitive coding faster and smoother. These snippets are templates for some commonly used algorithms in C++.",
    "engines": {
      "atom": "*"
    },
    "dependencies": {},
    "repository": {
      "type": "git",
      "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets"
    },
    "bugs": {
      "url": "https://github.com/MeghaSharma21/CPP_Competitive_Programming_Atom_Snippets/issues"
    },
    "license": "MIT"
  }
}