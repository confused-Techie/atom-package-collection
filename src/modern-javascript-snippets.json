{
  "name": "modern-javascript-snippets",
  "repository": {
    "type": "git",
    "url": "https://github.com/tunnckoCore/modern-javascript-snippets"
  },
  "downloads": 3369,
  "stargazers_count": 6,
  "releases": {
    "latest": "1.1.0"
  },
  "versions": {
    "1.1.0": {
      "name": "modern-javascript-snippets",
      "displayName": "Modern (ES6+) Javascript Snippets",
      "version": "1.1.0",
      "publisher": "tunnckocore",
      "description": "Atom & VSCode - Modern javascript snippets for better productivity with support for JavaScript, Babel, TypeScript, JSX and semicolon-less code.",
      "repository": "https://github.com/tunnckoCore/modern-javascript-snippets",
      "author": "Charlike Mike Reagent <@tunnckoCore> (http://i.am.charlike.online)",
      "precommit.silent": true,
      "license": "MIT",
      "scripts": {
        "test": "standard verbfile.js --fix",
        "prerelease": "npm test",
        "release": "standard-version --sign --no-verify",
        "precommit": "git add --all",
        "commit": "git-cz"
      },
      "dependencies": {},
      "devDependencies": {
        "camelcase": "^4.1.0",
        "commitizen": "^2.9.6",
        "cson-parser": "^1.3.5",
        "cz-conventional-changelog": "^2.0.0",
        "each-promise": "^1.0.5",
        "eslint": "^3.19.0",
        "eslint-config-standard": "^10.2.1",
        "eslint-plugin-promise": "^3.5.0",
        "eslint-plugin-standard": "^3.0.1",
        "pify": "^2.3.0",
        "pre-commit": "^1.2.2",
        "standard": "^10.0.2",
        "standard-version": "^4.0.0",
        "verb-generate-readme": "^0.6.0"
      },
      "files": [
        "atom/"
      ],
      "keywords": [],
      "config": {
        "commitizen": {
          "path": "./node_modules/cz-conventional-changelog"
        }
      },
      "verb": {
        "run": true,
        "toc": {
          "render": true,
          "method": "preWrite",
          "maxdepth": 3
        },
        "layout": "empty",
        "tasks": [
          "readme"
        ],
        "related": {
          "list": [
            "always-done",
            "dush",
            "dush-router",
            "minibase",
            "try-catch-core"
          ],
          "highlight": "always-done"
        },
        "lint": {
          "reflinks": true
        },
        "reflinks": [
          "always-done",
          "async-done",
          "base",
          "charlike",
          "commitizen",
          "dezalgo",
          "once",
          "standard-version",
          "verb",
          "verb-generate-readme",
          "extend-shallow",
          "standard"
        ]
      },
      "engines": {
        "node": ">=4",
        "npm": ">=2",
        "atom": ">=1.0.0",
        "vscode": ">=1.0.0"
      },
      "categories": [
        "Snippets"
      ],
      "contributes": {
        "snippets": [
          {
            "language": "javascript",
            "path": "./vscode/snippets.json"
          },
          {
            "language": "typescript",
            "path": "./vscode/snippets.json"
          },
          {
            "language": "javascriptreact",
            "path": "./vscode/snippets.json"
          },
          {
            "language": "typescriptreact",
            "path": "./vscode/snippets.json"
          },
          {
            "language": "html",
            "path": "./vscode/snippets.json"
          }
        ]
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/modern-javascript-snippets/versions/1.1.0/tarball"
      }
    },
    "1.0.1": {
      "name": "modern-javascript-snippets",
      "version": "1.0.1",
      "description": "Modern javascript snippets for better productivity with support for JavaScript, Babel, TypeScript, JSX and semicolon-less code.",
      "repository": "https://github.com/tunnckoCore/modern-javascript-snippets",
      "author": "Charlike Mike Reagent <@tunnckoCore> (http://i.am.charlike.online)",
      "precommit.silent": true,
      "main": "index.js",
      "license": "MIT",
      "scripts": {
        "test": "echo ok",
        "prerelease": "npm test",
        "release": "standard-version --sign --no-verify",
        "precommit": "git add --all",
        "commit": "git-cz"
      },
      "dependencies": {},
      "devDependencies": {
        "commitizen": "^2.9.2",
        "cson-parser": "^1.3.5",
        "cz-conventional-changelog": "^1.2.0",
        "each-promise": "^1.0.2",
        "eslint": "^3.13.1",
        "eslint-config-standard": "^6.2.1",
        "eslint-plugin-promise": "^3.4.0",
        "eslint-plugin-standard": "^2.0.1",
        "pify": "^2.3.0",
        "pre-commit": "^1.2.2",
        "standard-version": "^4.0.0",
        "verb-generate-readme": "^0.4.1"
      },
      "files": [
        "index.js",
        "snippets/"
      ],
      "keywords": [],
      "config": {
        "commitizen": {
          "path": "./node_modules/cz-conventional-changelog"
        }
      },
      "verb": {
        "run": true,
        "toc": {
          "render": true,
          "method": "preWrite",
          "maxdepth": 3
        },
        "layout": "empty",
        "tasks": [
          "readme"
        ],
        "related": {
          "list": [
            "always-done",
            "minibase",
            "try-catch-core"
          ],
          "highlight": "always-done"
        },
        "lint": {
          "reflinks": true
        },
        "reflinks": [
          "always-done",
          "async-done",
          "base",
          "charlike",
          "commitizen",
          "dezalgo",
          "once",
          "standard-version",
          "verb",
          "verb-generate-readme",
          "extend-shallow",
          "standard"
        ]
      },
      "engines": {
        "node": ">=4",
        "npm": ">=2",
        "atom": ">=1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/modern-javascript-snippets/versions/1.0.1/tarball"
      }
    },
    "1.0.0": {
      "name": "modern-javascript-snippets",
      "version": "1.0.0",
      "description": "Modern javascript snippets for better productivity with support for JavaScript, Babel, TypeScript, JSX and semicolon-less code.",
      "repository": "https://github.com/tunnckoCore/modern-javascript-snippets",
      "author": "Charlike Mike Reagent <@tunnckoCore> (http://i.am.charlike.online)",
      "precommit.silent": true,
      "main": "index.js",
      "license": "MIT",
      "scripts": {
        "test": "verb",
        "prerelease": "npm test",
        "release": "standard-version --sign --no-verify",
        "precommit": "npm test && git add --all",
        "commit": "git-cz"
      },
      "dependencies": {},
      "devDependencies": {
        "commitizen": "^2.9.2",
        "cson-parser": "^1.3.5",
        "cz-conventional-changelog": "^1.2.0",
        "each-promise": "^1.0.2",
        "eslint": "^3.13.1",
        "eslint-config-standard": "^6.2.1",
        "eslint-plugin-promise": "^3.4.0",
        "eslint-plugin-standard": "^2.0.1",
        "pify": "^2.3.0",
        "pre-commit": "^1.2.2",
        "standard-version": "^4.0.0",
        "verb-generate-readme": "^0.3.0"
      },
      "files": [
        "index.js",
        "snippets/"
      ],
      "keywords": [],
      "config": {
        "commitizen": {
          "path": "./node_modules/cz-conventional-changelog"
        }
      },
      "verb": {
        "run": true,
        "toc": {
          "render": true,
          "method": "preWrite",
          "maxdepth": 3,
          "footer": "\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_"
        },
        "layout": "empty",
        "tasks": [
          "readme"
        ],
        "related": {
          "list": [
            "always-done",
            "minibase",
            "try-catch-core"
          ],
          "highlight": "always-done"
        },
        "lint": {
          "reflinks": true
        },
        "reflinks": [
          "always-done",
          "async-done",
          "base",
          "charlike",
          "commitizen",
          "dezalgo",
          "once",
          "standard-version",
          "verb",
          "verb-generate-readme",
          "extend-shallow",
          "standard"
        ]
      },
      "engines": {
        "node": ">=4",
        "npm": ">=2",
        "atom": ">=1.0.0"
      },
      "dist": {
        "tarball": "https://www.atom.io/api/packages/modern-javascript-snippets/versions/1.0.0/tarball"
      }
    }
  },
  "readme": "# modern-javascript-snippets\n\n> Atom & VSCode - Modern javascript snippets for better productivity with support for JavaScript, Babel, TypeScript, JSX and semicolon-less code.\n\n[![atom package manager][apm-img]][apm-url]\n[![apm downloads][downloads-img]][downloads-url]\n\n[![vscode version][vscode-version-img]][vscode-version-url]\n[![vscode installs][vscode-installs-img]][vscode-installs-url]\n\n[![dependency status][david-img]][david-url]\n[![standard code style][standard-img]][standard-url]\n\n[![commitizen friendly][czfriendly-img]][czfriendly-url] \n[![greenkeeper friendly][gkfriendly-img]][gkfriendly-url] \n\nYou might also be interested in [always-done](https://github.com/hybridables/always-done#readme).\n\nHighly opinionated to my needs - don't includes snippets that I don't use. But also is mixed between my previous Sublime [javascript-charlike-snippets](https://github.com/tunnckoCore/javascript-charlike-snippets), [standardjs-snippets](https://atom.io/packages/standardjs-snippets) and [es6-javascript](https://atom.io/packages/es6-javascript).\n\nIt uses [standard][] style as base. But easily can be changed with a bit automation, so\nplease open an issue if you want such thing.\n\nThe documentation is built and fully automated using [verb][], including [table of contents](#table-of-contents) and even the [snippets docs](#snippets).\n\n## Table of Contents\n\n- [Install](#install)\n- [Snippets](#snippets)\n  * [assert](#assert)\n  * [async](#async)\n  * [classes](#classes)\n  * [console](#console)\n  * [control-flow](#control-flow)\n  * [declarations](#declarations)\n  * [events](#events)\n  * [functions](#functions)\n  * [iterables](#iterables)\n  * [json](#json)\n  * [loops](#loops)\n  * [misc](#misc)\n  * [modules-commonjs](#modules-commonjs)\n  * [modules-es2015](#modules-es2015)\n  * [objects](#objects)\n  * [returns](#returns)\n  * [testing](#testing)\n  * [timers](#timers)\n  * [types](#types)\n- [Related](#related)\n- [Contributing](#contributing)\n- [Building docs](#building-docs)\n- [Running tests](#running-tests)\n- [Author](#author)\n- [License](#license)\n\n_(TOC generated by [verb](https://github.com/verbose/verb) using [markdown-toc](https://github.com/jonschlinkert/markdown-toc))_\n\n## Install\nInstall with [apm](https://atom.io/packages) _(Atom Editor's package manager)_\n\n```\n$ apm install modern-javascript-snippets\n```\n\nOr launch [VSCode](https://code.visualstudio.com/) Quick Open (`Ctrl+P`), paste the following command, and press enter.\n\n```\next install modern-javascript-snippets\n```\n\n## Snippets\n\n### assert\n> All [assert](././atom/assert.cson) snippets\n\n#### `ase⇥` assert.strictEqual\n\n```js\n${1:assert}.strictEqual(${2:actual}, ${3:expected})${0}\n```\n\n#### `asn⇥` assert.notStrictEqual\n\n```js\n${1:assert}.notStrictEqual(${2:actual}, ${3:expected})${0}\n```\n\n#### `asd⇥` assert.deepStrictEqual\n\n```js\n${1:assert}.deepStrictEqual(${2:actual}, ${3:expected})${0}\n```\n\n#### `asdn⇥` assert.notDeepStrictEqual\n\n```js\n${1:assert}.notDeepStrictEqual(${2:actual}, ${3:expected})${0}\n```\n\n#### `asi⇥` assert.ifError\n\n```js\n${1:assert}.ifError(${2:err})${0}\n```\n\n#### `ast⇥` assert.throws\n\n```js\n${1:assert}.throws(${2:actual}, ${3:expected})${0}\n```\n\n**[back to top](#readme)**\n\n### async\n> All [async](././atom/async.cson) snippets\n\n#### `cb⇥` Node callback\n\n```js\n(err, ${1:value}) => {${0}}\n```\n\n#### `p⇥` Promise constructor\n\n```js\nnew Promise((resolve${1:, reject}) => {\n  ${0}\n})\n```\n\n#### `then⇥` Promise.then\n\n```js\n${1:promise}.then((${2:value}) => {${0}})\n```\n\n#### `.then⇥` chain then\n\n```js\n.then((${1:value}) => {${0}})\n```\n\n#### `catch⇥` Promise.catch\n\n```js\n${1:promise}.catch((${2:err}) => {${0}})\n```\n\n#### `.catch⇥` chain catch\n\n```js\n.catch((${1:err}) => {${0}})\n```\n\n**[back to top](#readme)**\n\n### classes\n> All [classes](././atom/classes.cson) snippets\n\n#### `cs⇥` class\n\n```js\nclass ${1:ClassName} {\n  constructor (${2:args}) {\n    ${3}\n  }\n}\n```\n\n#### `csx⇥` class extends\n\n```js\nclass ${1:ClassName} extends ${2:BaseClass} {\n  constructor (${3:args}) {\n    super(${3:args})\n    ${4}\n  }\n}\n```\n\n#### `csm⇥` class method\n\n```js\n${1:name} (${2:args}) {\n  ${3}\n}\n```\n\n#### `csi⇥` es5 singleton class\n\n```js\nfunction ${1:ClassName} (${2:args}) {\n  if (!(this instanceof ${1:ClassName})) {\n    return new ${1:ClassName}(${2:args})\n  }\n  ${3}\n}\n```\n\n#### `csf⇥` es5 function class\n\n```js\nfunction ${1:ClassName} (${2:args}) {\n  ${3}\n}\n```\n\n**[back to top](#readme)**\n\n### console\n> All [console](././atom/console.cson) snippets\n\n#### `cl⇥` console.log\n\n```js\nconsole.log(${0})\n```\n\n#### `ce⇥` console.error\n\n```js\nconsole.error(${0})\n```\n\n#### `cw⇥` console.warn\n\n```js\nconsole.warn(${0})\n```\n\n#### `cd⇥` console.dir\n\n```js\nconsole.dir(${0})\n```\n\n**[back to top](#readme)**\n\n### control-flow\n> All [control-flow](././atom/control-flow.cson) snippets\n\n#### `if⇥` if statement\n\n```js\nif (${1:condition}) {\n  ${2}\n}\n```\n\n#### `el⇥` else statement\n\n```js\nelse {\n  ${1}\n}\n```\n\n#### `ife⇥` if/else statement\n\n```js\nif (${1:condition}) {\n  ${2}\n} else {\n  ${3}\n}\n```\n\n#### `ei⇥` else if statement\n\n```js\nelse if (${1:condition}) {\n  ${2}\n}\n```\n\n#### `tc⇥` try/catch\n\n```js\ntry {\n  ${1}\n} catch (${2:err}) {\n  ${3}\n}\n```\n\n#### `tf⇥` try/finally\n\n```js\ntry {\n  ${1}\n} finally {\n  ${2}\n}\n```\n\n#### `tcf⇥` try/catch/finally\n\n```js\ntry {\n  ${1}\n} catch (${2:err}) {\n  ${3}\n} finally {\n  ${4}\n}\n```\n\n**[back to top](#readme)**\n\n### declarations\n> All [declarations](././atom/declarations.cson) snippets\n\n#### `v⇥` var statement\n\n```js\nvar ${1:name}\n```\n\n#### `v=⇥` var assignment\n\n```js\nvar ${1:name} = ${2:value}\n```\n\n#### `l⇥` let statement\n\n```js\nlet ${1:name}\n```\n\n#### `l=⇥` let assignment\n\n```js\nlet ${1:name} = ${2:value}\n```\n\n#### `c⇥` const statement\n\n```js\nconst ${1:name}\n```\n\n#### `c=⇥` const assignment\n\n```js\nconst ${1:name} = ${2:value}\n```\n\n#### `cy⇥` const yielded\n\n```js\nconst ${1:name} = yield ${2:value}\n```\n\n#### `ca⇥` const awaited\n\n```js\nconst ${1:name} = await ${2:value}\n```\n\n#### `ly⇥` let yielded\n\n```js\nlet ${1:name} = yield ${2:value}\n```\n\n#### `la⇥` let awaited\n\n```js\nlet ${1:name} = await ${2:value}\n```\n\n#### `co⇥` const object\n\n```js\nconst ${1:name} = {\n  ${2}\n}\n```\n\n#### `ca⇥` const array\n\n```js\nconst ${1:name} = [\n  ${2}\n]\n```\n\n**[back to top](#readme)**\n\n### events\n> All [events](././atom/events.cson) snippets\n\n#### `on⇥` on event handler\n\n```js\n${1:emitter}.on('${2:event}', ${3:args})\n```\n\n#### `.on⇥` chain .on\n\n```js\n.on('${1:event}', ${2:handler})\n```\n\n#### `once⇥` once event handler\n\n```js\n${1:emitter}.once('${2:event}', ${3:args})\n```\n\n#### `.once⇥` chain .once\n\n```js\n.once('${1:event}', ${2:handler})\n```\n\n#### `emit⇥` emit event\n\n```js\n${1:emitter}.emit('${2:event}', ${3:args})\n```\n\n#### `.emit⇥` chain .emit\n\n```js\n.emit('${1:event}', ${2:args})\n```\n\n**[back to top](#readme)**\n\n### functions\n> All [functions](././atom/functions.cson) snippets\n\n#### `f⇥` anonymous function\n\n```js\nfunction (${1:args}) {${0}}\n```\n\n#### `fn⇥` named function\n\n```js\nfunction ${1:name} (${2:args}) {${0}}\n```\n\n#### `asf⇥` async anonymous function\n\n```js\nasync function (${1:args}) {${0}}\n```\n\n#### `asfn⇥` async named function\n\n```js\nasync function ${1:name} (${2:args}) {${0}}\n```\n\n#### `af⇥` arrow function\n\n```js\n(${1:args}) => ${2:statement}\n```\n\n#### `afn⇥` arrow fn with body\n\n```js\n(${1:args}) => {${0}}\n```\n\n#### `gf⇥` generator\n\n```js\nfunction * (${1:args}) {${0}}\n```\n\n#### `gfn⇥` named generator\n\n```js\nfunction * ${1:name} (${2:args}) {${0}}\n```\n\n#### `iife⇥` immediately-invoked function expression\n\n```js\n;(function (${1:args}) {\n  ${0}\n})(${2})\n```\n\n#### `fa⇥` function apply\n\n```js\n${1:fn}.apply(${2:this}, ${3:args})\n```\n\n#### `fc⇥` function call\n\n```js\n${1:fn}.call(${2:this}, ${3:args})\n```\n\n#### `fb⇥` function bind\n\n```js\n${1:fn}.bind(${2:this}, ${3:args})\n```\n\n**[back to top](#readme)**\n\n### iterables\n> All [iterables](././atom/iterables.cson) snippets\n\n#### `fe⇥` forEach loop\n\n```js\n${1:iterable}.forEach(${2:iterator})\n```\n\n#### `.fe⇥` chain forEach\n\n```js\n.forEach(${1:iterator})\n```\n\n#### `map⇥` map\n\n```js\n${1:iterable}.map(${2:iterator})\n```\n\n#### `.map⇥` chain map\n\n```js\n.map(${1:iterator})\n```\n\n#### `reduce⇥` reduce\n\n```js\n${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n  ${0}\n}${4:, initial})\n```\n\n#### `.reduce⇥` chain reduce\n\n```js\n.reduce((${1:previous}, ${2:current}) => {\n  ${0}\n}${3:, initial})\n```\n\n#### `filter⇥` filter\n\n```js\n${1:iterable}.filter(${2:iterator})\n```\n\n#### `.filter⇥` chain filter\n\n```js\n.filter(${1:iterator})\n```\n\n#### `find⇥` find\n\n```js\n${1:iterable}.find(${2:iterator})\n```\n\n#### `.find⇥` chain find\n\n```js\n.find(${1:iterator})\n```\n\n#### `every⇥` every\n\n```js\n${1:iterable}.every(${2:iterator})\n```\n\n#### `.every⇥` chain every\n\n```js\n.every(${1:iterator})\n```\n\n#### `some⇥` some\n\n```js\n${1:iterable}.some(${2:iterator})\n```\n\n#### `.some⇥` chain some\n\n```js\n.some(${1:iterator})\n```\n\n**[back to top](#readme)**\n\n### json\n> All [json](././atom/json.cson) snippets\n\n#### `;⇥` JSON key/value pair\n\n```js\n\"${1:key}\": \"${2:value}\"\n```\n\n#### `;a⇥` JSON array\n\n```js\n\"${1:key}\": [\"${2:values}\"]\n```\n\n#### `;t⇥` JSON true\n\n```js\n\"${1:key}\": true\n```\n\n**[back to top](#readme)**\n\n### loops\n> All [loops](././atom/loops.cson) snippets\n\n#### `fl⇥` for loop\n\n```js\nfor (let ${1:i} = 0; ${1:i} < ${2:iterable}${3:.length}; ${1:i}++) {\n  ${4}\n}\n```\n\n#### `fi⇥` for in loop\n\n```js\nfor (let ${1:key} in ${2:source}) {\n  if (${2:source}.hasOwnProperty(${1:key})) {\n    ${3}\n  }\n}\n```\n\n#### `fo⇥` for of loop\n\n```js\nfor (let ${1:key} of ${2:source}) {\n  ${3}\n}\n```\n\n#### `wl⇥` while loop\n\n```js\nwhile (${1:condition}) {\n  ${2}\n}\n```\n\n#### `wf⇥` fast while loop\n\n```js\nlet len = ${1:iterable}.length\nlet i = 0\n\nwhile (i < len) {\n  let val = ${1:iterable}[${2:i++}]\n  ${0}\n}\n```\n\n**[back to top](#readme)**\n\n### misc\n> All [misc](././atom/misc.cson) snippets\n\n#### `us⇥` use strict\n\n```js\n'use strict'\n```\n\n#### `self⇥` const self this\n\n```js\nconst self = this\n```\n\n#### `ye⇥` yield\n\n```js\nyield ${0}\n```\n\n#### `aw⇥` await\n\n```js\nawait ${0}\n```\n\n#### `pe⇥` process.exit\n\n```js\nprocess.exit(${1:code})${0}\n```\n\n#### `thn⇥` throw new error\n\n```js\nthrow new ${1:TypeError}('${2:message}')${3}\n```\n\n#### `iferr⇥` if not typeof then throw error\n\n```js\nif (typeof ${1:actual} !== ${2:expected}) {\n  throw new ${3:TypeError}('${4:message}')\n}${5}\n```\n\n#### `js⇥` JSON.stringify()\n\n```js\nJSON.stringify($0)\n```\n\n#### `jp⇥` JSON.parse()\n\n```js\nJSON.parse($0)\n```\n\n#### `afi⇥` arrayify\n\n```js\n/* istanbul ignore next */\nconst arrayify = (val) => {\n  if (!val) return []\n  if (Array.isArray(val)) return val\n  return [val]\n}\n```\n\n#### `fixture⇥` fixture (useful for assert.throws)\n\n```js\nfunction fixture () {\n  ${1:fnName}\n}${0}\n```\n\n**[back to top](#readme)**\n\n### modules-commonjs\n> All [modules-commonjs](././atom/modules-commonjs.cson) snippets\n\n#### `req⇥` require module\n\n```js\nrequire('${1:pkg}')${0}\n```\n\n#### `rr⇥` const require package\n\n```js\nconst ${2:name} = require('${1:pkg}')${0}\n```\n\n#### `em⇥` exports.member\n\n```js\nexports.${1:member} = ${2:value}\n```\n\n#### `emd⇥` exports default\n\n```js\nexports['default'] = ${1:value}\n```\n\n#### `me⇥` module.exports\n\n```js\nmodule.exports = ${1:value}\n```\n\n#### `med⇥` module exports and exports default\n\n```js\nmodule.exports = exports['default'] = ${1:value}\n```\n\n**[back to top](#readme)**\n\n### modules-es2015\n> All [modules-es2015](././atom/modules-es2015.cson) snippets\n\n#### `ex⇥` module export\n\n```js\nexport ${1:member}\n```\n\n#### `exd⇥` module default export\n\n```js\nexport default ${1:member}\n```\n\n#### `im⇥` import module\n\n```js\nimport ${2:name} from '${1:pkg}'${3}\n```\n\n#### `ima⇥` import module as\n\n```js\nimport ${2:*} as ${3:name} from '${1:pkg}'${4}\n```\n\n#### `imd⇥` import module destructured\n\n```js\nimport { $2 } from '${1:pkg}'${3}\n```\n\n**[back to top](#readme)**\n\n### objects\n> All [objects](././atom/objects.cson) snippets\n\n#### `kv⇥` key/value pair\n\n```js\n${1:key}: ${2:'value'}\n```\n\n#### `proto⇥` prototype method\n\n```js\n${1:ClassName}.prototype.${2:key} = ${3:value}\n```\n\n#### `.proto⇥` chain prototype method\n\n```js\n.prototype.${2:key} = ${3:value}\n```\n\n#### `xa⇥` extend-shallow\n\n> See [extend-shallow][] lib\n\n```js\nextend(${1:defaults}, ${2:sources})${0}\n```\n\n#### `oa⇥` Object.assign\n\n```js\nObject.assign(${1:dest}, ${2:source})${0}\n```\n\n#### `ok⇥` Object.keys\n\n```js\nObject.keys(${1:obj})${0}\n```\n\n**[back to top](#readme)**\n\n### returns\n> All [returns](././atom/returns.cson) snippets\n\n#### `r⇥` return\n\n```js\nreturn ${0}\n```\n\n#### `rth⇥` return this\n\n```js\nreturn this\n```\n\n#### `rn⇥` return null\n\n```js\nreturn null\n```\n\n#### `rt⇥` return true\n\n```js\nreturn true\n```\n\n#### `rf⇥` return false\n\n```js\nreturn false\n```\n\n#### `r0⇥` return 0\n\n```js\nreturn 0\n```\n\n#### `r-1⇥` return -1\n\n```js\nreturn -1\n```\n\n#### `rp⇥` return promise\n\n```js\nreturn new Promise((resolve${1:, reject}) => {\n  ${0}\n})\n```\n\n**[back to top](#readme)**\n\n### testing\n> All [testing](././atom/testing.cson) snippets\n\n#### `ita⇥` async test (mocha/mukla)\n\n```js\n${1:it}('${2:description}', (${3:done}) => {\n  ${0}\n})\n```\n\n#### `its⇥` synchronous test (mocha/mukla)\n\n```js\n${1:it}('${2:description}', () => {\n  ${0}\n})\n```\n\n#### `te⇥` tape-style test\n\n```js\n${1:test}('${2:description}', (${3:t}) => {\n  ${0}\n})\n```\n\n**[back to top](#readme)**\n\n### timers\n> All [timers](././atom/timers.cson) snippets\n\n#### `st⇥` setTimeout\n\n```js\nsetTimeout(() => {\n  ${0}\n}, ${1:delay})\n```\n\n#### `nt⇥` process.nextTick\n\n```js\nprocess.nextTick(() => {\n  ${0}\n}${1:, args})\n```\n\n#### `si⇥` setInterval\n\n```js\nsetInterval(() => {\n  ${0}\n}, ${1:delay})\n```\n\n#### `sim⇥` setImmediate\n\n```js\nsetImmediate(() => {\n  ${0}\n})\n```\n\n**[back to top](#readme)**\n\n### types\n> All [types](././atom/types.cson) snippets\n\n#### `S⇥` String\n\n```js\nString\n```\n\n#### `Sy⇥` Symbol\n\n```js\nSymbol('${1:name}')\n```\n\n#### `B⇥` Boolean\n\n```js\nBoolean\n```\n\n#### `N⇥` Number\n\n```js\nNumber\n```\n\n#### `O⇥` Object\n\n```js\nObject\n```\n\n#### `A⇥` Array\n\n```js\nArray\n```\n\n#### `D⇥` Date\n\n```js\nDate\n```\n\n#### `Rx⇥` RegExp\n\n```js\nRegExp\n```\n\n#### `P⇥` Promise\n\n```js\nPromise\n```\n\n#### `tof⇥` typeof equal to\n\n```js\ntypeof ${1:source} === '${2:value}'\n```\n\n#### `tofi⇥` typeof not equal to\n\n```js\ntypeof ${1:source} !== '${2:value}'\n```\n\n#### `iof⇥` instanceof\n\n```js\n${1:source} instanceof ${2:Object}\n```\n\n#### `ia⇥` Array.isArray()\n\n```js\nArray.isArray(${1:source})\n```\n\n**[back to top](#readme)**\n\n## Related\n- [always-done](https://www.npmjs.com/package/always-done): Handle completion and errors with elegance! Support for streams, callbacks, promises, child processes, async/await and sync functions. A drop-in replacement… [more](https://github.com/hybridables/always-done#readme) | [homepage](https://github.com/hybridables/always-done#readme \"Handle completion and errors with elegance! Support for streams, callbacks, promises, child processes, async/await and sync functions. A drop-in replacement for [async-done][] - pass 100% of its tests plus more\")\n- [dush-router](https://www.npmjs.com/package/dush-router): A simple regex-based router for `dush`, `base`, `minibase` and anything based on them. Works on Browser and Node.js | [homepage](https://github.com/tunnckocore/dush-router#readme \"A simple regex-based router for `dush`, `base`, `minibase` and anything based on them. Works on Browser and Node.js\")\n- [dush](https://www.npmjs.com/package/dush): Microscopic & functional event emitter in ~350 bytes, extensible through plugins | [homepage](https://github.com/tunnckocore/dush#readme \"Microscopic & functional event emitter in ~350 bytes, extensible through plugins\")\n- [minibase](https://www.npmjs.com/package/minibase): Minimalist alternative for Base. Build complex APIs with small units called plugins. Works well with most of the already existing… [more](https://github.com/node-minibase/minibase#readme) | [homepage](https://github.com/node-minibase/minibase#readme \"Minimalist alternative for Base. Build complex APIs with small units called plugins. Works well with most of the already existing [base][] plugins.\")\n- [try-catch-core](https://www.npmjs.com/package/try-catch-core): Low-level package to handle completion and errors of sync or asynchronous functions, using [once][] and [dezalgo][] libs. Useful for and… [more](https://github.com/hybridables/try-catch-core#readme) | [homepage](https://github.com/hybridables/try-catch-core#readme \"Low-level package to handle completion and errors of sync or asynchronous functions, using [once][] and [dezalgo][] libs. Useful for and used in higher-level libs such as [always-done][] to handle completion of anything.\")\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/tunnckoCore/modern-javascript-snippets/issues/new).\nPlease read the [contributing guidelines](CONTRIBUTING.md) for advice on opening issues, pull requests, and coding standards.\nIf you need some help and can spent some cash, feel free to [contact me at CodeMentor.io](https://www.codementor.io/tunnckocore?utm_source=github&utm_medium=button&utm_term=tunnckocore&utm_campaign=github) too.\n\n**In short:** If you want to contribute to that project, please follow these things\n\n1. Please DO NOT edit [README.md](README.md), [CHANGELOG.md](CHANGELOG.md) and [.verb.md](.verb.md) files. See [\"Building docs\"](#building-docs) section.\n2. Ensure anything is okey by installing the dependencies and run the tests. See [\"Running tests\"](#running-tests) section.\n3. Always use `npm run commit` to commit changes instead of `git commit`, because it is interactive and user-friendly. It uses [commitizen][] behind the scenes, which follows Conventional Changelog idealogy.\n4. Do NOT bump the version in package.json. For that we use `npm run release`, which is [standard-version][] and follows Conventional Changelog idealogy.\n\nThanks a lot! :)\n\n## Building docs\nDocumentation and that readme is generated using [verb-generate-readme][], which is a [verb][] generator, so you need to install both of them and then run `verb` command like that\n\n```\n$ npm install verbose/verb#dev verb-generate-readme --global && verb\n```\n\n_Please don't edit the README directly. Any changes to the readme must be made in [.verb.md](.verb.md)._\n\n## Running tests\nClone repository and run the following in that cloned directory\n\n```\n$ npm install && npm test\n```\n\n## Author\n**Charlike Mike Reagent**\n\n+ [github/tunnckoCore](https://github.com/tunnckoCore)\n+ [twitter/tunnckoCore](https://twitter.com/tunnckoCore)\n+ [codementor/tunnckoCore](https://codementor.io/tunnckoCore)\n\n## License\nCopyright © 2016-2017, [Charlike Mike Reagent](http://i.am.charlike.online). Released under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on May 20, 2017._  \n_Project scaffolded using [charlike][] cli._\n\n[always-done]: https://github.com/hybridables/always-done\n[async-done]: https://github.com/gulpjs/async-done\n[base]: https://github.com/node-base/base\n[charlike]: https://github.com/tunnckoCore/charlike\n[commitizen]: https://github.com/commitizen/cz-cli\n[dezalgo]: https://github.com/npm/dezalgo\n[extend-shallow]: https://github.com/jonschlinkert/extend-shallow\n[once]: https://github.com/isaacs/once\n[standard-version]: https://github.com/conventional-changelog/standard-version\n[standard]: https://standardjs.com\n[verb-generate-readme]: https://github.com/verbose/verb-generate-readme\n[verb]: https://github.com/verbose/verb\n\n[downloads-url]: https://atom.io/packages/modern-javascript-snippets\n[downloads-img]: https://img.shields.io/apm/dm/modern-javascript-snippets.svg\n\n[david-url]: https://david-dm.org/tunnckoCore/modern-javascript-snippets\n[david-img]: https://img.shields.io/david/tunnckoCore/modern-javascript-snippets.svg\n\n[standard-url]: https://github.com/feross/standard\n[standard-img]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n\n[apm-url]: https://atom.io/packages/modern-javascript-snippets\n[apm-img]: https://img.shields.io/apm/v/modern-javascript-snippets.svg\n\n[vscode-version-url]: https://marketplace.visualstudio.com/items?itemName=tunnckocore.modern-javascript-snippets\n[vscode-version-img]: http://vsmarketplacebadge.apphb.com/version-short/tunnckocore.modern-javascript-snippets.svg\n\n[vscode-installs-url]: https://marketplace.visualstudio.com/items?itemName=tunnckocore.modern-javascript-snippets\n[vscode-installs-img]: http://vsmarketplacebadge.apphb.com/installs-short/tunnckocore.modern-javascript-snippets.svg\n\n[czfriendly-url]: http://commitizen.github.io/cz-cli\n[czfriendly-img]: https://img.shields.io/badge/commitizen-friendly-brightgreen.svg\n\n[gkfriendly-url]: https://greenkeeper.io/\n[gkfriendly-img]: https://img.shields.io/badge/greenkeeper-friendly-brightgreen.svg\n\n",
  "metadata": {
    "name": "modern-javascript-snippets",
    "displayName": "Modern (ES6+) Javascript Snippets",
    "version": "1.1.0",
    "publisher": "tunnckocore",
    "description": "Atom & VSCode - Modern javascript snippets for better productivity with support for JavaScript, Babel, TypeScript, JSX and semicolon-less code.",
    "repository": "https://github.com/tunnckoCore/modern-javascript-snippets",
    "author": "Charlike Mike Reagent <@tunnckoCore> (http://i.am.charlike.online)",
    "precommit.silent": true,
    "license": "MIT",
    "scripts": {
      "test": "standard verbfile.js --fix",
      "prerelease": "npm test",
      "release": "standard-version --sign --no-verify",
      "precommit": "git add --all",
      "commit": "git-cz"
    },
    "dependencies": {},
    "devDependencies": {
      "camelcase": "^4.1.0",
      "commitizen": "^2.9.6",
      "cson-parser": "^1.3.5",
      "cz-conventional-changelog": "^2.0.0",
      "each-promise": "^1.0.5",
      "eslint": "^3.19.0",
      "eslint-config-standard": "^10.2.1",
      "eslint-plugin-promise": "^3.5.0",
      "eslint-plugin-standard": "^3.0.1",
      "pify": "^2.3.0",
      "pre-commit": "^1.2.2",
      "standard": "^10.0.2",
      "standard-version": "^4.0.0",
      "verb-generate-readme": "^0.6.0"
    },
    "files": [
      "atom/"
    ],
    "keywords": [],
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "verb": {
      "run": true,
      "toc": {
        "render": true,
        "method": "preWrite",
        "maxdepth": 3
      },
      "layout": "empty",
      "tasks": [
        "readme"
      ],
      "related": {
        "list": [
          "always-done",
          "dush",
          "dush-router",
          "minibase",
          "try-catch-core"
        ],
        "highlight": "always-done"
      },
      "lint": {
        "reflinks": true
      },
      "reflinks": [
        "always-done",
        "async-done",
        "base",
        "charlike",
        "commitizen",
        "dezalgo",
        "once",
        "standard-version",
        "verb",
        "verb-generate-readme",
        "extend-shallow",
        "standard"
      ]
    },
    "engines": {
      "node": ">=4",
      "npm": ">=2",
      "atom": ">=1.0.0",
      "vscode": ">=1.0.0"
    },
    "categories": [
      "Snippets"
    ],
    "contributes": {
      "snippets": [
        {
          "language": "javascript",
          "path": "./vscode/snippets.json"
        },
        {
          "language": "typescript",
          "path": "./vscode/snippets.json"
        },
        {
          "language": "javascriptreact",
          "path": "./vscode/snippets.json"
        },
        {
          "language": "typescriptreact",
          "path": "./vscode/snippets.json"
        },
        {
          "language": "html",
          "path": "./vscode/snippets.json"
        }
      ]
    }
  }
}